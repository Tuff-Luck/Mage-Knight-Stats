-----------------
-- Setup the Game
-----------------
--Layout everything needed for the game
function setupGame(player, mouseButton, id)
	if mouseButton=="-1" then
		--Close the setup menu
		UI.hide("Setup")
		UI.setAttribute("helpButtonRealText", "Text", "Help")
		UI.setAttribute("helpButtonReal", "onClick", "DisplayHelp")

		--random Game setup
		if id=="NewUser" or id=="RandomGame" then
			gStates.positionMageKnight[2]="RANDOM"
			gStates.positionMageKnight[5]="RANDOM"
			gStates.playerCount=1
			gStates.scenarioRef=1
			gStates.playersRef=5
			gStates.coop=1
		end
		if id=="NewUser" then
			gStates.gameScenario="First Reconnaissance"
			gStates.scenarioRef=1
			gStates.removeLostLegionExpansion=true
			Player["White"].lookAt({position={52, 1, 35}, pitch=90, yaw=0, distance=20})
		end
		if id=="RandomGame" then
			math.randomseed(os.time())
			while gStates.scenarioRef==1 or gStates.scenarioRef==8 or gStates.scenarioRef==9 or gStates.scenarioRef==19 do gStates.scenarioRef=math.random(2,21) end--19,9,8 aren't solo
			gStates.gameScenario=scenarioList[gStates.scenarioRef][1]
			if gStates.gameScenario:reverse():sub(1, 5)=="ztilB" then gStates.blitz=1 else gStates.blitz=0 end
			if math.random(1,10)>=8 then gStates.rampage=math.random(0,2) end
			if gStates.scenarioRef>=10 and gStates.scenarioRef<=12 then gStates.positionMageKnight[5]="Volkare" end
			if gStates.scenarioRef>=13 and gStates.scenarioRef<=15 then
				gStates.shadesOfTezlaPugs=true
			else
				if math.random(1,10)>=7 then gStates.shadesOfTezlaPugs=true else gStates.shadesOfTezlaPugs=false end
			end
			if math.random(1,10)>=8 then gStates.randomTileOrientation=true else gStates.randomTileOrientation=false end
			if math.random(1,10)>=8 and gStates.gameScenario~="The Gauntlet" then gStates.randomCities=true else gStates.randomCities=false end
			if (math.random(1,10)>=8 and gStates.gameScenario~="Druid Nights") or gStates.gameScenario=="Fast Forwarded Conquest" then gStates.dayRound=true else gStates.dayRound=false end
			if math.random(1,10)>=8 and gStates.gameScenario~="Druid Nights" then gStates.darknessComing=true else gStates.darknessComing=false end
			if math.random(1,10)>=8 then gStates.includeYmirgh=true else gStates.includeYmirgh=false end
			if math.random(1,10)>=8 then gStates.rampageAmbush=true else gStates.rampageAmbush=false end
			if math.random(1,10)>=8 and gStates.rampageAmbush==false then gStates.rampagePursuit=true else gStates.rampagePursuit=false end
			--gStates.questMod=false
			--gStates.weatherMod=false
			if gStates.gameScenario=="First Conquest" or gStates.gameScenario=="Conquest" or gStates.gameScenario=="Conquest Blitz" or gStates.gameScenario=="Mega Conquest"
				or gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" or gStates.gameScenario=="Volkare's Quest"
				or gStates.gameScenario=="Quest for the Golden Grail" or gStates.gameScenario=="Ladyhawke" or gStates.gameScenario=="Fast Forwarded Conquest" then
				if math.random(1,10)>=8 then gStates.volkareCampAsCity=true else gStates.volkareCampAsCity=false end
				if gStates.gameScenario=="Mega Conquest" then gStates.volkareCampAsCity=true end
				if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" or gStates.gameScenario=="Volkare's Quest" then gStates.volkareCampAsCity=false end
				if gStates.volkareCampAsCity==false then
					if math.random(1,10)>=8 then gStates.megapolis=math.random(0,2) end
				end
			end
			if gStates.gameScenario=="The Lost Relic Blitz" or gStates.gameScenario=="Fast Forwarded Conquest" then gStates.mageKnightLevels=true end
		end

		--Put players in prefered positions
		if gStates.playerCount==1 then
			for posPriority=1, 4, 1 do
				if gStates.positionMageKnight[posPriority]~="nobody" and posPriority~=2 then
					broadcastToAll("Changed setup Positions to be more central.", {1, 1, 1})
					gStates.positionMageKnight[2]=gStates.positionMageKnight[posPriority]
					gStates.positionMageKnight[posPriority]="nobody"
					break
				end
			end
		end

		--Record scenario setting to gStates to be saved
		gStates.rounds=scenarioList[gStates.scenarioRef][gStates.playersRef].rounds
		gStates.mapShape=scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape
		gStates.cityTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles
		gStates.cityLevels=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels
		gStates.discardTactics=scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics

		--Change to correct Fame board for scenario
		local fameBoard=getObjectFromGUID("5c9b8c")
		if gStates.blitz==1 then
			fameBoard.setCustomObject({image="http://cloud-3.steamusercontent.com/ugc/764972854705018775/7566B1CF2002F976E385A6A37D83ADFCDEE615E6/"})
		end
		if gStates.gameScenario=="Mega Conquest" then
			fameBoard.setCustomObject({image="http://cloud-3.steamusercontent.com/ugc/767235996519631520/F2D0503D843584DA283D0187F7C628F7AD2A8082/"})
			gStates.rowLengthGainPerLevel=1.59
			gStates.normalRowLength=14.23
			gStates.rowsOnBoard=12
			gStates.scoreIfLooped=168
		end
		fameBoard.reload()

		--remove re-arrange turnorder token note for solo games
		if gStates.playerCount==1 then getObjectFromGUID("0934f2").destruct() end

		--switch rules to the matching page for scenario
		if scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[1]~=1 and getObjectFromGUID("ad593a")~=nil then getObjectFromGUID("ad593a").setState(scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[1]) end
		if scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[2]~=1 and getObjectFromGUID("a9ac21")~=nil then getObjectFromGUID("a9ac21").setState(scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[2]) end
		if scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[3]~=1 and getObjectFromGUID("654224")~=nil then getObjectFromGUID("654224").setState(scenarioList[gStates.scenarioRef].scenarioDetails.ruleStates[3]) end

		--Remove Weather Mod if not being used
		if gStates.weatherMod==false then
			getObjectFromGUID("a822f8").destruct()--Weather Day
			getObjectFromGUID("889c03").destruct()--Weather Day token
			getObjectFromGUID("36014f").destruct()--Weather Day token
			getObjectFromGUID("9b5096").destruct()--Weather Day token
			getObjectFromGUID("b92ffa").destruct()--Weather Day token
			getObjectFromGUID("0ddafe").destruct()--Weather Day token
			getObjectFromGUID("f891ec").destruct()--Weather Rules
		end

		--Remove Quest Mod if not being used
		if gStates.questMod==false then
			getObjectFromGUID("cabd7d").destruct()--Village Quest Deck
			getObjectFromGUID("5073ec").destruct()--Monastery Quest Deck
			getObjectFromGUID("4a5525").destruct()--City Quest Deck
			getObjectFromGUID("9dffb3").destruct()--Unique Quest Deck
			getObjectFromGUID("1f65f1").destruct()--Quest Rules State 1
		end

		--Remove Dungeon ord Tokens if not being used
		if gStates.gameScenario~="Dungeon Lords" then
			getObjectFromGUID("29ea66").destruct()--Village Quest Deck
			getObjectFromGUID("663952").destruct()--Monastery Quest Deck
		end

		--remove some tacctic cards for Fast Forwarded Conquest scenario.
		if gStates.gameScenario=="Fast Forwarded Conquest" then
			local destroyedCard={}
			math.randomseed(os.time())
			for a=1, 6, 1 do
				local duplicate=true
				local b=nil
				while duplicate==true do
					duplicate=false
					b=math.random(1,6)
					if a>4 then b=math.random(7,12) end
					for c=1, a-1, 1 do
						if tacticCard[b]==destroyedCard[c] then duplicate=true end
					end
				end
				getObjectFromGUID(tacticCard[b]).destroy()
				destroyedCard[a]=tacticCard[b]
			end
		end

		--record dummy all skills state
		if gStates.positionMageKnight[5]=="All Skills" then
			gStates.dummyAllSkills=true
		end

		--Removev City models, City Cards, and City Reminders for Loast Legion scenario.
		if gStates.gameScenario=="The Lost Relic Blitz" then
			local cityDelete={	"79a723", "bd6ab1", "8de450", "a37b57",--City Cards
								"6079bc", "d0acb2", "34e3e4", "156b6a",--City Models
								"39d3f3", "a0ec73", "b9bc1c", "ad7b3f"}--City Reminders
			for a, b in pairs(cityDelete) do getObjectFromGUID(b).destruct() end
		end

		--Add mana dice
		gStates.diceNeeded=gStates.playerCount+2+gStates.blitz
		if gStates.positionMageKnight[5]=="Volkare" then gStates.diceNeeded=gStates.diceNeeded+1 end
		for i=1, gStates.diceNeeded do
			local obj=getObjectFromGUID("5cf042").takeObject({position={-12.5+(math.random()*7), 2.0 , -24.0+(math.random()*3.5)}, smooth=false})--Mana Dice Container
			obj.randomize()
		end

		--Include Volkare's Camp as a City
		if gStates.volkareCampAsCity==true then
			getObjectFromGUID("a0ba93").putObject(getObjectFromGUID("63f203").takeObject({rotation={0.0, 180.0, 180.0}, smooth=false, position={-42.0, 3.0, -17.2}, guid="835c91"}))
			getObjectFromGUID("63f203").takeObject({rotation={0.0, 180.0, 0.0}, position={-74.00, 0.96, -7.50}, guid="5a616b"})--Volkares Mat
			getObjectFromGUID("63f203").takeObject({rotation={0.0, 180.0, 0.0}, position={-74.08, 0.94, -2.21}, guid=volkare.terrainHex})--Volkare's Camp Hex
			Wait.frames(function()
				getObjectFromGUID(volkare.terrainHex).lock()
				getObjectFromGUID("758fb3").setPosition({getObjectFromGUID(cityScriptZones[volkare.discZone].cityCard).getPosition()[1]+2.2, 1.5, getObjectFromGUID(cityScriptZones[volkare.discZone].cityCard).getPosition()[3]+2.2})
			end, 150)
			getObjectFromGUID("63f203").takeObject({rotation={0.0, 180.0, 0.0}, position={-74.08, 1.94, -2.21}, guid=volkare.model})--Volkare Model
			getObjectFromGUID("63f203").takeObject({rotation={0.0, 180.0, 0.0}, position={-66.43, 0.96, 18.10}, guid="b2ec85"})--Volker Level Chart
			getObjectFromGUID("63f203").takeObject({rotation={0.0,  45.0, 0.0}, position={-75.27, 1.56, -5.48}, guid="9a686a"})--Volker Dice
		end

		--display the help button
		UI.show("HelpButton")
		gStates.help=false

		--stagered setup
		local delay=1.6
		if gStates.playerCount==1 then delay=0.6 end
		Wait.time(function()--merging things from bag to bag
			--multiplayer wasn't hiding the menu properly
			UI.hide("Setup")
			--Merge Lost Legion Components
			if gStates.removeLostLegionExpansion==false then
				getObjectFromGUID("e926ba").putObject(getObjectFromGUID("d7f7a5"))--12 Advanced Actions
				getObjectFromGUID("e4372a").putObject(getObjectFromGUID("8edf39"))--4 Spells
				getObjectFromGUID("ac75c4").putObject(getObjectFromGUID("00e7f4"))--8 Artifacts
				getObjectFromGUID("75745b").putObject(getObjectFromGUID("892e01"))--8 Regular Units
				getObjectFromGUID("c15e86").putObject(getObjectFromGUID("6d42f9"))--8 Elite Units
				getObjectFromGUID("37d9b4").putObject(getObjectFromGUID("8f9e0e").takeObject())--3 Country Tiles
				getObjectFromGUID("37d9b4").putObject(getObjectFromGUID("8f9e0e").takeObject())--3 Country Tiles
				getObjectFromGUID("37d9b4").putObject(getObjectFromGUID("8f9e0e").takeObject())--3 Country Tiles
				getObjectFromGUID("c87444").putObject(getObjectFromGUID("0f4736").takeObject())--2 Core Tiles
				getObjectFromGUID("c87444").putObject(getObjectFromGUID("0f4736").takeObject())--2 Core Tiles
			else
				getObjectFromGUID("d7f7a5").destruct()--12 Advanced Actions
				getObjectFromGUID("8edf39").destruct()--4 Spells
				getObjectFromGUID("00e7f4").destruct()--8 Artifacts
				getObjectFromGUID("892e01").destruct()--8 Regular Units
				getObjectFromGUID("6d42f9").destruct()--8 Elite Units
			end

			--Delete Lost Legion terrain bags
			getObjectFromGUID("8f9e0e").destruct()--3 Country Tiles
			getObjectFromGUID("0f4736").destruct()--2 Core Tiles

			--Add or destroy the 4 competitive spell cards
			if gStates.coop==0 then getObjectFromGUID("e4372a").putObject(getObjectFromGUID("9b3c8c")) else getObjectFromGUID("9b3c8c").destruct() end

			--Add or destroy the Advanced action Cards
			if gStates.gameScenario~="First Reconnaissance" then getObjectFromGUID("e926ba").putObject(getObjectFromGUID("268194")) else getObjectFromGUID("268194").destruct() end

			--Monster Pug Setup
			monsterSetup()

			Wait.time(function()
				--Go through the five player positions and put out pieces based on the game settings
				playerSetup()

				Wait.time(function()
					--Setup all the decks abd shuffles everything
					deckSetup()

					--Cleans up the "All skills" bag
					local allSkills=getObjectFromGUID("219c37")
					if gStates.dummyAllSkills==true then
						if gStates.playersRef==5 then
							Wait.frames(function()
								allSkills.setPosition({getObjectFromGUID(dummyBoard).getPosition()[1]-5.62, 1.25, getObjectFromGUID(dummyBoard).getPosition()[3]+6.97})
								for skillGUID, skillDetails in pairs(skillTokens) do
									if (skillDetails.mage==turnOrder[1].mage or (skillDetails.mage=="Ymirgh" and gStates.includeYmirgh==false)) and skillDetails.skillType~="Comp" and skillGUID~="d90de4"
									and skillGUID~="dbfdd1" and skillGUID~="045e9d" and skillGUID~="5ebb23" and skillGUID~="0936c2" and skillGUID~="1813fb" and skillGUID~="a49aea" then
										local obj=allSkills.takeObject({guid=skillGUID})
										obj.destroy()
									end
								end
								allSkills.shuffle()
							end, 100)
						end
					else
						allSkills.destroy()
					end

					Wait.time(function()
						--Setup final items that needed to wait for other things
						if gStates.mageKnightLevels==false then
							afterLoad()
						else
							mageLevelBoard()
							UI.show("LevelUpRules")
						end
						--Deal out Weather Cards
					end, delay)
				end, (delay*(gStates.playerCount+gStates.coop)))
			end, delay)
		end, delay)
	end
end

--Deck Setup
function deckSetup()
	--Shuffle all the decks
	local ToBeShuffled = {	"e926ba", "ac75c4", "75745b", "c15e86", "e4372a",--Advanced Actions, Artifacts, Regular Units, Elite Units, Spells,
							"cabd7d", "5073ec", "4a5525", "9dffb3", "a822f8",--Village Quests, Monastery Quests, City Quests, Unique Quests, Day Weather
							"96a66d","21cb81","41db58","f3e3b3","0f342d","86bf10","731696","fb1d20"}--skill containers
	for i=1, #ToBeShuffled, 1 do
		if getObjectFromGUID(ToBeShuffled[i])~=nil then getObjectFromGUID(ToBeShuffled[i]).shuffle() end
	end

	--Ensure a village units is in the first draw for First Reconnaissance
	local villageUnits={"db04a7", "00ebf3", "506ea7", "c1f77c", "d55e5c", "b33811", "004558", "794e16", "484fa3", "a0a6cb", "e8acd7", "4339c4", "ff2a54", "246b0d", "bd1011"}
	if gStates.gameScenario=="First Reconnaissance" then
		local randAmount=15
		if gStates.removeLostLegionExpansion==true then randAmount=11 end
		local a=math.random(1, randAmount)
		getObjectFromGUID("75745b").takeObject({guid=villageUnits[a], position={40.8, 2.0, -4.2}})
	end

	--Organise the Artefact deck for "Quest for the Golden Grail"
	if gStates.gameScenario=="Quest for the Golden Grail" then
		getObjectFromGUID("ac75c4").setPosition({46.84, 2.0, 2.31})--Raise Artifact Deck
		getObjectFromGUID("ac75c4").takeObject({guid="085e59", position={46.84, 1.0, 2.31}})--Put Golden Grail under artifact Deck
		if gStates.removeLostLegionExpansion==false then
			local objToDel=getObjectFromGUID("ac75c4").takeObject({guid="085e69", position={46.84, 8.0, 2.31}})--Delete Mysterious Box
			objToDel.destruct()
		end
	end

	--Remove City only units for scenarios without city access
	local cityUnits={"bb1660", "0fe22e", "5726ab", "f288ea", "f288e1", "5c2da0", "9c5c38"}
	if gStates.gameScenario=="The Lost Relic Blitz" or gStates.gameScenario=="First Conquest" or gStates.gameScenario=="Ladyhawke" then
		for a=1, #cityUnits, 1 do
			if gStates.removeLostLegionExpansion==false or (gStates.removeLostLegionExpansion==true and a<=5) then
				local objToDel=getObjectFromGUID("c15e86").takeObject({guid=cityUnits[a], position={40.8, 8.0, -10.2}})
				objToDel.destruct()
			end
		end
	end
end

--Monster Pug Setup
function monsterSetup()
	local LostLegionPug=	{"89a23e", "77e1c6", "143108", "88ff48", "bf4140", "fe25be", "b65694"}
	local ShadesOfTezlaPug=	{monsterPiles.greenDark, monsterPiles.tanDark, monsterPiles.redDark, monsterPiles.greenElem, monsterPiles.tanElem, monsterPiles.redElem}
	local destinationPug=	{monsterPiles.green, monsterPiles.tan, monsterPiles.red, monsterPiles.gray, monsterPiles.purple, monsterPiles.white, monsterPiles.yellow}
	local deletePug=		{"61ba30", "e9b18c", "9860ce", "4aecb4", "236555", "80c10d"}
	local rewardPug=		{"f9d3a4", "f469f4", "2ca34f", "076ab9", "33de41", "8fe07e"}
	if gStates.removeLostLegionExpansion==false then
		for a=1, #LostLegionPug, 1 do
			for b=1, #getObjectFromGUID(LostLegionPug[a]).getObjects(), 1 do
				getObjectFromGUID(destinationPug[a]).putObject(getObjectFromGUID(LostLegionPug[a]).takeObject())
			end
		end
	end
	for a=1, #LostLegionPug, 1 do getObjectFromGUID(LostLegionPug[a]).destruct() end
	--merge Dark Cultist Tokens
	if (gStates.shadesOfTezlaPugs==true and gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Realm of the Dead Blitz" and gStates.gameScenario~="Custom")
		or gStates.gameScenario=="The Hidden Valley Blitz" then
		for a=1, 3, 1 do
			for b=1, #getObjectFromGUID(ShadesOfTezlaPug[a]).getObjects(), 1 do
				getObjectFromGUID(destinationPug[a]).putObject(getObjectFromGUID(ShadesOfTezlaPug[a]).takeObject())
			end
			getObjectFromGUID(ShadesOfTezlaPug[a]).destruct()
		end
		for a=1, 3, 1 do getObjectFromGUID(deletePug[a]).destruct() end
		if gStates.gameScenario~="Mega Conquest" then
			getObjectFromGUID(darkCrusader.disc).destruct()--Dark Cultist Leader
			getObjectFromGUID(darkCrusader.token).destruct()--Dark Cultist Leader
			getObjectFromGUID(darkCrusader.terrainHex).destruct()--Necropolis
			getObjectFromGUID("f8c83e").destruct()--Necropolis Info Card
		end
		getObjectFromGUID("651583").destruct()--Graveyards
	end
	--merge Elementalist Tokens
	if (gStates.shadesOfTezlaPugs==true and gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Hidden Valley Blitz" and gStates.gameScenario~="Custom")
		or gStates.gameScenario=="The Realm of the Dead Blitz" then
		for a=4, 6, 1 do
			for b=1, #getObjectFromGUID(ShadesOfTezlaPug[a]).getObjects(), 1 do
				getObjectFromGUID(destinationPug[a-3]).putObject(getObjectFromGUID(ShadesOfTezlaPug[a]).takeObject())
			end
			getObjectFromGUID(ShadesOfTezlaPug[a]).destruct()
		end
		for a=4, 6, 1 do getObjectFromGUID(deletePug[a]).destruct() end
		if gStates.gameScenario~="Mega Conquest" then
			getObjectFromGUID(elementalist.disc).destruct()--Elementalist Leader
			getObjectFromGUID(elementalist.token).destruct()--Elementalist Leader
			getObjectFromGUID(elementalist.terrainHex).destruct()--Hidden Valley
			getObjectFromGUID("7121c7").destruct()--Hidden Valley Info Card
		end
	end
	local ToBeShuffled={monsterPiles.redElem, monsterPiles.tanElem, monsterPiles.greenElem, "33de41",								 --Dragons Ele,  Dungeon Ele,  Orcs Ele,  Rewards Ele
						monsterPiles.redDark, monsterPiles.tanDark, monsterPiles.greenDark, "f469f4",								 --Dragons Dark, Dungeon Dark, Orcs Dark, Rewards Dark
						monsterPiles.tan, monsterPiles.green, monsterPiles.red, monsterPiles.purple, monsterPiles.white, monsterPiles.gray, monsterPiles.yellow}--Dungeon, Orcs, Dragons, Mage Tower, City, Keep, Ruins
	for a=1, #ToBeShuffled, 1 do
		if getObjectFromGUID(ToBeShuffled[a])~=nil then getObjectFromGUID(ToBeShuffled[a]).shuffle() end
	end
	if gStates.shadesOfTezlaPugs==false then
		for i=1, #ShadesOfTezlaPug, 1 do getObjectFromGUID(ShadesOfTezlaPug[i]).destruct() end
		for i=1, #deletePug, 1 do getObjectFromGUID(deletePug[i]).destruct() end
		for i=1, #rewardPug, 1 do getObjectFromGUID(rewardPug[i]).destruct() end
		getObjectFromGUID(elementalist.disc).destruct()--Elementalist Leader
		getObjectFromGUID(elementalist.token).destruct()--Elementalist Leader
		getObjectFromGUID(elementalist.terrainHex).destruct()--Hidden Valley
		getObjectFromGUID("7121c7").destruct()--Hidden Valley Info Card
		getObjectFromGUID(darkCrusader.disc).destruct()--Dark Cultist Leader
		getObjectFromGUID(darkCrusader.token).destruct()--Dark Cultist Leader
		getObjectFromGUID(darkCrusader.terrainHex).destruct()--Necropolis
		getObjectFromGUID("f8c83e").destruct()--Necropolis Info Card
		getObjectFromGUID("651583").destruct()--Graveyard
	end
	if gStates.gameScenario~="Life and Death" then getObjectFromGUID("27911e").destruct() end --Faction Die

	--set faction leader levels
	local leaderLevel=gStates.cityLevels[1]
	Wait.frames(function()
		if gStates.gameScenario~="Mega Conquest" then
			if getObjectFromGUID(elementalist.disc)~=nil then
				getObjectFromGUID(elementalist.disc).setCustomObject({image=leaderData[elementalist.terrainHex][leaderLevel].discImg})
				getObjectFromGUID(elementalist.disc).reload()
				getObjectFromGUID(elementalist.token).setCustomObject({image=leaderData[elementalist.terrainHex][leaderLevel].tokenImg})
				getObjectFromGUID(elementalist.token).setName("Elementalist Leader Level "..leaderLevel)
				getObjectFromGUID(elementalist.token).reload()
				gStates.elementalistLevel=leaderLevel
				gStates.cityMonsterQty[elementalist.terrainHex]={shieldsNeeded=leaderLevel, [elementalist.token]="alive"}
				gStates.monsterPlayLocation[elementalist.token]={-55.3, 3.0, 15.3}
			end
			if getObjectFromGUID(darkCrusader.disc)~=nil then
				getObjectFromGUID(darkCrusader.disc).setCustomObject({image=leaderData[darkCrusader.terrainHex][leaderLevel].discImg})
				getObjectFromGUID(darkCrusader.disc).reload()
				getObjectFromGUID(darkCrusader.token).setCustomObject({image=leaderData[darkCrusader.terrainHex][leaderLevel].tokenImg})
				getObjectFromGUID(darkCrusader.token).setName("Dark Crusader Leader Level "..leaderLevel)
				getObjectFromGUID(darkCrusader.token).reload()
				gStates.darkCrusaderLevel=leaderLevel
				gStates.cityMonsterQty[darkCrusader.terrainHex]={shieldsNeeded=leaderLevel, [darkCrusader.token]="alive"}
				gStates.monsterPlayLocation[darkCrusader.token]={-55.3, 3.0, 6.7}
			end
		end
	end, 10)
end

--Go through the five player positions and put out pieces based on the game settings
function playerSetup()
	--generate random Mage Knights if needed
	for a=1, 5, 1 do
		if gStates.positionMageKnight[a]=="RANDOM" or gStates.positionMageKnight[a]=="All Skills" then
			local MageKnight=""
			local duplicate=true
			math.randomseed(os.time())
			while duplicate==true do
				duplicate=false
				MageKnight=mageKnights[math.random(1,8)].mage
				for a=1, 5, 1 do
					if MageKnight==gStates.positionMageKnight[a] then duplicate=true break end
				end
				if gStates.includeYmirgh==false and MageKnight=="Ymirgh" then duplicate=true end
			end
			gStates.positionMageKnight[a]=MageKnight
		end
	end

	--Setup Players Mats.
	local DummyPlayed=0
	local positionOrder={2, 3, 4, 1, 5}--positions are built in this order so dummy is put in the middle
	local startPos=		{0, 0, 0, 0, 0}--records if a position has been used for a turn order token.

	local time=0
	local delay=1.6
	local DummyPlayedTiming=0
	if gStates.playerCount==1 then delay=0.6 end
	for a=1, 5, 1 do
		Wait.time(function()
			local offsetPosition=positionOrder[a]*40-40
			local CommonParts={	{-72.50, 1.00, -38.00}, {-68.60, 1.37, -30.80}, {-68.60, 1.37, -32.4},							--Dummy Board, Black Mana, Gold Mana
								{-67.30, 1.37, -30.80}, {-67.30, 1.37, -32.4}, {-65.90, 1.37, -30.80}, {-65.9, 1.37, -32.4},	--Blue Mana, Green Mana, Red Mana, White Mana
								{-41.76, 1.10, -34.77}, {-41.76, 1.14, -31.10}, {-41.76, 1.18, -36.60}}							--Wound Cards, Wound Tokens, Keep Token
			--Checks if the position has a player, dummy or Volkare required
			if (gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4) or (gStates.positionMageKnight[5]~="nobody" and DummyPlayed==0) then
				--Layout everything from the Common Bag if needed
				local CommonBag=getObjectFromGUID("77b3fd").clone()
				CommonBag.setPosition({-60.0+offsetPosition, 1.5, -38.0})
				for i=1, #CommonParts, 1 do
					local skip=0
					local params={position=CommonParts[i], smooth=false}
					params.position[1]=params.position[1]+offsetPosition
					if i>=2 and i<=7 then params.rotation={0, 30, 0} else params.rotation={0, 180, 0} end
					if positionOrder[a]==5 then params.position[1]=params.position[1]-25.2 params.position[3]=params.position[3]+21.1 end
					if i==1 and positionOrder[a]<=4 and gStates.positionMageKnight[positionOrder[a]]~="nobody" then local obj=CommonBag.takeObject() obj.destruct() skip=1 end--destroy the Dummy Board if this is a player
					if i==1 and positionOrder[a]<=4 and gStates.positionMageKnight[positionOrder[a]]=="nobody" then
						getObjectFromGUID(colorBand[positionOrder[a]]).setScale({7.48, 0.01, 2.5})
						getObjectFromGUID(colorBand[positionOrder[a]]).setColorTint("Black")
						getObjectFromGUID(colorBand[positionOrder[a]]).setPosition({getObjectFromGUID(colorBand[positionOrder[a]]).getPosition()[1]-12.5, 0.98, -30.0})
						if getObjectFromGUID(playAreaGuideText[positionOrder[a]])~=nil then getObjectFromGUID(playAreaGuideText[positionOrder[a]]).destruct() end
						if getObjectFromGUID(playAreaGuideBackground[positionOrder[a]])~=nil then getObjectFromGUID(playAreaGuideBackground[positionOrder[a]]).destruct() end
					end
					if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) and ((i>=2 and gStates.positionMageKnight[5]=="Volkare") or (i>=8 and gStates.positionMageKnight[5]~="nobody")) then DummyPlayed=1 break end--just dummy board for Volkare
					params.callback_function=function(obj) Wait.frames(function() obj.lock() end, 2) end
					if skip==0 then local obj=CommonBag.takeObject(params) end
				end
				CommonBag.destruct()

				--Figure out which Mage Knight is assigned to a position
				local PlayerBag={}
				for i=1, #mageKnights, 1 do
					if gStates.positionMageKnight[positionOrder[a]]==mageKnights[i].mage or (gStates.positionMageKnight[positionOrder[a]]=="nobody" and gStates.positionMageKnight[5]==mageKnights[i].mage) then
						PlayerBag=getObjectFromGUID(mageKnights[i].bag).clone()
						PlayerBag.setPosition({-60.0+offsetPosition, 1.5, -38.0})
						break
					end
				end

				--Layout everything from the mage bag assigned to the position
				local UniqueParts={	{  0.40, 1.55, -19.17}, {-73.90, 1.50, -43.16}, {-72.89, 1.20, -35.13}, {-67.33, 1.60, -36.88}, {-77.30, 1.05, -49.00}, {-73.90, 1.05, -49.00}, --{-67.33, 1.99, -36.88}, {-67.33, 1.99, -36.88},
									{-18.00, 1.25, -27.50}, {-60.00, 1.00, -38.00}, { 12.10, 1.25,  24.70}, { 40.15, 1.25,  18.80}, {-66.20, 1.16, -33.82}, {-41.76, 1.16, -32.78},
									{-63.49, 1.50, -31.19},	{-68.04, 1.10, -34.03}}
									--Turn Order, Unique Cards, Dummy Inventory, Skills, Skill Reference Card 1, Skill Reference Card 2,
									--Avatar, Player Board, Shield Fame, Shield Rep, Shield Control, Quest Marker,
									--Comand token Blank, 5 Command Tokens
				local turnRef=1
				for i=1, #UniqueParts, 1 do
					local skip=0
					local params={position=UniqueParts[i], smooth=false, setColorTint=""}
					params.position[1]=params.position[1]+offsetPosition
					--turn markers all go in Shuffled Order
					if i==1 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Dummy and Volkare
							local dummyStats={seatPos=positionOrder[a], mage=gStates.positionMageKnight[5], fame=0, fameGain=0, reputation=0, repGain=0, scoreLoop=0, hand=5, baseHand=5, handBonus=0, tactic=1, keepsBeat=0, deedCount=11, discardCount=0, defeatedCities={}, deadDeckInventory={}, dummyCrystals={Red=0,Blue=0,Green=0,White=0}, score={Glade=0, GraveYard=0}}
							if scenarioList[gStates.scenarioRef][gStates.playersRef].dummyTacticSelection=="F" then
								params.position={-1.9, 0.96, -19.4}--if dummy draws first
								startPos[1]=1
								turnOrder[1]=dummyStats
							else
								params.position={-1.9, 0.96, -19.4-(gStates.playerCount*1.4)}--if dummy draw last
								startPos[gStates.playerCount+1]=1
								turnOrder[gStates.playerCount+1]=dummyStats
								turnOrder[gStates.playerCount+1].tactic=gStates.playerCount+1
								turnRef=gStates.playerCount+1
							end
						else--Mage Knights
							local duplicate=true
							math.randomseed(os.time())
							while duplicate==true do
								duplicate=false
								turnRef=math.random(1,gStates.playerCount)
								if scenarioList[gStates.scenarioRef][gStates.playersRef].dummyTacticSelection=="F" then turnRef=turnRef+1 end
								if startPos[turnRef]==1 then duplicate=true else startPos[turnRef]=1 end
							end
							params.position={-1.9, 0.96, -19.4-((turnRef-1)*1.4)}
							turnOrder[turnRef]={seatPos=positionOrder[a],mage=gStates.positionMageKnight[positionOrder[a]], fame=0, fameGain=0, reputation=0, repGain=0, scoreLoop=0, level=1, levelUp=0, influence=6, hand=5, baseHand=5, handBonus=0, tactic=turnRef, keepsBeat=0, deedCount=11, discardCount=0, combatIconHide="None", defeatedCities={}, levelUpComplete=false, avatarLocation="", deadDeckInventory={}, levelingStats={}, score={Glade=0, GraveYard=0}}
						end
					end

					--Player Deed Deck
					if i==2 then
						params.rotation={180, 0, 0}--Orient cards face down
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Dummy and Volkare deck go in different spot
							params.position={-67.96+offsetPosition, 1.17, -43.17}
						end
						params.callback_function=function(obj) obj.shuffle() end
					end

					--Dummy Invetory Card
					if i==3 and (gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<5) then local destr=PlayerBag.takeObject(params) destr.destruct() skip=1 end--Delete Dummy Inventory when this is a player

					--Skills Container or Volkare's Level Chart
					if i==4 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Checks if this position is a dummy
							if gStates.positionMageKnight[5]=="Volkare" then
								params.position={-57.55+offsetPosition, 1.00, -38.00}--Volkare Level chart
							else
								if gStates.playerCount==1 and gStates.dummyAllSkills==false then
									params.position={-78.12+offsetPosition, 1.15, -31.03}--Skills container Position
								else
									local destr=PlayerBag.takeObject(params) destr.destruct() skip=1
								end
							end
						end
					end

					--Skill Refernce Card 1
					if i==5 and (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) and ((gStates.positionMageKnight[5]=="Volkare" or gStates.playerCount~=1) or gStates.dummyAllSkills==true) then
						local destr=PlayerBag.takeObject(params) destr.destruct() skip=1
					end

					--Skill Refernce Card 2
					if i==6 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) and ((gStates.positionMageKnight[5]=="Volkare" or gStates.playerCount~=1) or gStates.dummyAllSkills==true) then
							local destr=PlayerBag.takeObject(params) destr.destruct() skip=1
						else
							params.callback_function=function(obj) obj.lock() end
							if gStates.coop==0 and gStates.positionMageKnight[positionOrder[a]]~="Ymirgh" then
								params.callback_function=function(ob) obj=ob.setState(1) obj.lock() end
							end
						end
					end

					--Player Avater or Volkare's Wound Card
					if i==7 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Checks if this position is a dummy
							if gStates.positionMageKnight[5]=="Volkare" then
								params.rotation={180, 0, 0}
								params.position={-67.96+offsetPosition, 1.17, -50.17}--Flip wound card over if Volkare
								params.callback_function=volkareSetup
							else
								local destr=PlayerBag.takeObject(params) destr.destruct() skip=1
							end
						else
							params.position[1]=params.position[1]-(offsetPosition/1.07)--Avatar
						end
					end

					--Player Board, Volkare's Terrain Tile or Dummy's Crystals. Dummy is Setup
					if i==8 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Checks if this position is a dummy
							if positionOrder[a]<5 then
								getObjectFromGUID(deedDeckZones[positionOrder[a]]).setPosition({offsetPosition-68, 1.2, -43.20})
								getObjectFromGUID(deedDeckDiscardZones[positionOrder[a]]).setPosition({offsetPosition-77.21, 1.2, -43.20})
						 	end
							if gStates.positionMageKnight[5]=="Volkare" then
								if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then
									params.position={-37.23, 2.0, -5.69}--Volkare's Return camp tile position
								else
									params.position={-12.03, 2.0,  8.86}--Volkare's Quest camp tile position
								end
								if gStates.randomTileOrientation==false then params.rotation={0, 180, 180} else params.rotation={0, math.random(1, 6)*60, 180} end
								local obj=PlayerBag.takeObject(params)
								skip=1
							else
								local params={position={-69.4, 1.65, -36.5}, rotation={0, 30, 0}, smooth=false, index=0}
								if positionOrder[a]==5 then params.position[1]=params.position[1]-25.2 params.position[3]=params.position[3]+21.1 end
								params.position[1]=params.position[1]+offsetPosition
								for a=1, 3, 1 do
									params.position[1]=params.position[1]-(1.7)
									local obj=PlayerBag.takeObject(params)
								 	obj.lock()
									local b=obj.getDescription()
									if scenarioList[gStates.scenarioRef][gStates.playersRef].dummyTacticSelection=="F" then
										turnOrder[1].dummyCrystals[b]=turnOrder[1].dummyCrystals[b]+1
									else
										turnOrder[gStates.playerCount+1].dummyCrystals[b]=turnOrder[gStates.playerCount+1].dummyCrystals[b]+1
									end
								end
								break
							end
						end
					end

					--Fame Marker or Volkare's Avatar
					if i==9 then
						if (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then--Checks if this position is a dummy
							if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then
								params.position={-37.23, 3.0, -5.69}--Volkare's Return Avatar position
								--params.rotation={0.0, 60.0, 0.0}
							else
								params.position={-12.03, 3.0, 8.86}--Volkare's Quest Avatar position
							end
							local obj=PlayerBag.takeObject(params)
							skip=1
						else
							params.position[1]=(params.position[1]-(offsetPosition/1.032))+(5.3*gStates.blitz)--Fame Marker
						end
					end

					--Reputation Marker or Volkare's Arrow Guide or Volkares Dice
					local colorReputation={	{{34.02, 1.14, 21.26}, {34.50, 1.14, 22.57}, {34.99, 1.14, 23.91}, {33.53, 1.21, 19.98}},--(-2)
											{{36.70, 1.20, 20.25}, {37.33, 1.14, 21.45}, {38.02, 1.14, 22.63}, {36.11, 1.14, 19.04}},--(-1)
											{{39.87, 1.13, 19.41}, {38.79, 1.13, 18.75}, {41.16, 1.13, 19.20}, {40.33, 1.13, 20.87}},--(0)
											{{39.03, 1.13, 16.00}, {40.18, 1.13, 16.30}, {41.37, 1.13, 16.56}, {37.87, 1.13, 15.74}}}--(+1)
					if i==10 then
						if ((positionOrder[a]<5 and gStates.positionMageKnight[positionOrder[a]]=="nobody" and gStates.positionMageKnight[5]=="Volkare") or gStates.positionMageKnight[positionOrder[a]]=="Volkare") then
							params.position={-72.89+offsetPosition,1.5,-33.0}--Volkare Dice
						else
							local blitzSub=0
							if gStates.gameScenario~="The Lost Relic Blitz" then blitzSub=gStates.blitz end
							params.position=colorReputation[0+blitzSub-gStates.rampage+3][positionOrder[a]]--Reputation Marker
							turnOrder[turnRef].reputation=(0+blitzSub-gStates.rampage)*2
						end
					end

					--or Volkares Scenario Reference Card
					if i==11 then
						if (positionOrder[a]<5 and gStates.positionMageKnight[positionOrder[a]]=="nobody" and gStates.positionMageKnight[5]=="Volkare") or gStates.positionMageKnight[positionOrder[a]]=="Volkare" then
							params.position={-72.5+offsetPosition, 1.06, -48.23}
							params.callback_function=function(obj) obj.lock() end
							if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then
								params.callback_function=function(ob) obj=ob.setState(2) obj.lock() end
							end
						end
					end

					--Volkare's Arrows
					if i==12 then
						if (positionOrder[a]<5 and gStates.positionMageKnight[positionOrder[a]]=="nobody" and gStates.positionMageKnight[5]=="Volkare") or gStates.positionMageKnight[positionOrder[a]]=="Volkare" then
							if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then
								params.position={-37.23, 2.5, -5.69}
								params.rotation={0.0, 210.0, 0.0}--Volkare's Return Guide position
								params.callback_function=function() Wait.frames(function() getObjectFromGUID("bc4dcc").jointTo(getObjectFromGUID(volkare.model), {["type"]="Fixed"}) end, 20) end
							else
								params.position={-12.03, 2.5, 8.86}--Volkare's Quest Guide position
								params.rotation={0.0, 210.0, 0.0}
								params.callback_function=function() Wait.frames(function() getObjectFromGUID("bc4dcc").setState(2) Wait.frames(function() getObjectFromGUID("be2dc2").jointTo(getObjectFromGUID(volkare.model), {["type"]="Fixed"}) end, 20) end, 20) end
							end
							--local obj=PlayerBag.takeObject(params)
							skip=1
						end
					end

					--Volkare is Setup
					if i==13 and (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then break end

					if positionOrder[a]==5 and i~=1 then params.position[1]=params.position[1]-25.2 params.position[3]=params.position[3]+21.1 end
					if skip==0 then
						local obj=PlayerBag.takeObject(params)
						if (i==4 or i==5 or i==8 or i==11 or i==12) and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<5 then obj.lock() end--lock player board components
						if (i==1 or i==3 or i==4 or i==5 or i==12) and (gStates.positionMageKnight[positionOrder[a]]=="nobody" or positionOrder[a]==5) then obj.lock() end--lock dummy board components
						if i==1 then turnOrder[turnRef].turnOrderTokenGUID=obj.guid end
						if (i==4 and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4) or (i==4 and gStates.playerCount==1) then turnOrder[turnRef].skillGUID=obj.guid obj.shuffle() end
						if i==8 and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4 then turnOrder[turnRef].playerBoardGUID=obj.guid end
						if i==9 and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4 then turnOrder[turnRef].fameGUID=obj.guid end
						if i==10 and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4 then turnOrder[turnRef].reputationGUID=obj.guid end
						if i==14 and gStates.positionMageKnight[positionOrder[a]]~="nobody" and positionOrder[a]<=4 then turnOrder[turnRef].commandGUID=obj.guid end
					end
				end
				PlayerBag.destruct()
			else
				--clean up that positions area
				getObjectFromGUID(deedDeckZones[positionOrder[a]]).destruct()
				getObjectFromGUID(deedDeckDiscardZones[positionOrder[a]]).destruct()
				getObjectFromGUID(colorBand[positionOrder[a]]).destruct()
				if getObjectFromGUID(playAreaGuideText[positionOrder[a]])~=nil then getObjectFromGUID(playAreaGuideText[positionOrder[a]]).destruct() end
				if getObjectFromGUID(playAreaGuideBackground[positionOrder[a]])~=nil then getObjectFromGUID(playAreaGuideBackground[positionOrder[a]]).destruct() end
			end
		end, time)
		if a<5 then
			if (gStates.positionMageKnight[positionOrder[a+1]]~="nobody" and positionOrder[a+1]<=4) or (gStates.positionMageKnight[5]~="nobody" and DummyPlayedTiming==0) then
				time=time+delay
			end
			if (gStates.positionMageKnight[positionOrder[a+1]]=="nobody" or positionOrder[a+1]==5) and gStates.positionMageKnight[5]~="nobody" then DummyPlayedTiming=1 end
		end
	end
end

--Setup additional volkare components (Skill for Solo, Unit Crytals, And Monster Pugs)
function volkareSetup()
	--Add wounds to Volkare's Deck
	Wait.frames(function()
		local VolkareWounds=20
		local PlayerBag={}
		if gStates.gameScenario=="Volkare's Quest" then VolkareWounds=24-(4*gStates.volkareRaceLevel) else VolkareWounds=21-(3*gStates.volkareRaceLevel)-(2*gStates.blitz) end
		if gStates.gameScenario=="Custom" then VolkareWounds=0 end
		for i=1, VolkareWounds, 1 do
			getObjectFromGUID("95765b").putObject(getObjectFromGUID("a8e73d").clone())--The wound card to Volkare's Deck
		end
		getObjectFromGUID("95765b").shuffle()
		if gStates.gameScenario~="Custom" then getObjectFromGUID("a8e73d").destruct() end--The wound card

		--Add a random skill set if solo playing
		if gStates.playerCount==1 then
			local Duplicate=true
			local r=1
			math.randomseed(os.time())
			while Duplicate==true do
				Duplicate=false
				r=math.random(1,8)
				local MageKnight=mageKnights[r].mage
				for i=1, 4, 1 do
					if MageKnight==gStates.positionMageKnight[i] then Duplicate=true end
				end
				if gStates.includeYmirgh==false and MageKnight=="Ymirgh" then duplicate=true end
			end
			local PlayerBag=getObjectFromGUID(mageKnights[r].bag).clone({position={getObjectFromGUID(dummyBoard).getPosition()[1]-10.16, 5.15, getObjectFromGUID(dummyBoard).getPosition()[3]+12.14}})
			local skillBag=PlayerBag.takeObject({index=13})--Skill Container
			skillBag.lock()
			turnOrder[2].skillGUID=skillBag.guid--he doesn't get skills in more than solo
			skillBag.setPosition({getObjectFromGUID(dummyBoard).getPosition()[1]-5.62, 1.15, getObjectFromGUID(dummyBoard).getPosition()[3]+6.97})
			--coopSkill=PlayerBag.takeObject({index=12, callback_function=function() skillBag.putObject(coopSkill)
			skillBag.shuffle()
			local skillRef=PlayerBag.takeObject({index=11})
			skillRef.lock()
			skillRef.setPosition({getObjectFromGUID(dummyBoard).getPosition()[1]-4.4, 1.05, -49})
			local skillRef=PlayerBag.takeObject({index=11})
			skillRef.lock()
			skillRef.setPosition({getObjectFromGUID(dummyBoard).getPosition()[1]-7.8, 1.05, -49})
			PlayerBag.destruct()
		end

		--Add Volkare unit crystals based on Player count and Race Level
		local VolkareUnits=gStates.playerCount+(gStates.volkareRaceLevel-1)
		local PlayerBag=getObjectFromGUID("63f203").clone()
		local obj=PlayerBag.takeObject({position={37, 1.29, -1.14}, index=1})--Crystal Container
		local unitZone={"c75fb0", "f25213", "e393d7", "1821db", "5c85c9", "ff65ef"}
		obj.shuffle()
		for i=1, VolkareUnits, 1 do
			local obj2=obj.takeObject()
			obj2.lock()
			obj2.setPosition({36.0-(4.8*(i-1)), 1.29, -1.15})
			obj2.setRotation({0, 30, 0})
			gStates.volkareUnitCrystals[obj2.getName()]=unitZone[i]
		end
		PlayerBag.destruct()
		obj.destruct()

		--add unit tokens based on Volkare's Level
		gStates.cityMonsterQty[volkare.model]={}
		if gStates.gameScenario~="Custom" then
			local VolkareLevelMatrix=  {{{5, 10, 15, 20}, { 8, 16, 24, 32}, {12, 24, 36, 48}},
										{{4,  8, 12, 16}, { 6, 12, 18, 26}, { 8, 16, 24, 32}},
										{{8, 14, 20, 26}, {10, 18, 26, 34}, {14, 26, 38, 50}}}
			local VolkareArmy={{},{},{},{0,1,1,2},{1,0,1,2},{1,0,1,3},{1,0,2,2},{1,1,2,2},{1,1,2,3},{1,1,2,5},{2,0,2,5},{2,0,2,6},{2,0,2,7},{2,0,3,6},{2,1,3,6}}
			--{no. White Units, No. Gray Units, No. Red Units, No. Green Units}(Level 4 to 15 shown, other levels made by adding levels togeather)
			local PugDraw={monsterPiles.white,monsterPiles.gray,monsterPiles.red,monsterPiles.green}
			--{White Unit Bag, Gray Unit Bag, Red Unit Bag, Green Unit Bag}
			local VolkareLevel=VolkareLevelMatrix[gStates.scenarioRef-9][gStates.volkareCombatLevel][gStates.playerCount]
			if (VolkareLevel<=20 and gStates.shadesOfTezlaPugs==false and gStates.removeLostLegionExpansion==true) or (VolkareLevel<=30 and (gStates.shadesOfTezlaPugs==true or gStates.removeLostLegionExpansion==false)) or (gStates.shadesOfTezlaPugs==true and gStates.removeLostLegionExpansion==false) then
				for i=1, 4, 1 do
					local LoopsNeeded=math.ceil(VolkareLevel/15)
					local levelConverted=math.floor(VolkareLevel/LoopsNeeded)
					local leftover=VolkareLevel-(LoopsNeeded*levelConverted)+levelConverted
					getObjectFromGUID(PugDraw[i]).shuffle()
					for x=1, LoopsNeeded, 1 do
						if x==LoopsNeeded then levelConverted=leftover end
						for a=1, VolkareArmy[levelConverted][i], 1 do
							local params={position={0, 0, 0}, rotation={0, 180, 180}}
							params.position[1]=getObjectFromGUID(dummyBoard).getPosition()[1]+(0.2*a)+(2.2*x)+2.5
							params.position[2]=getObjectFromGUID(dummyBoard).getPosition()[2]+(0.2*a)+1
							params.position[3]=getObjectFromGUID(dummyBoard).getPosition()[3]+(0.2*a)+(2.2*i)-2.9
							local obj2=getObjectFromGUID(PugDraw[i]).takeObject(params)
							gStates.cityMonsterQty[volkare.model][obj2.guid]="alive"
							gStates.monsterPlayLocation[obj2.guid]={params.position[1], params.position[2], params.position[3]}
						end
					end
				end
			else
				broadcastToAll("Volkare's army is too large with your setup. You will need to create it when you fight him for the first time", {1, 0, 0})
			end
		end

		--Move reminder Tokens
		getObjectFromGUID("758fb3").setPosition({getObjectFromGUID(cityScriptZones[volkare.discZone].cityCard).getPosition()[1]+2.2, 1.5, getObjectFromGUID(cityScriptZones[volkare.discZone].cityCard).getPosition()[3]+2.2})
	end, 10)
end

----------------
-- Delayed Setup
----------------
--Layout starting map tiles
function mapSetup()
	local TileShuffler=		getObjectFromGUID("089e71")
	local CityTileStack=	getObjectFromGUID("a0ba93")
	local CoreTileStack=	getObjectFromGUID("c87444")
	local CountryTileStack=	getObjectFromGUID("37d9b4")
	CityTileStack.shuffle()
	CoreTileStack.shuffle()
	CountryTileStack.shuffle()
	local pos=getObjectFromGUID("966e0e").getPosition()--tile stack location
	local tUp=2--Starts building the final tile stack from this high
	--Layout Starting map tile
	local a=scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape:sub(1,1)
	if a=="O" or a=="F" or (a=="P" and gStates.gameScenario~="Ladyhawke") then
		getObjectFromGUID("722590").unlock()
		getObjectFromGUID("722590").setPosition({-36.03, 0.98, -11.93})--start terrain tile gets moved and state changed
		getObjectFromGUID("722590").setState(2)
		Wait.frames(function() getObjectFromGUID("5d0bac").lock() end, 10)
	end
	if gStates.gameScenario=="Ladyhawke" then getObjectFromGUID("722590").destruct() end

	--shuffle the order of data in a table
	function listShuffle(array)
		--Remove lost legion GUIDs
		if gStates.removeLostLegionExpansion==true then
			local tempArray={}
			local lostLegionTiles={"29a93c", "7ce33f", "0bf020", "de7fad", "cff250"}
			for a=1, #array, 1 do
				local found=false
				for b=1, #lostLegionTiles, 1 do
					if array[a]==lostLegionTiles[b] then found=true end
				end
				if found==false then tempArray[#tempArray+1]=array[a] end
			end
			array=tempArray
		end
		--shuffle the list
		math.randomseed(os.time())
		local tReturn={}
		for a=#array, 1, -1 do
			local b=math.random(a)
			array[a], array[b]=array[b], array[a]
			table.insert(tReturn, array[a])
		end
		return tReturn
	end

	--Pull City Tiles
	for i=1, gStates.cityTiles, 1 do
		local noShuffle=0
		local params={rotation={0, 180, 180}, smooth=false}
		if (gStates.gameScenario=="Mines Liberation" and i==1) or (gStates.gameScenario=="Life and Death" and i==1) then params.guid="53d847" end--Use Red City
		if (gStates.gameScenario=="Dungeon Lords" and i==1) or (gStates.gameScenario=="The Realm of the Dead Blitz" and i==1) then params.guid="63f201" end--Use Blue City
		if (gStates.gameScenario=="Conquer and Hold" and i==1) or (gStates.gameScenario=="The Hidden Valley Blitz" and i==1) then params.guid="a3ce11" end--Use White City
		if (gStates.gameScenario=="Druid Nights" and i==1) or (gStates.gameScenario=="The Realm of the Dead Blitz" and i==2) or (gStates.gameScenario=="Life and Death" and i==2) or (gStates.gameScenario=="The Hidden Valley Blitz" and i==2) then params.guid="314081" end--Use Green City
		if (gStates.gameScenario=="Volkare's Return" and i==1) or gStates.gameScenario=="Volkare's Return Blitz" then params.position={pos.x, pos.y+tUp, pos.z} tUp=tUp+0.5 noShuffle=1 end
		if gStates.gameScenario=="The Gauntlet" and i==1 then params.guid="53d847" params.position={4.77, 0.96, 8.86} noShuffle=1 end
		if gStates.gameScenario=="Ladyhawke" and i==1 then
			params.rotation={0, 180, 180}
			params.position={-20.43, 0.96, -5.69}
			params.callback_function=function(obj)
				tile1=obj
				Wait.time(function()
					tile1.flip()
					if tile1.guid=="63f201" then
						gStates.monasteryCount=-1
						getObjectFromGUID("a72f18").setPosition({-19.24, 1.14, -3.65})
						getObjectFromGUID("a72f18").lock()
					end
				end, 4)
		 	end
			noShuffle=1
		end
		local obj=CityTileStack.takeObject(params)--take from the City Tile Bag
		if noShuffle==0 then TileShuffler.putObject(obj) end--Plaace in the Core Tile Shuffler if it is shuffled
	end

	--Pull Core Tiles
	local CoreKeepMageTiles={"155a31","be86ec","264fa0","cff250","de7fad"} CoreKeepMageTiles=listShuffle(CoreKeepMageTiles)
	local CoreGauntletTiles={"155a31","264fa0","cff250","de7fad"} CoreGauntletTiles=listShuffle(CoreGauntletTiles)
	local CoreMineTiles=	{"155a31","264fa0","be86ec"} CoreMineTiles=listShuffle(CoreMineTiles)
	for i=1, scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles, 1 do
		local params={rotation={0, 180, 180}, smooth=false}
		if gStates.gameScenario=="Mines Liberation" then params.guid=CoreMineTiles[i] end
		if gStates.gameScenario=="Conquer and Hold" then params.guid=CoreKeepMageTiles[i] end
		if gStates.gameScenario=="Dungeon Lords" and i==1 then params.guid="584237" end
		if gStates.gameScenario=="The Gauntlet" and i<=4 then params.guid=CoreGauntletTiles[i] end
		local obj=CoreTileStack.takeObject(params)--Core Tile Bag
		TileShuffler.putObject(obj)--Core Tile Shuffler
	end
	--Mega Conquest Country mix
	if gStates.gameScenario=="Mega Conquest" then
		local megaCountry=14-scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles
		if gStates.removeLostLegionExpansion==true then megaCountry=megaCountry-3 end
		for i=1, megaCountry, 1 do
			local params={rotation={0, 180, 180}, smooth=false}
			local obj=CountryTileStack.takeObject(params)--Country Tile Bag
			TileShuffler.putObject(obj)
		end
	end

	--place core and city tiles on stack shuffled
	TileShuffler.shuffle()
	local VolQuestTilePos=		{{-18.03, 1.07, 10.94}, {-16.84, 1.07,  4.66}, {-22.82, 1.07,  6.78}, {-10.83, 1.07,  2.62}, {-15.62, 1.14, -1.54}, {-9.63, 1.07, -3.61}, {-14.43, 1.07, -7.77}, {-21.63, 1.07, 0.54}}
	local ConquerAndHoldTilePos={{-27.63, 1.07,  2.62}, {-21.63, 1.07,  0.54}, {-26.43, 1.07, -3.61}, {-20.43, 1.07, -5.69}}
	local GauntletTilePos=		{{ -0.05, 0.96,  4.71}, { -4.83, 0.96,  0.54}, { -9.63, 0.96, -3.61}}
	local LadyhawkeTilePos=		{{-26.43, 1.07, -3.61}, {-14.43, 1.07, -7.77}}
	for i=1, TileShuffler.getQuantity(), 1 do
		local params={smooth=false}
		if gStates.randomTileOrientation==false then params.rotation={0, 180, 180} else params.rotation={0, math.random(1,6)*60, 180} end
		if gStates.gameScenario=="Volkare's Quest" then
			if i==6 and gStates.playersRef==5 then
				params.position=VolQuestTilePos[8]
			else
				params.position=VolQuestTilePos[i]
			end
		end
		if gStates.gameScenario=="Conquer and Hold" then params.position=ConquerAndHoldTilePos[i] end
		if gStates.gameScenario=="Ladyhawke" then params.position=LadyhawkeTilePos[i] end
		if gStates.gameScenario=="The Gauntlet" then params.position=GauntletTilePos[i] end
		if params.position==nil then params.position={pos.x, pos.y+tUp, pos.z} tUp=tUp+0.5 end
		TileShuffler.takeObject(params)
	end

	--Pull Country Tiles
	local CountryGauntletTiles=			{"7ce33f", "0bf020", "29a93c", "6510ac", "05b612", "78fc79", "20607e", "208d84", "184fb7", "a26c4f", "a501d6", "ca8ad3", "e2ecf8"} CountryGauntletTiles=listShuffle(CountryGauntletTiles)
	local CountryTileOrder=				{"a501d6", "a26c4f", "184fb7", "208d84", "20607e", "78fc79", "05b612", "6510ac", "d21095", "ca8ad3", "e2ecf8"}--3,4,5,6,7,8,9,10,11,2,1
	local CountryNonMonasteryTiles=		{"7ce33f", "0bf020", "d21095", "6510ac", "78fc79", "20607e", "208d84", "a26c4f", "a501d6", "ca8ad3", "e2ecf8"} CountryNonMonasteryTiles=listShuffle(CountryNonMonasteryTiles)
	local CountryNonMineTiles=			{"20607e", "e2ecf8", "6510ac", "05b612", "78fc79", "d21095", "a26c4f", "29a93c"} CountryNonMineTiles=listShuffle(CountryNonMineTiles)
	local CountryNotGladeTiles=			{"a501d6", "a26c4f", "208d84", "05b612", "6510ac", "d21095", "29a93c", "7ce33f"} CountryNotGladeTiles=listShuffle(CountryNotGladeTiles)
	local CountryMonasteryMageTiles=	{"a26c4f", "184fb7", "20607e", "05b612", "d21095", "29a93c", "0bf020"} CountryMonasteryMageTiles=listShuffle(CountryMonasteryMageTiles)
	local CountryNotMonasteryMageTiles=	{"e2ecf8", "ca8ad3", "a501d6", "208d84", "78fc79", "6510ac", "7ce33f"} CountryNotMonasteryMageTiles=listShuffle(CountryNotMonasteryMageTiles)
	local CountryKeepMageTiles=			{"a501d6", "a26c4f", "05b612", "6510ac", "d21095", "0bf020", "7ce33f"} CountryKeepMageTiles=listShuffle(CountryKeepMageTiles)
	local CountryGladeTiles=			{"e2ecf8", "ca8ad3", "20607e", "78fc79", "0bf020", "184fb7"} CountryGladeTiles=listShuffle(CountryGladeTiles)
	local CountryMineTiles=				{"a501d6", "ca8ad3", "208d84", "184fb7"}
	local CountryMonasteryTiles=		{"184fb7", "05b612", "29a93c"} CountryMonasteryTiles=listShuffle(CountryMonasteryTiles)
	local CountryDungeonTiles=			{"05b612", "20607e"}
	local count=0
	for i=1, scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles, 1 do
		local params={rotation={0, 180, 180}, smooth=false}
		if gStates.gameScenario=="First Reconnaissance" and i<=scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles-2 then params.guid=CountryTileOrder[i] end
		if gStates.gameScenario=="First Reconnaissance" and i>=scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles-1 then params.guid=CountryTileOrder[i+(11-scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles)] end
		if gStates.gameScenario=="Mines Liberation" and i<=4 then params.guid=CountryMineTiles[i] end
		if gStates.gameScenario=="Mines Liberation" and i>=5 then params.guid=CountryNonMineTiles[i-4] end
		if gStates.gameScenario=="Conquer and Hold" then params.guid=CountryKeepMageTiles[i] end
		if gStates.gameScenario=="The Gauntlet" then params.guid=CountryGauntletTiles[i] end
		if gStates.gameScenario=="Druid Nights" and i<=5 then params.guid=CountryGladeTiles[i] end
		if gStates.gameScenario=="Druid Nights" and i>5 then params.guid=CountryNotGladeTiles[i-5] end
		if gStates.gameScenario=="Dungeon Lords" and i<=2 then params.guid=CountryDungeonTiles[i] end
		if gStates.gameScenario=="Quest for the Golden Grail" and i<=4 then params.guid=CountryMonasteryMageTiles[i] end
		if gStates.gameScenario=="Quest for the Golden Grail" and i>=5 then params.guid=CountryNotMonasteryMageTiles[i-4] end
		if gStates.gameScenario=="Ladyhawke" and i<=2 then params.guid=CountryMonasteryTiles[i] end
		if gStates.gameScenario=="Ladyhawke" and i>=3 then params.guid=CountryNonMonasteryTiles[i-2] end
		if gStates.gameScenario=="Life and Death" and ((i<=gStates.playerCount+1 and gStates.playerCount>=2) or (i<=gStates.playerCount+2 and gStates.playerCount==1)) then params.guid=CountryGladeTiles[i] count=count+1 end
		if gStates.gameScenario=="Life and Death" and ((i>=gStates.playerCount+2 and gStates.playerCount>=2) or (i>=gStates.playerCount+3 and gStates.playerCount==1)) then params.guid=CountryNotGladeTiles[i-count] end
		if gStates.gameScenario=="The Realm of the Dead Blitz" and ((i<=gStates.playerCount+1 and gStates.coop==1) or (i<=gStates.playerCount and gStates.coop==0)) then params.guid=CountryGladeTiles[i] count=count+1 end
		if gStates.gameScenario=="The Realm of the Dead Blitz" and ((i>=gStates.playerCount+2 and gStates.coop==1) or (i>=gStates.playerCount+1 and gStates.coop==0)) then params.guid=CountryNotGladeTiles[i-count] end
		local obj=CountryTileStack.takeObject(params)--Country Tile Bag
		TileShuffler.putObject(obj)
	end

	--place Country tiles on stack shuffled
	if gStates.gameScenario~="First Reconnaissance" then TileShuffler.shuffle() end
	local rot={}
	if gStates.gameScenario~="Ladyhawke" then
		if scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape:sub(1,1)=="W" then
			if gStates.randomTileOrientation==false then rot={0, 180, 180} else rot={0, math.random(1,6)*60, 180} end
			TileShuffler.takeObject({position={-25.23, 1.07, -9.85}, rotation=rot, smooth=false, callback_function=function(obj) tile1=obj Wait.time(function() tile1.flip() end, 1) end})
			if gStates.randomTileOrientation==false then rot={0, 180, 180} else rot={0, math.random(1,6)*60, 180} end
			TileShuffler.takeObject({position={-19.23, 1.07, -11.93}, rotation=rot, smooth=false, callback_function=function(obj) tile2=obj Wait.time(function() tile2.flip() end, 2) end})
		else
			if gStates.randomTileOrientation==false then rot={0, 180, 180} else rot={0, math.random(1,6)*60, 180} end
			if gStates.gameScenario~="The Gauntlet" and gStates.gameScenario~="Volkare's Return" and gStates.gameScenario~="Volkare's Return Blitz" then TileShuffler.takeObject({position={-37.23, 1.07, -5.69}, rotation=rot, smooth=false, callback_function=function(obj) tile1=obj Wait.time(function() tile1.flip() end, 1) end}) end
			if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then Wait.time(function() getObjectFromGUID("835c91").flip() end, 1) end
			if gStates.randomTileOrientation==false then rot={0, 180, 180} else rot={0, math.random(1,6)*60, 180} end
			TileShuffler.takeObject({position={-31.23, 1.07, -7.77}, rotation=rot, smooth=false, callback_function=function(obj) tile2=obj Wait.time(function() tile2.flip() end, 2) end})
			if gStates.randomTileOrientation==false then rot={0, 180, 180} else rot={0, math.random(1,6)*60, 180} end
			if gStates.gameScenario~="The Gauntlet" then TileShuffler.takeObject({position={-30.03, 1.07, -14.01}, rotation=rot, smooth=false, callback_function=function(obj) tile3=obj Wait.time(function() tile3.flip() end, 3) end}) end
			if gStates.gameScenario=="Volkare's Quest" then Wait.time(function() getObjectFromGUID("835c91").flip() end, 4) end
		end
	end
	local VolQuestTilePos=		{{-32.43, 1.07, -1.53}, {-27.63, 1.07,   2.62}, {-26.43, 1.07, -3.61}, {-25.23, 1.07, -9.85}, {-20.43, 1.07,  -5.69}, {-21.63, 1.07,   0.54}, {-24.03, 1.07, -16.08}, {-19.23, 1.07, -11.93}, {-14.43, 0.96, -7.77}}
	local LadyhawkeTilePos=		{{-16.83, 1.07,  4.70}, {-21.63, 1.07,   0.54}, {-15.63, 1.07, -1.54}, {-25.23, 1.07, -9.85}, {-19.23, 1.07, -11.93}, {-24.03, 0.96, -16.08}}
	local GauntletTilePos=		{{-14.43, 0.96, -7.77}, {-19.23, 0.96, -11.93}, {-12.03, 0.96,  8.86}, {-16.83, 0.96,  4.70}, {-21.63, 0.96,   0.54}, {-26.43, 0.96,  -3.61}}
	local ConquerAndHoldTilePos={{-32.43, 1.07, -1.53}, {-25.23, 1.07,  -9.85}}
	for i=1, TileShuffler.getQuantity(), 1 do
		local params={smooth=false}
		if gStates.randomTileOrientation==false then params.rotation={0, 180, 180} else params.rotation={0, math.random(1,6)*60, 180} end
		if gStates.gameScenario=="Volkare's Quest" then params.position=VolQuestTilePos[i] end
		if gStates.gameScenario=="Conquer and Hold" then params.position=ConquerAndHoldTilePos[i] end
		if gStates.gameScenario=="Ladyhawke" then params.position=LadyhawkeTilePos[i] end
		if gStates.gameScenario=="The Gauntlet" then params.position=GauntletTilePos[i] end
		if params.position==nil then params.position={pos.x, pos.y+tUp, pos.z} tUp=tUp+0.5 end
		TileShuffler.takeObject(params)
	end

	if gStates.gameScenario=="Ladyhawke" then broadcastToAll("Remember to burn the Monastary if the Blue City was Picked", {1,1,0.5}) end
end

--destroy all the setup bags
function afterLoad()
	--Deploy the scenario map
	mapSetup()
	Wait.time(function()
		if gStates.startAtNight==true then gStates.dayRound=true end
		dayNight()--dayNight need to be after map setup to change the tile tint
		gStates.firstStarted=1
		gStates.turnNumber=1
		tacticToggle()
		--Delete Player Bags could this be done during setup
		local ToBeDeleted={"960fa0", "e573b9", "13d7b8", "b0d65f", "6fc671", "eefacc", "b8031f", "8f94bc", "63f203", "77b3fd", "089e71", "a0ba93"}
				--Arythea, Goldyx, Norowas, Tovak, Krang, Braevalar, Ymirgh, Wolfhawk, Common, Volkare, Tile shuffler, City Bag
		for i=1, #ToBeDeleted, 1 do
			if getObjectFromGUID(ToBeDeleted[i])~=nil then getObjectFromGUID(ToBeDeleted[i]).destruct() end
		end
		--Draw all the offers will double draw if I don't get the timing right.
		gStates.totalUnitCount=gStates.playerCount+gStates.blitz+2
		if gStates.positionMageKnight[5]=="Volkare" then gStates.totalUnitCount=gStates.totalUnitCount+1 end
		UnitOffer()
		fillSlide()
		--display the help boxes
		DisplayHelp(nil, "-1", nil)
		UI.show("AutoFlipButton")
		if gStates.gameScenario~="One to Return" then UI.show("ScoreButton") end
		DealAllHands()
		broadcastToAll("-------------------", {1,1,0.5})
		--Stop player boards and dummy board from alt zooming
		local megaFreeze=  {"fd75c3", "69fd31", "bc3d57", "0a5c86", "1ad977", "84acf0", "b91e53", "bd69e1", dummyBoard}
		for i=1, #megaFreeze, 1 do
			local obj=getObjectFromGUID(megaFreeze[i])
			if obj~=nil then obj.interactable=false end --some boards may be missing depending on their states
		end
		addAvatarButtons()
		getObjectFromGUID("e4372a").UI.setXmlTable({	{tag="Button", attributes={id="OfferUp", onClick="global/offerAdjust", height=50, width=80, position="60 190 -10", rotation="0 180 180"},
														children={	{tag="Image", attributes={id="OfferUpImage", image="Button Active Short"}},
																	{tag="Text", attributes={id="OfferUpText", fontSize="30", fontStyle="Bold", alignment="MiddleCenter", text=">"}}}},
														{tag="Button", attributes={id="OfferDown", onClick="global/offerAdjust", height=50, width=80, position="-60 190 -10", rotation="0 180 180"},
														children={	{tag="Image", attributes={id="OfferDownImage", image="Button Active Short"}},
																	{tag="Text", attributes={id="OfferDownText", fontSize="30", fontStyle="Bold", alignment="MiddleCenter", text="<"}}}}})
		--record data
		--Wait.time(function()
		loadStats(JSON.encode(GameRecord), 10, 20000, true)
		--end, 120)--two minutes? 1800=1/2 hour, 3600=1 hour
	end, 1.6)
end

--------------------------
-- Start at a Higher Level
--------------------------
local showboards={true, true, true, true, true}
--Create and Update Level Interface for Player count
function mageLevelBoard()
	if gStates.mainUIPause==true then Wait.frames(function()
		--Create an interface for all players in the game
		for a=1, #turnOrder, 1 do
			if turnOrder[a].mage~=gStates.positionMageKnight[5] then
				if turnOrder[a].seatPos>0 then
					if showboards[a]==true then
						turnOrder[a].level=2
						if gStates.gameScenario=="Fast Forwarded Conquest" then turnOrder[a].level=6 end
						if gStates.gameScenario=="The Lost Relic Blitz" then turnOrder[a].level=3 end
						UI.setAttribute("Mage"..turnOrder[a].seatPos.."levelText", "Text", "Start at Level "..turnOrder[a].level)
						UI.setAttribute("Mage"..turnOrder[a].seatPos.."influenceText", "Text", turnOrder[a].influence.." Influence Per Level")
						UI.setAttribute("Mage"..turnOrder[a].seatPos.."influenceTotalText", "Text", "Influence to Spend : "..turnOrder[a].influence*turnOrder[a].level)
						UI.setAttribute("Mage"..turnOrder[a].seatPos.."RemainingText", "Text", "Remaining : "..turnOrder[a].influence*turnOrder[a].level)
						UI.setAttribute("Mage"..turnOrder[a].seatPos.."AdvancedActionFreeText", "Text", math.floor(turnOrder[a].level/2).." Free Advanced Action(s)")
						UI.show("Mage"..turnOrder[a].seatPos.."LevelBoard")
						showboards[a]=false
						playArea=getObjectFromGUID(turnOrder[a].playerBoardGUID).getPosition()
						Player[positionToColor(a)].lookAt({position={playArea[1], playArea[2], playArea[3]+2}, pitch=60, yaw=0, distance=28})
					end

					UI.setAttribute("Mage"..turnOrder[a].seatPos.."NameText", "Text", turnOrder[a].mage)
					UI.setAttribute("Mage"..turnOrder[a].seatPos.."NamePanel", "Color", positionToColor(a))
					--Zero the stats
					local badPlay=false
					local stats={"AdvancedActions", "Spells", "SpellCrystals", "Artifacts", "RegularUnits", "RegularUnitsWorth", "Crystals"}
					--turnOrder[a].levelingStats.RegularUnitsWorth=0
					for b, c in pairs(stats) do
						turnOrder[a].levelingStats[c]=0
					end
					Wait.frames(function()
						--Count Everything in the player's play area
						local spellColors={}
						local crystalColors={}
						for b, c in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[a].seatPos]).getObjects()) do
							if c.tag=="Card" then
								if c.getName()=="Advanced Action" then turnOrder[a].levelingStats.AdvancedActions=turnOrder[a].levelingStats.AdvancedActions+1 end
								if c.getName()=="Regular Unit" then
									turnOrder[a].levelingStats.RegularUnits=turnOrder[a].levelingStats.RegularUnits+1
									if (turnOrder[a].levelingStats.RegularUnits>math.floor((turnOrder[a].level-1)/2)+1 and turnOrder[a].mage~="Norowas")
									or (turnOrder[a].levelingStats.RegularUnits>math.floor((turnOrder[a].level-1)/2)+2 and turnOrder[a].mage=="Norowas") then badPlay=true end
									turnOrder[a].levelingStats.RegularUnitsWorth=turnOrder[a].levelingStats.RegularUnitsWorth-gameCards[c.guid].influence
								end
								if c.getName()=="Spell" then
									turnOrder[a].levelingStats.Spells=turnOrder[a].levelingStats.Spells+1
									spellColors[#spellColors+1]=c.getDescription()
								end
								if c.getName()=="Artifact" then turnOrder[a].levelingStats.Artifacts=turnOrder[a].levelingStats.Artifacts+1 end
							end
							if c.tag=="Figurine" then
								if c.getVar("state")=="Starting" then
									turnOrder[a].levelingStats.SpellCrystals=turnOrder[a].levelingStats.SpellCrystals+1
									crystalColors[#crystalColors+1]=c.getDescription()
								end
							end
						end
						--Count Everything in the player's Unit area
						for b, c in pairs(getObjectFromGUID(playerUnitAreas[turnOrder[a].seatPos]).getObjects()) do
							if c.tag=="Card" then
								if c.getName()=="Regular Unit" then
									turnOrder[a].levelingStats.RegularUnits=turnOrder[a].levelingStats.RegularUnits+1
									if (turnOrder[a].levelingStats.RegularUnits>math.floor((turnOrder[a].level-1)/2)+1 and turnOrder[a].mage~="Norowas")
									or (turnOrder[a].levelingStats.RegularUnits>math.floor((turnOrder[a].level-1)/2)+2 and turnOrder[a].mage=="Norowas") then badPlay=true end
									turnOrder[a].levelingStats.RegularUnitsWorth=turnOrder[a].levelingStats.RegularUnitsWorth-gameCards[c.guid].influence
								end
							end
						end
						--Count Everything in the player's Inventory area
						for b, c in pairs(getObjectFromGUID(playerCrystalAreas[turnOrder[a].seatPos]).getObjects()) do
							if c.tag=="Figurine" then
								if c.getVar("state")~="Starting" then
									turnOrder[a].levelingStats.Crystals=turnOrder[a].levelingStats.Crystals+1
								end
							end
						end
						--score Advanced Actions in the play area
						turnOrder[a].levelingStats.AdvancedActionsWorth=(turnOrder[a].levelingStats.AdvancedActions-math.floor(turnOrder[a].level/2))*-6
						if turnOrder[a].levelingStats.AdvancedActionsWorth>0 then turnOrder[a].levelingStats.AdvancedActionsWorth=0 end
						--score Artifacts in the play area
						turnOrder[a].levelingStats.ArtifactsWorth=turnOrder[a].levelingStats.Artifacts*-12
						--score Crystals in the play area
						turnOrder[a].levelingStats.CrystalsWorth=turnOrder[a].levelingStats.Crystals*-3
						--score Spells in the play area .getDescription()
						turnOrder[a].levelingStats.SpellsWorth=(turnOrder[a].levelingStats.Spells*-9)
						local count=0
						for b, c in pairs(crystalColors) do
							for d, e in pairs(spellColors) do
								if c==e then turnOrder[a].levelingStats.SpellsWorth=turnOrder[a].levelingStats.SpellsWorth+2 count=count+1 break end
							end
						end
						if #crystalColors~=count then badPlay=true end
						--update UI
						local influence=turnOrder[a].level*turnOrder[a].influence
						if turnOrder[a].level==1 then influence=0 end
						local remain=influence+turnOrder[a].levelingStats.AdvancedActionsWorth+turnOrder[a].levelingStats.RegularUnitsWorth+turnOrder[a].levelingStats.SpellsWorth+turnOrder[a].levelingStats.ArtifactsWorth+turnOrder[a].levelingStats.CrystalsWorth
						if remain~=turnOrder[a].remain then
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."AdvancedActionCostText", "Text", turnOrder[a].levelingStats.AdvancedActions.." Advanced Action(s) : "..turnOrder[a].levelingStats.AdvancedActionsWorth)
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."RegularUnitCostText", "Text", turnOrder[a].levelingStats.RegularUnits.." Regular Units(s) : "..turnOrder[a].levelingStats.RegularUnitsWorth)
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."SpellCostText", "Text", turnOrder[a].levelingStats.Spells.." Spell(s) : "..turnOrder[a].levelingStats.SpellsWorth)
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."ArtifactCostText", "Text", turnOrder[a].levelingStats.Artifacts.." Artifact(s) : "..turnOrder[a].levelingStats.ArtifactsWorth)
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."CrystalCostText", "Text", turnOrder[a].levelingStats.Crystals.." Crystal(s) : "..turnOrder[a].levelingStats.CrystalsWorth)
							UI.setAttribute("Mage"..turnOrder[a].seatPos.."RemainingText", "Text", "Remaining : "..remain)
							turnOrder[a].remain=remain
							turnOrder[a].levelUpComplete=false
							if remain>=0 and badPlay==false then
								UI.setAttribute("Mage"..turnOrder[a].seatPos.."RemainingText", "Color", "Black")
								UI.setAttribute("Mage"..turnOrder[a].seatPos.."CompleteButton", "interactable", "true")
								UI.setAttribute("Mage"..turnOrder[a].seatPos.."CompleteImage", "image", "Button Active")
							else
								if remain<0 then UI.setAttribute("Mage"..turnOrder[a].seatPos.."RemainingText", "Color", "Red") end
								UI.setAttribute("Mage"..turnOrder[a].seatPos.."CompleteButton", "interactable", "false")
								UI.setAttribute("Mage"..turnOrder[a].seatPos.."CompleteImage", "image", "Button Deactive")
							end
						end
					end, 5)
				end
			else
				if a==1 then gStates.turnNumber=2 end
			end
		end
		gStates.mainUIPause=true end, 10)
	end
	gStates.mainUIPause=false
end

--Change level and Infuence for Player(s)
function mageKnightLevel(player, mouseButton, id)
	if mouseButton=="-1" then
		--check if player was alowed to click those buttons
		local playerPosition=id:sub(5,5)
		if legalPlayerCheck(player.color, tonumber(playerPosition))==true then
			for a, b in pairs(turnOrder) do
				if tostring(b.seatPos)==playerPosition then
					local c=11
					if id:sub(6, 12)~="levelUp" and id:sub(6, 14)~="levelDown" then c=15 end
					if id:sub(c, c+1)=="Up" then
						local levelSum=0
						for c, d in pairs(turnOrder) do
							if d.mage~=gStates.positionMageKnight[5] then levelSum=levelSum+d.level end
						end
						if 	(id:sub(6, 12)~="levelUp" and b[id:sub(6, c-1)]<10) or
							(((levelSum<18 and gStates.coop==1) or (levelSum<22 and gStates.coop==0)) and b[id:sub(6, c-1)]<10) then
							b[id:sub(6, c-1)]=b[id:sub(6, c-1)]+1
						end
					else
						if b[id:sub(6, c-1)]>1 then b[id:sub(6, c-1)]=b[id:sub(6, c-1)]-1 end
					end
					if c==11 then
						UI.setAttribute("Mage"..playerPosition..id:sub(6, c-1).."Text", "Text", "Start at Level "..b.level)
					else
						UI.setAttribute("Mage"..playerPosition..id:sub(6, c-1).."Text", "Text", b.influence.." Influence Per Level")
					end
					if b.level>1 then
						UI.setAttribute("Mage"..playerPosition.."influenceTotalText", "Text", "Influence to Spend : "..b.influence*b.level)
						UI.setAttribute("Mage"..playerPosition.."RemainingText", "Text", "Remaining : "..b.influence*b.level)
						UI.setAttribute("Mage"..playerPosition.."CompleteButton", "onClick", "cardPool")
						UI.setAttribute("Mage"..playerPosition.."CompleteText", "text", "Create Card Pool")
					else
						UI.setAttribute("Mage"..playerPosition.."influenceTotalText", "Text", "Influence to Spend : 0")
						UI.setAttribute("Mage"..playerPosition.."RemainingText", "Text", "Remaining : 0")
						UI.setAttribute("Mage"..playerPosition.."CompleteButton", "onClick", "startHigherLevel")
						UI.setAttribute("Mage"..playerPosition.."CompleteText", "text", "Complete")
					end
					UI.setAttribute("Mage"..playerPosition.."AdvancedActionFreeText", "Text", math.floor(b.level/2).." Free Advanced Action(s)")
					break
				end
			end
		end
	end
end

--Create Start at Higher level Card Pool for Player
function cardPool(player, mouseButton, id)
	if mouseButton=="-1" then
		local playerPosition=id:sub(5,5)
		if legalPlayerCheck(player.color, tonumber(playerPosition))==true then
			--lock clicking players "Create Card Pool" button
			UI.setAttribute("Mage"..playerPosition.."CompleteButton", "onClick", "startHigherLevel")
			UI.setAttribute("Mage"..playerPosition.."CompleteText", "text", "Complete")
			UI.setAttribute("Mage"..playerPosition.."CompleteButton", "interactable", "true")
			UI.setAttribute("Mage"..playerPosition.."CompleteImage", "image", "Button Active")
			--lock clicking players "+" & "-" Level buttons
			UI.setAttribute("Mage"..playerPosition.."levelDown", "interactable", "false")
			UI.setAttribute("Mage"..playerPosition.."levelUp", "interactable", "false")
			--find the turnOrder List that matches the position
			for a, mageDetails in pairs(turnOrder) do
				if tostring(mageDetails.seatPos)==playerPosition then
					--draw character level +2 advanced actions
					for c=1, mageDetails.level+2, 1 do
						getObjectFromGUID("e926ba").takeObject({position={(mageDetails.seatPos*40)-100, 3.0, -48.4}, smooth=false, rotation={0, 180, 0}})
					end
					--draw character level +1 Regular Units
					for c=1, mageDetails.level+1, 1 do
						getObjectFromGUID("75745b").takeObject({position={(mageDetails.seatPos*40)-96, 3.0, -48.4}, smooth=false, rotation={0, 180, 0}})
					end
					--draw character level +0 Spells
					for c=1, mageDetails.level, 1 do
						getObjectFromGUID("e4372a").takeObject({position={(mageDetails.seatPos*40)-92, 3.0, -48.4}, smooth=false, rotation={0, 180, 0}})
					end
					--draw character level -1 Artifacts
					for c=1, mageDetails.level-1, 1 do
						getObjectFromGUID("ac75c4").takeObject({position={(mageDetails.seatPos*40)-88, 3.0, -48.4}, smooth=false, rotation={0, 180, 0}})
					end
					--Give Starting Crystals to player(s)
					if mageDetails.level>1 then
						for c, d in pairs(mageKnights) do
							if d.mage==mageDetails.mage then
								for e=1, 2, 1 do
									local params={position={(mageDetails.seatPos*40)-118+(2*e), 2.00, -37.50}, rotation={0,0,0}, smooth=false}
									local obj=nil
									if d.crystals[e]=="Red" then obj=getObjectFromGUID("819a62").takeObject(params) end
									if d.crystals[e]=="Blue" then obj=getObjectFromGUID("8ae7b8").takeObject(params) end
									if d.crystals[e]=="Green" then obj=getObjectFromGUID("a30eb7").takeObject(params) end
									if d.crystals[e]=="White" then obj=getObjectFromGUID("4f6569").takeObject(params) end
									obj.setVar("state", "Starting")
								end
							end
						end
					end
					--draw two skills per level
					for c=1, math.floor(mageDetails.level/2), 1 do
						for d=1, 2, 1 do
							local pos={(mageDetails.seatPos*40)-108.5+(d*3.65), 2.0, -37.19-(c*1.48)}
							local obj=getObjectFromGUID(mageDetails.skillGUID).takeObject({position=pos, smooth=true, rotation={0, 180, 0}})
							gStates.mageSkills[obj.guid]=pos
						end
					end
					--Add claim buttons
					Wait.frames(function() higherLevelSkillClaimButons() end, 65)
					--Deploy Command Token(s)
					for c=1, math.floor((mageDetails.level-1)/2) ,1 do
						getObjectFromGUID(mageDetails.commandGUID).takeObject({position={(mageDetails.seatPos*40)-103.49+(3.76*c), 2.00, -31.2}, rotation={0, 180, 180}})
					end
				end
			end
		end
	end
end

--activate skill buttons for non claimed skills.
function higherLevelSkillClaimButons()
	for skillGUID, skillDetails in pairs(skillTokens) do
		if getObjectFromGUID(skillGUID)~=nil then
			local objPos=getObjectFromGUID(skillGUID).getPosition()
			if 	not (objPos[3]>-25 or
				(objPos[3]<-35 and objPos[1]>-68 and objPos[1]<-66) or
				(objPos[3]<-35 and objPos[1]>-28 and objPos[1]<-26) or
				(objPos[3]<-35 and objPos[1]>12 and objPos[1]<14) or
				(objPos[3]<-35 and objPos[1]>52 and objPos[1]<54)) then
				getObjectFromGUID(skillGUID).UI.setXmlTable({createClaimButton(skillGUID, "higherLevelSkill")})
			end
		end
	end
end

--Claim and store skills during level up
function higherLevelSkill(player, mouseButton, id)
	if mouseButton=="-1" then
		local selectedSkill=getObjectFromGUID(id:sub(1,6))
		local playerPosition=(math.ceil((selectedSkill.getPosition()[1]+95)/40))
		if legalPlayerCheck(player.color, tonumber(playerPosition))==true then
			--move claimed skill to skill column
			selectedSkill.setPositionSmooth({(playerPosition*40)-107.3, 1.5, selectedSkill.getPosition()[3]})
			selectedSkill.UI.setXmlTable({{}})
			gStates.mageSkills[id:sub(1,6)]={(playerPosition*40)-107.3, 1.5, selectedSkill.getPosition()[3]}
			if gStates.motivationSkill[id:sub(1,6)]~=nil then
				gStates.motivationSkill[id:sub(1,6)].state="active"
				gStates.motivationSkill[id:sub(1,6)].pos=playerPosition
			end
			--find other Skill
			for skillGUID, skillDetails in pairs(skillTokens) do
				if getObjectFromGUID(skillGUID)~=nil then
					local otherSkill=getObjectFromGUID(skillGUID)
					local otherPosition=(math.ceil((otherSkill.getPosition()[1]+95)/40))
					if otherPosition==playerPosition and skillGUID~=id:sub(1,6)
						and otherSkill.getPosition()[3]>selectedSkill.getPosition()[3]-1 and otherSkill.getPosition()[3]<selectedSkill.getPosition()[3]+1 then
						--move other skill to communal area
						local exist=0
						for skillGUID, skillPos in pairs(gStates.mageSkills) do
							if math.floor(skillPos[1])==math.floor((playerPosition*3.7)+7.3) and skillPos[3]>-25 then exist=exist+1 end
						end
						otherSkill.setPositionSmooth({(playerPosition*3.7)+7.3, 2.00, -23.95+(exist*1.35)})
						otherSkill.UI.setXmlTable({{}})
						gStates.mageSkills[skillGUID]={(playerPosition*3.7)+7.3, 2.00, -23.95+(exist*1.35)}
						break
					end
				end
			end
		end
	end
end

--run after all complete's on the start at higher level panel(s) are clicked
function startHigherLevel(player, mouseButton, id)
	if mouseButton=="-1" then
		local playerPosition=id:sub(5,5)
		if legalPlayerCheck(player.color, tonumber(playerPosition))==true then
			--lock clicking players "Complete" button
			UI.setAttribute("Mage"..playerPosition.."CompleteButton", "interactable", "false")
			UI.setAttribute("Mage"..playerPosition.."CompleteImage", "image", "Button Deactive")
			--lock clicking players "+" & "-" Influence buttons
			UI.setAttribute("Mage"..playerPosition.."influenceDown", "interactable", "false")
			UI.setAttribute("Mage"..playerPosition.."influenceUp", "interactable", "false")
			local shieldNumber={}
			local startFame={}
			for a=0, 145, 1 do shieldNumber[a]=1 end
			for a=0, 145, 1 do startFame[a]={} end
			--Check if every player is complete
			local finalComplete=true
			for a, b in pairs(turnOrder) do
				if b.seatPos==tonumber(playerPosition) then
					b.levelUpComplete=true
				else
					if b.levelUpComplete~=true and b.mage~=gStates.positionMageKnight[5] then finalComplete=false end
				end
			end
			if finalComplete==true then
				--build a list of fame tokens and where they start
				for a, b in pairs(turnOrder) do
					if turnOrder[a].mage~=gStates.positionMageKnight[5] then
						local fame=gStates.blitz  +  math.ceil(b.remain/150)  +  ((b.level-1)*3)  +  (((b.level-1)*2)/2)
						startFame[fame][#startFame[fame]+1]=true
					end
				end
				--Loop through all playing player positions
				for a=1, #turnOrder, 1 do
					--Make sure it's not the dummy
					if turnOrder[a].mage~=gStates.positionMageKnight[5] then
						--Hide Interface
						UI.hide("Mage"..turnOrder[a].seatPos.."LevelBoard")
						--Return unbought cards
						for b, c in pairs(getObjectFromGUID(handZones[turnOrder[a].seatPos]).getObjects()) do
							if c.tag=="Card" then
								if c.getName()=="Advanced Action" then getObjectFromGUID("e926ba").putObject(c) end
								if c.getName()=="Regular Unit" then getObjectFromGUID("75745b").putObject(c) end
								if c.getName()=="Spell" then getObjectFromGUID("e4372a").putObject(c) end
								if c.getName()=="Artifact" then getObjectFromGUID("ac75c4").putObject(c) end
							end
						end
						getObjectFromGUID("e926ba").shuffle()
						getObjectFromGUID("75745b").shuffle()
						getObjectFromGUID("e4372a").shuffle()
						getObjectFromGUID("ac75c4").shuffle()
						--loop through all card in play area
						local deedDeck=nil
						for b, possibleDeck in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do
							if possibleDeck.tag=="Deck" then deedDeck=possibleDeck break end
						end
						for b, c in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[a].seatPos]).getObjects()) do
							if c.tag=="Card" then
								--put in deed deck
								if c.getName()=="Advanced Action" then deedDeck.putObject(c) end
								if c.getName()=="Spell" then deedDeck.putObject(c) end
								if c.getName()=="Artifact" then deedDeck.putObject(c) end
							end
							--delete any spent Crystals
							if c.tag=="Figurine" then c.destruct() end
						end
						deedDeck.shuffle()
						--Hand Size Increase
						if turnOrder[a].level>4 then
							turnOrder[a].baseHand=turnOrder[a].baseHand+1
							turnOrder[a].hand=turnOrder[a].hand+1
						end
						if turnOrder[a].level>8 then
							turnOrder[a].baseHand=turnOrder[a].baseHand+1
							turnOrder[a].hand=turnOrder[a].hand+1
						end
						--place Fame Token (add 1 fame for any remaining influence)
						local startPosition=1+gStates.blitz+math.ceil(turnOrder[a].remain/150)
						local levelRowFameQuantity=(((turnOrder[a].level-1)*cellGainPerLevel)+normalCellAmount)
						local levelRowLength=((turnOrder[a].level-1)*gStates.rowLengthGainPerLevel)+gStates.normalRowLength
						local fame=startPosition  +  ((turnOrder[a].level-1)*3)  +  (((turnOrder[a].level-1)*2)/2) -  1
						local xOffset=(((1/levelRowFameQuantity*levelRowLength)   /   (#startFame[fame]+1)))   *   (shieldNumber[fame])
						local yOffset=(((heightOfFameBoard/gStates.rowsOnBoard)/(#startFame[fame]+1)))*(shieldNumber[fame])
						local horizontalValue=leftOfFameBoard+(startPosition/levelRowFameQuantity*levelRowLength)-xOffset
						local verticalValue=(topOfFameBoard-((turnOrder[a].level/gStates.rowsOnBoard)*heightOfFameBoard))+yOffset-0.25
						getObjectFromGUID(turnOrder[a].fameGUID).setPosition({horizontalValue, 1.5, verticalValue})
						shieldNumber[fame]=shieldNumber[fame]+1
						turnOrder[a].fame=fame
					end
				end
				--Return to regular setup
				UI.hide("LevelUpRules")
				Wait.frames(afterLoad, 80)
			end
		end
	end
end

------------------
-- During the Game
------------------
--Update the text in the Main User Interface
function mainUIUpdate(source)
	if gStates.mainUIPause==true and gStates.firstStarted~=0 then Wait.frames(function()
		--log("UI Updated - "..source)
		local fameForUp=0
		local playerAreaObjects={}
		local nextPlayer=nextTurn()--next player used to check if End was Called
		--count cards in play area
		for a, obj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
			local banner=false
			for c=7, #bannerCards, 1 do if obj.guid==bannerCards[c] then banner=true break end end
			if banner==false and obj.tag=="Card" then playerAreaObjects[#playerAreaObjects+1]=obj end
		end

		--Relocate city scripting zones
		for zone, cityDetails in pairs(cityScriptZones) do
			if getObjectFromGUID(zone)~=nil then
				if getObjectFromGUID(cityDetails.cityCard)~=nil then
					local zonescale={x=4.6, y=1, z=3.3}
					local monsterOffset={1.15, -0.7}
					local count=0
					if zone==volkare.discZone then zonescale={x=7.5, y=1, z=7.5} monsterOffset={5.5, -1} end
					if zone==darkCrusader.discZone or zone==elementalist.discZone then zonescale={x=7.5, y=1, z=7.5} monsterOffset={-5.5, -1} end
					getObjectFromGUID(zone).setScale(zonescale)
					local tempPos=getObjectFromGUID(cityDetails.cityCard).getPosition()
					getObjectFromGUID(zone).setPosition({tempPos[1], 1.4, tempPos[3]})
					if gStates.cityMonsterQty[cityDetails.cityGUID]~=nil then
						for monsterGUID, state in pairs(gStates.cityMonsterQty[cityDetails.cityGUID]) do
							if monsterGUID~="shieldNeeded" and gStates.monsterPlayLocation[monsterGUID]~=nil and getObjectFromGUID(monsterGUID)~=nil then
								gStates.monsterPlayLocation[monsterGUID][1]=tempPos[1]+monsterOffset[1]
								gStates.monsterPlayLocation[monsterGUID][2]=1+(0.6*count)
								gStates.monsterPlayLocation[monsterGUID][3]=tempPos[3]+monsterOffset[2]+(0.4*count)
								count=count+1
							end
						end
					end
				end
			end
		end

		--Update the Fame for all Mage Knight
		for a=1, #turnOrder, 1 do
			if turnOrder[a].mage~=gStates.positionMageKnight[5] then
				local fameZValue=getObjectFromGUID(turnOrder[a].fameGUID).getPosition()[3]
				local fameXValue=getObjectFromGUID(turnOrder[a].fameGUID).getPosition()[1]
				local fameVerticle=math.ceil((topOfFameBoard-fameZValue)/heightOfFameBoard*gStates.rowsOnBoard)
				local levelRowFameQuantity=(((fameVerticle-1)*cellGainPerLevel)+normalCellAmount)
				local levelRowLength=(((fameVerticle-1)*gStates.rowLengthGainPerLevel)+gStates.normalRowLength)
				local fameHorizontal=math.ceil((fameXValue-leftOfFameBoard)/levelRowLength*levelRowFameQuantity)
				local fameValue=(3*(fameVerticle-1)+2*(fameVerticle-2)*(fameVerticle-1)/2-1+fameHorizontal)+(gStates.scoreIfLooped*turnOrder[a].scoreLoop)
				local test=fameValue-turnOrder[a].fame+(gStates.scoreIfLooped*turnOrder[a].scoreLoop)
				if test<=-80 then turnOrder[a].scoreLoop=turnOrder[a].scoreLoop+1 end
				if test>=80 then turnOrder[a].scoreLoop=turnOrder[a].scoreLoop-1 end
				turnOrder[a].fame=fameValue+(gStates.scoreIfLooped*turnOrder[a].scoreLoop)
				if turnOrder[a].scoreLoop>0 then getObjectFromGUID(turnOrder[a].fameGUID).highlightOn({1, 0.9, 0}) end -- else getObjectFromGUID(turnOrder[a].fameGUID).highlightOff({1, 0.9, 0}) end
			end
		end

		--Out of Turn Menu visibility
		UI.setAttribute("OutOfTurnActions", "active", "false")
		local count=0
		local lowestFame=1
		--Work out lowest fame
		for a=2, #turnOrder, 1 do
			if turnOrder[a].mage~=gStates.positionMageKnight[5] then
				if turnOrder[a].fame<turnOrder[lowestFame].fame or turnOrder[lowestFame].mage==gStates.positionMageKnight[5] then lowestFame=a end
			end
		end
		for a=1, #turnOrder, 1 do if turnOrder[a].fame==turnOrder[lowestFame].fame and a~=lowestFame then lowestFame=0 break end end
		if gStates.tacticRemove==false and gStates.tacticShown==false then
			for a=1, #turnOrder, 1 do
				UI.setAttribute("Plunder"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("Pursuit"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("NightTactic2-"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "interactable", "false")
				UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("NightTactic6Store"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("NightTactic6Claim"..tostring(turnOrder[a].seatPos), "active", "false")
				UI.setAttribute("MasterOfChaos"..tostring(turnOrder[a].seatPos), "active", "false")
				for skillGUID, stats in pairs(gStates.motivationSkill) do
					UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "active", "false")
				end

				--count cards in play area
				local emptyPlay={}
				for z, obj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[a].seatPos]).getObjects()) do
					local banner=false
					for x=7, #bannerCards, 1 do if obj.guid==bannerCards[x] then banner=true break end end
					if banner==false and obj.tag=="Card" then emptyPlay[#emptyPlay+1]=obj end
				end

				--Plunder Village Buttons
				if turnOrder[a].avatarLocation~=nil and turnOrder[a].avatarLocation=="village" and #emptyPlay<1 and turnOrder[a].pillagedVillage==false then--and a~=gStates.turnNumber
					UI.setAttribute("Plunder"..tostring(turnOrder[a].seatPos), "active", "true")
					UI.setAttribute("Plunder"..tostring(turnOrder[a].seatPos), "text", turnOrder[a].mage.." Plunder the Village")
					UI.setAttribute("Plunder"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
					count=count+1
				end

				--skip movement button.
				if gStates.pursuing[turnOrder[gStates.turnNumber].mage]~=nil and a==gStates.turnNumber and gStates.skippedMove==false then
					local playerPos={}
					for _, details in pairs(mageKnights) do
						if details.mage==turnOrder[gStates.turnNumber].mage then
							if getObjectFromGUID(details.model)~=nil then playerPos=getObjectFromGUID(details.model).getPosition() end
							if getObjectFromGUID(details.token)~=nil then playerPos=getObjectFromGUID(details.token).getPosition() end
							if getObjectFromGUID(details.standee)~=nil then playerPos=getObjectFromGUID(details.standee).getPosition() end
						end
					end
					if math.sqrt(((turnOrder[gStates.turnNumber].turnStartLoc.x-playerPos[1])^2)+((turnOrder[gStates.turnNumber].turnStartLoc.z-playerPos[3])^2))<3.1 then
						UI.setAttribute("Pursuit"..tostring(turnOrder[gStates.turnNumber].seatPos), "active", "true")
						UI.setAttribute("Pursuit"..tostring(turnOrder[gStates.turnNumber].seatPos), "text", turnOrder[gStates.turnNumber].mage.." skips their Move Phase")
						UI.setAttribute("Pursuit"..tostring(turnOrder[gStates.turnNumber].seatPos), "color", positionToColor(a))
						count=count+1
					end
				end

				--NIght tactic 2 buttons
				if turnOrder[a].tactic==2 and gStates.dayRound==false and gStates.tacticTwoState~="Used" and turnOrder[a].mage~=gStates.positionMageKnight[5] then
					local found=false
					for c, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do
						if b.tag=="Deck" or b.tag=="Card" then found=true break end
					end
					if found==false then
						UI.setAttribute("NightTactic2-"..tostring(turnOrder[a].seatPos), "active", "true")
						UI.setAttribute("NightTactic2-"..tostring(turnOrder[a].seatPos), "text", turnOrder[a].mage.." Use Night Tactic 2")
						UI.setAttribute("NightTactic2-"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
						count=count+1
					end
				end

				--Night Tactic 4 Buttons - and a~=gStates.turnNumber
				if turnOrder[a].tactic==4 and #emptyPlay<1 and gStates.dayRound==false and gStates.tacticFourState~="Used" and turnOrder[a].mage~=gStates.positionMageKnight[5] then
					--check if deed deck is bigger than recorded
					for x, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do
						if b.tag=="Deck" then
							UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "text", turnOrder[a].mage.." Tactic 4 ReDraw "..b.getQuantity()-turnOrder[a].deedCount.." Card(s)")
							UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "active", "true")
							UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
							count=count+1
							if turnOrder[a].deedCount<b.getQuantity() then
								--count all cards in deck that have been recorded as part of your hand
								if b.getQuantity()-turnOrder[a].deedCount>0 and b.getQuantity()-turnOrder[a].deedCount<6 then UI.setAttribute("NightTactic4-"..tostring(turnOrder[a].seatPos), "interactable", "true") end
							end
						end
					end
				end

				--Night Tactic 6 Buttons - and a~=gStates.turnNumber
				if turnOrder[a].tactic==6 and #emptyPlay<1 and gStates.dayRound==false and gStates.tacticSixState~="Stored" and gStates.tacticSixState~="Used" and turnOrder[a].mage~=gStates.positionMageKnight[5] then
					local found=false
					for x, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do
						if b.name=="Card" or b.name=="Deck" then
							UI.setAttribute("NightTactic6Store"..tostring(turnOrder[a].seatPos), "active", "true")
							UI.setAttribute("NightTactic6Store"..tostring(turnOrder[a].seatPos), "text", turnOrder[a].mage.." Tactic 6 - Store a Card")
							UI.setAttribute("NightTactic6Store"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
							count=count+1
							found=true
							break
						end
					end
					if found==false then nightTactic6({color="Black"}, "-1", "NightTactic6Claim") end
					if gStates.powerStored>0 then
						UI.setAttribute("NightTactic6Claim"..tostring(turnOrder[a].seatPos), "active", "true")
						UI.setAttribute("NightTactic6Claim"..tostring(turnOrder[a].seatPos), "text", turnOrder[a].mage.." Tactic 6 - Claim "..gStates.powerStored.." Card(s)")
						UI.setAttribute("NightTactic6Claim"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
						count=count+1
					end
				end

				--Motivation Skills
				for skillGUID, stats in pairs(gStates.motivationSkill) do
					if stats.pos==turnOrder[a].seatPos and stats.state=="active" then
						--check if another motivation skill has been used
						local test=false
						for x, stats2 in pairs(gStates.motivationSkill) do
							if stats2.pos==turnOrder[a].seatPos and stats2.state=="used" then test=true end
						end
						if test==false then
							UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "active", "true")
							UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "text", "Use "..skillTokens[skillGUID].mage.."'s Motivation Skill")
							UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "tooltip", "Draw two cards")
							if a==lowestFame then
								UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "text", "Use "..skillTokens[skillGUID].mage.."'s Motivation Skill (+)")
								UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "tooltip", "Draw 2 Cards"..stats.bonus)
							end
							UI.setAttribute(skillGUID.."-Motivation"..tostring(turnOrder[a].seatPos), "color", positionToColor(a))
							count=count+1
						end
					end
				end

				--Master of Chaos
			end
		end
		if count>0 then
			UI.setAttribute("OutOfTurnActions", "active", "true")
			UI.setAttribute("OutOfTurnActions", "height", 35+(count*30))
			UI.setAttribute("OutOfTurnActionsSub", "height", 5+(count*30))
			UI.setAttribute("OutOfTurnActions", "offsetXY", "0 "..tostring(35+(count*30)))
		end

		--change End turn button to say End Round on the last player turn
		UI.setAttribute("EndTurnButton", "interactable", "True")
		UI.setAttribute("EndTurnButton", "tooltip", "At least one card must be played or discarded to 'End Your Turn'.")
		UI.setAttribute("EndTurnButtonImage", "image", "Button Active")
		UI.setAttribute("EndTurnButtonText", "text", "End Turn")
		UI.setAttribute("EndTurnButtonAlt", "interactable", "True")
		UI.setAttribute("EndTurnButtonAltImage", "image", "Button Active")
		UI.setAttribute("ExtraTurnTacticButton", "interactable", "True")
		UI.setAttribute("ExtraTurnTacticButtonImage", "image", "Button Active")
		UI.setAttribute("PreEndTurnImage", "image", "Button Active")
		UI.setAttribute("PreEndTurnText", "text", "Rewards Claimed")
		UI.setAttribute("PreEndTurn", "interactable", "True")
		if turnOrder[nextPlayer].endCalled==true then
			UI.setAttribute("EndTurnButtonText", "text", "End Turn and Round")
			UI.setAttribute("DummyButtonText", "text", "End Turn and Round")
			UI.setAttribute("EndTurnButton", "tooltip", "")
			if gStates.currentRound>=gStates.rounds then
				UI.setAttribute("PreEndTurnImage", "image", "Button Deactive")
				UI.setAttribute("PreEndTurnText", "text", "Game Over")
				UI.setAttribute("PreEndTurn", "interactable", "False")
				UI.setAttribute("DummyButtonText", "Text", "Game Over")
				UI.setAttribute("DummyButton", "interactable", "False")
				UI.setAttribute("DummyButtonImage", "image", "Button Deactive")
				--DisplayScore("all")
			end
		end
		if gStates.endGameAchieved==true and turnOrder[gStates.turnNumber].gameEnder==true then
			UI.setAttribute("PreEndTurnImage", "image", "Button Deactive")
			UI.setAttribute("PreEndTurnText", "text", "Game Over")
			UI.setAttribute("PreEndTurn", "interactable", "False")
			--DisplayScore("all")
		end
		if getObjectFromGUID(turnOrder[nextPlayer].turnOrderTokenGUID).is_face_down==true then
			UI.setAttribute("EndTurnButtonText", "text", "Next Assaulter")
		end

		--If dummy turn activate his menu else setup the players menu
		UI.setAttribute("DummyButton", "onClick", "dummyTurn")
		UI.setAttribute("DummyButtonText", "Text", "Process Dummy")
		UI.setAttribute("DummyButton", "interactable", "True")
		UI.setAttribute("DummyButtonImage", "image", "Button Active")
		UI.setAttribute("DummyTurn", "active", "false")
		UI.setAttribute("ExtraTurnTactic", "active", "false")
		if turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
			UI.setAttribute("DummyTurn", "active", "true")
			if gStates.positionMageKnight[5]~="Volkare" then
				UI.setAttribute("DummyNotes", "Text", "Dummy will draw three cards.\nHe then draws cards up to the amount of Crystals that match the third card.")
			end
			if gStates.positionMageKnight[5]=="Volkare" and gStates.volkareStart==true then
				UI.setAttribute("DummyButtonText", "Text", "Process Volkare")
				UI.setAttribute("DummyNotes", "Text", "Volkare isn't fully programmed.\n\nYou still need to combat him manually.")
			end
			if gStates.positionMageKnight[5]=="Volkare" and gStates.volkareStart==false then
				UI.setAttribute("DummyButtonText", "Text", "Volkare Processed")
			end
			if gStates.tacticRemove==true or gStates.tacticShown==true then
				UI.setAttribute("DummyButton", "interactable", "False")
				UI.setAttribute("DummyButtonImage", "image", "Button Deactive")
				UI.setAttribute("DummyNotes", "Text", "Click the button in the Center to claim a random tactic.")
			end
			if (gStates.endRoundCalled==true and gStates.currentRound>=gStates.rounds) or gStates.volkareWon==true then
				UI.setAttribute("DummyButtonText", "Text", "Game Over")
				UI.setAttribute("DummyButton", "interactable", "False")
				UI.setAttribute("DummyButtonImage", "image", "Button Deactive")
			end
			if scenarioList[gStates.scenarioRef][gStates.playersRef].dummyTacticSelection=="F" then turnOrder[gStates.turnNumber].fame=-1 else turnOrder[gStates.turnNumber].fame=999 end
		else--normal players
			--Work out the Reputation for the current Mage Knight
			for repValue, repDetail in pairs(reputationTable) do
				for b, obj in pairs(getObjectFromGUID(repDetail.repZone).getObjects()) do
					if obj.guid==turnOrder[gStates.turnNumber].reputationGUID then turnOrder[gStates.turnNumber].reputation=repValue break break end
				end
			end

			--work out how much more fame is needed until a level up is required
			local fameZValue=getObjectFromGUID(turnOrder[gStates.turnNumber].fameGUID).getPosition()[3]
			local fameXValue=getObjectFromGUID(turnOrder[gStates.turnNumber].fameGUID).getPosition()[1]
			local fameVerticle=math.ceil((topOfFameBoard-fameZValue)/heightOfFameBoard*gStates.rowsOnBoard)
			if turnOrder[gStates.turnNumber].fame<gStates.scoreIfLooped and fameVerticle<=gStates.rowsOnBoard then
				local fameToLevel=math.floor(math.sqrt(turnOrder[gStates.turnNumber].fame+1))
				if fameVerticle<gStates.rowsOnBoard then fameForUp=((fameToLevel+1)*(fameToLevel+1))-1-turnOrder[gStates.turnNumber].fame end
				--see if the current fame value would cause a level up
				turnOrder[gStates.turnNumber].levelUp=0
				if fameToLevel>turnOrder[gStates.turnNumber].level then
					if fameToLevel==2 or fameToLevel==4 or fameToLevel==6 or fameToLevel==8 or fameToLevel==10 or fameToLevel==12 or fameToLevel-turnOrder[gStates.turnNumber].level>1 then gStates.levelingUp=true end
					turnOrder[gStates.turnNumber].levelUp=fameToLevel-turnOrder[gStates.turnNumber].level
				end
			end

			--Read all objects found in play area. Used to decide on off states of "End.." buttons, plus fame and rep gains
			for a, b in pairs(gStates.gainList) do b.exists=false end
			if gStates.preEndTurn==false then
				for a, obj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					--Read Monster tokens in current play area and update fame and reutation gain values.
					if monsterPugs[obj.guid]~=nil and gStates.summonStates[obj.guid]~="summoned" then
						local doMath=false
						--If no entry found create a new entry for this token
						if gStates.gainList[obj.guid]==nil then
							--record token orientation and do the math if face up.
							gStates.gainList[obj.guid]={exists=true}
							if obj.is_face_down==false then
								gStates.gainList[obj.guid].tokenDirection=1
								doMath=true
							else
								gStates.gainList[obj.guid].tokenDirection=-1
							end
							--store leader overkil value
							if obj.guid==darkCrusader.token or obj.guid==elementalist.token then gStates.gainList[obj.guid].overkill=0 end
							--just existing is enough orientation has no effect
							--Mage Tower and keep rep loss
							if (gStates.monsterPlayLocation[obj.guid]~=nil and gStates.monsterPlayLocation[obj.guid][1]>-43 and gStates.monsterPlayLocation[obj.guid][3]>-18) or
							   (gStates.monsterPlayLocation[obj.guid]==nil and monsterPugs[obj.guid].pugType=="gray" and turnOrder[gStates.turnNumber].avatarLocation=="keep") then
								if (monsterPugs[obj.guid].pugType=="purple" or monsterPugs[obj.guid].pugType=="gray") then
									turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-1
								end
							end
							--city rep loss
							for cityguid, monsters in pairs(gStates.cityMonsterQty) do
								if cityguid~=darkCrusader.terrainHex and cityguid~=elementalist.terrainHex and monsters[obj.guid]=="alive" and gStates.gainList[cityguid]==nil then
									turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-1
									gStates.gainList[cityguid]={exists=true}
									break
								end
							end
							--monastery rep loss
							if turnOrder[gStates.turnNumber].avatarLocation~=nil then
								if monsterPugs[obj.guid].pugType=="purple" and gStates.monsterPlayLocation[obj.guid]==nil and turnOrder[gStates.turnNumber].avatarLocation=="monastery" then
									turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-3
								end
							end
						end
						--existing token found, but it has been flipped
						if (obj.is_face_down==false and gStates.gainList[obj.guid].tokenDirection==-1)
						or (obj.is_face_down==true and gStates.gainList[obj.guid].tokenDirection==1) then
							gStates.gainList[obj.guid].tokenDirection=gStates.gainList[obj.guid].tokenDirection*-1
							doMath=true
						end
						--mines liberation corect fame and rep
						local minesLibMonster=false
						for terrainguid, monsters in pairs(gStates.mineMonsterQty) do
							if monsters[obj.guid]~=nil then
								minesLibMonster=true--current monster has come from a mine
								for monsterGUID, state in pairs(monsters) do
									if monsterGUID~=obj.guid then--found second mine monster
										if (state=="alive" and gStates.gainList[monsterGUID]~=nil) or state=="dead" then
											local x=1
											if terrainTiles[terrainguid].tileType=="core" then x=2 end
											if gStates.gainList[terrainguid]==nil then
												gStates.gainList[terrainguid]={exists=true}
												gStates.gainList[terrainguid].tokenDirection=-1
												if gStates.gainList[obj.guid].tokenDirection==1 and (state=="dead" or gStates.gainList[monsterGUID].tokenDirection==1) then
													gStates.gainList[terrainguid].tokenDirection=1
													turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+(x*gStates.gainList[terrainguid].tokenDirection)
												end
											else
												gStates.gainList[terrainguid].exists=true
												if (gStates.gainList[obj.guid].tokenDirection==1 and (state=="dead" or gStates.gainList[monsterGUID].tokenDirection==1) and gStates.gainList[terrainguid].tokenDirection==-1)
												or ((gStates.gainList[obj.guid].tokenDirection==-1 or (state=="alive" and gStates.gainList[monsterGUID].tokenDirection==-1)) and gStates.gainList[terrainguid].tokenDirection==1) then
													gStates.gainList[terrainguid].tokenDirection=gStates.gainList[terrainguid].tokenDirection*-1
													turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+(x*gStates.gainList[terrainguid].tokenDirection)
												end
											end
											break
										end
									end
								end
								break
							end
						end
						--Check if leader Overkill Changed
						if gStates.gainList[obj.guid].overkill~=nil and gStates.gainList[obj.guid].overkill~=gStates.leaderOverkill and obj.is_face_down==false then doMath=true end
						--if allowed add or subtract fame and reputation
						if doMath==true then
							--All tokens Fame
							if gStates.monsterPlayLocation[obj.guid]==nil and monsterPugs[obj.guid].pugType=="gray" and turnOrder[gStates.turnNumber].avatarLocation=="keep" then
								turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+(math.ceil(monsterPugs[obj.guid].fame/2)*gStates.gainList[obj.guid].tokenDirection)
							else
								local multiple=1
								if obj.guid==darkCrusader.token or obj.guid==elementalist.token then
									if gStates.gainList[obj.guid].overkill~=gStates.leaderOverkill then turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain-(monsterPugs[obj.guid].fame*gStates.gainList[obj.guid].overkill) end
									multiple=gStates.leaderOverkill
									gStates.gainList[obj.guid].overkill=gStates.leaderOverkill
								end
								turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+(monsterPugs[obj.guid].fame*multiple*gStates.gainList[obj.guid].tokenDirection)
							end
							if getObjectFromGUID("f469f4")==nil and monsterPugs[obj.guid].reward~=nil then
								turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+(monsterPugs[obj.guid].reward*gStates.gainList[obj.guid].tokenDirection)
							end
							--Rampaging Reputation
							if gStates.monsterPlayLocation[obj.guid]~=nil and minesLibMonster==false then
								if gStates.monsterPlayLocation[obj.guid][1]>-43 and gStates.monsterPlayLocation[obj.guid][3]>-18 then
									if monsterPugs[obj.guid].pugType=="green" or monsterPugs[obj.guid].pugType=="tan" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+(1*gStates.gainList[obj.guid].tokenDirection) end
									if monsterPugs[obj.guid].pugType=="red" and gStates.gameScenario~="The Lost Relic Blitz" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+(2*gStates.gainList[obj.guid].tokenDirection) end
								end
							end
							--add hero and thug reputation
							if monsterPugs[obj.guid].reputation~=nil then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+(monsterPugs[obj.guid].reputation*gStates.gainList[obj.guid].tokenDirection) end
						end
						gStates.gainList[obj.guid].exists=true
					end
				end
				--if a token has been removed subtract it's values
				for a, b in pairs(gStates.gainList) do
					if b.exists==false and monsterPugs[a]~=nil then
						if b.tokenDirection==1 then
							--fame
							if gStates.monsterPlayLocation[a]==nil and monsterPugs[a].pugType=="gray" and turnOrder[gStates.turnNumber].avatarLocation=="keep" then
								turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain-math.ceil(monsterPugs[a].fame/2)
							else
								local multiple=1
								if a==darkCrusader.token or a==elementalist.token then multiple=gStates.leaderOverkill end
								turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain-(monsterPugs[a].fame*multiple)
							end
							if getObjectFromGUID("f469f4")==nil and monsterPugs[a].reward~=nil then turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain-monsterPugs[a].reward end
							--Mine Liberation Reputation gStates.gameScenario=="Mines Liberation"
							local minesLibMonster=false
							for terrainguid, monsters in pairs(gStates.mineMonsterQty) do
								if monsters[a]~=nil then
									minesLibMonster=true--current monster has come from a mine
									if gStates.gainList[terrainguid]~=nil and gStates.gainList[terrainguid].tokenDirection==1 then
										local x=1
										if terrainTiles[terrainguid].tileType=="core" then x=2 end
										turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-x
										gStates.gainList[terrainguid]=nil
									end
									break
								end
							end
							--Rampaging reputation
							if gStates.monsterPlayLocation[a]~=nil and minesLibMonster==false then
								if gStates.monsterPlayLocation[a][1]>-43 and gStates.monsterPlayLocation[a][3]>-18 then
									if monsterPugs[a].pugType=="green" or monsterPugs[a].pugType=="tan" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-1 end
									if monsterPugs[a].pugType=="red" and gStates.gameScenario~="The Lost Relic Blitz" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-2 end
								end
							end
							--Hero and thug reputation
							if monsterPugs[a].reputation~=nil then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-monsterPugs[a].reputation end
						end
						--Mage tower and keep
						if (gStates.monsterPlayLocation[a]~=nil and gStates.monsterPlayLocation[a][1]>-43 and gStates.monsterPlayLocation[a][3]>-18) or
						   (gStates.monsterPlayLocation[a]==nil and monsterPugs[a].pugType=="gray" and turnOrder[gStates.turnNumber].avatarLocation=="keep") then
							if monsterPugs[a].pugType=="purple" or monsterPugs[a].pugType=="gray" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+1 end
						end
						--City monsters
						for cityguid, monsters in pairs(gStates.cityMonsterQty) do
							if cityguid~=darkCrusader.terrainHex and cityguid~=elementalist.terrainHex and monsters[a]=="alive" and gStates.gainList[cityguid]~=nil then
								local found=false
								for monsterGUID, state in pairs(monsters) do
									if gStates.gainList[monsterGUID]~=nil then
										if gStates.gainList[monsterGUID].exists==true then found=true end
									end
								end
								if found==false then
									turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+1
									gStates.gainList[cityguid]=nil
								end
								break
							end
						end
						--monastery
						if turnOrder[gStates.turnNumber].avatarLocation~=nil and monsterPugs[a]~=nil then
							if monsterPugs[a].pugType=="purple" and gStates.monsterPlayLocation[a]==nil and turnOrder[gStates.turnNumber].avatarLocation=="monastery" then
								turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+3
							end
						end
						gStates.gainList[a]=nil
					end
				end
				--Cap the gain values if exceeding limits
				if turnOrder[gStates.turnNumber].fameGain<0 then turnOrder[gStates.turnNumber].fameGain=0 end
				if turnOrder[gStates.turnNumber].repGain<(-7-turnOrder[gStates.turnNumber].reputation) then turnOrder[gStates.turnNumber].repGain=(-7-turnOrder[gStates.turnNumber].reputation) end
				if turnOrder[gStates.turnNumber].repGain>(7-turnOrder[gStates.turnNumber].reputation) then turnOrder[gStates.turnNumber].repGain=(7-turnOrder[gStates.turnNumber].reputation) end
			end

			--Change End turn button text if level up expected
			if (fameForUp<=turnOrder[gStates.turnNumber].fameGain or turnOrder[gStates.turnNumber].levelUp>0) and turnOrder[nextPlayer].endCalled~=true and turnOrder[gStates.turnNumber].fame<gStates.scoreIfLooped and fameVerticle<gStates.rowsOnBoard then
				UI.setAttribute("EndTurnButtonText", "text", "End Turn & Level Up")
			end

			--Change Reward text to be player location sensitive
			local count=1
			local rewardText="Have you :-\n\n"
			local linefeed=false
			if turnOrder[gStates.turnNumber].avatarLocation~=nil then
				--Victory Shield
				if turnOrder[gStates.turnNumber].avatarLocation=="keep" or turnOrder[gStates.turnNumber].avatarLocation=="mage tower" or
					(turnOrder[gStates.turnNumber].avatarLocation=="mine" and gStates.gameScenario=="Mines Liberation") or
					(turnOrder[gStates.turnNumber].avatarLocation=="glade" and gStates.gameScenario=="Druid Nights") or
					turnOrder[gStates.turnNumber].avatarLocation=="dungeon" or turnOrder[gStates.turnNumber].avatarLocation=="tomb" or turnOrder[gStates.turnNumber].avatarLocation=="city" or
					turnOrder[gStates.turnNumber].avatarLocation=="monster den" or turnOrder[gStates.turnNumber].avatarLocation=="spawning grounds" or
					turnOrder[gStates.turnNumber].avatarLocation=="labyrinth" or turnOrder[gStates.turnNumber].avatarLocation=="maze" or
					turnOrder[gStates.turnNumber].avatarLocation=="ruin" or	turnOrder[gStates.turnNumber].avatarLocation=="monastery" then
					rewardText=rewardText..count..". Placed Victory Shields"
					count=count+1 linefeed=true
				end
				if linefeed==true then rewardText=rewardText.."\n" linefeed=false end
				if turnOrder[gStates.turnNumber].avatarLocation=="glade" then
					rewardText=rewardText..count..". Removed One Wound"
					count=count+1 linefeed=true
				end
				if turnOrder[gStates.turnNumber].avatarLocation:sub(1,4)=="mine" then
					rewardText=rewardText..count..". Gained a crystal from the Mine"
					count=count+1 linefeed=true
				end
				if turnOrder[gStates.turnNumber].avatarLocation=="mage tower" or turnOrder[gStates.turnNumber].avatarLocation=="ruin"
				or turnOrder[gStates.turnNumber].avatarLocation=="maze" or turnOrder[gStates.turnNumber].avatarLocation=="monastery" or turnOrder[gStates.turnNumber].avatarLocation=="monster den"
				or turnOrder[gStates.turnNumber].avatarLocation=="dungeon" or turnOrder[gStates.turnNumber].avatarLocation=="spawning grounds" or turnOrder[gStates.turnNumber].avatarLocation=="tomb"
				or turnOrder[gStates.turnNumber].avatarLocation=="labyrinth" then
					rewardText=rewardText..count..". Gained Combat Rewards"
					count=count+1 linefeed=true
				end
			end
			if linefeed==true then rewardText=rewardText.."\n" linefeed=false end
			if gStates.levelingUp==true then
				rewardText=rewardText..count..". Gained Level Up Rewards"
				count=count+1 linefeed=true
			end
			if linefeed==true then rewardText=rewardText.."\n" linefeed=false end
			rewardText=rewardText..count..". Adjusted your hand size"
			UI.setAttribute("RewardNotes", "text", rewardText)

			--lock end turn button if no cards are played or discarded
			--discard object detection
			local discardAreaCards=0
			for a, b in pairs(getObjectFromGUID(deedDeckDiscardZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
				if b.tag=="Card" then discardAreaCards=discardAreaCards+1 end
				if b.tag=="Deck" then discardAreaCards=discardAreaCards+b.getQuantity() end
			end
			if (#playerAreaObjects<1 and gStates.endRoundCalled==false and discardAreaCards==turnOrder[gStates.turnNumber].discardCount)
			or gStates.tacticShown==true or gStates.tacticRemove==true then
				UI.setAttribute("EndTurnButton", "interactable", "False")
				UI.setAttribute("EndTurnButtonImage", "image", "Button Deactive")
				UI.setAttribute("EndTurnButtonAlt", "interactable", "False")
				UI.setAttribute("EndTurnButtonAltImage", "image", "Button Deactive")
				UI.setAttribute("ExtraTurnTacticButton", "interactable", "False")
				UI.setAttribute("ExtraTurnTacticButtonImage", "image", "Button Deactive")
			end

			--Show extra button for day tactic 6
			if turnOrder[gStates.turnNumber].tactic==6 and gStates.dayRound==true and gStates.tacticSixState~="Used"
			and gStates.tacticRemove==false and gStates.tacticShown==false then
				UI.setAttribute("ExtraTurnTactic", "active", "true")
			end

			--Update Fame and Reputation menus
			UI.setAttribute("EndRoundPlusFameText", "text", "Gain "..tostring(turnOrder[gStates.turnNumber].fameGain).." Fame")
			if turnOrder[gStates.turnNumber].repGain>-1 then
				UI.setAttribute("EndRoundPlusRepText", "text", "Gain "..tostring(turnOrder[gStates.turnNumber].repGain).." Rep")
			else
				UI.setAttribute("EndRoundPlusRepText", "text", "Lose "..tostring(turnOrder[gStates.turnNumber].repGain*-1).." Rep")
			end
		end

		--Check if the current turn mage has started with no deed deck and enable end round buttom.
		UI.setAttribute("EndRoundButton", "interactable", "False")
		UI.setAttribute("EndRoundButtonImage", "image", "Button Deactive")
		UI.setAttribute("EndRoundButtonText", "fontSize", "23")
		UI.setAttribute("EndRoundButtonText", "text", "Call End of Round "..gStates.currentRound.." of "..gStates.rounds)
		if gStates.rounds>=10 and gStates.currentRound>=10 then UI.setAttribute("EndRoundButtonText", "fontSize", "21") end
		local found=false
		for a, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
			if b.tag=="Deck" or b.tag=="Card" then found=true break end
		end
		if found==false then
			--Is this a player or Dummy & Volkare
			if turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
				if gStates.positionMageKnight[5]=="Volkare" and gStates.volkareWon==false then
					UI.setAttribute("DummyNotes", "Text", "Volkare Deck is Empty.\n-< FRENZY >-\nVolkare acts as if he drew a Blue Spell. Don't Reroll any Die")
					UI.setAttribute("DummyButtonText", "Text", "Frenzied Volkare Processed")
				end
				if gStates.positionMageKnight[5]~="Volkare" then
					if gStates.endRoundCalled==false then
						UI.setAttribute("DummyButtonText", "Text", "Call End of Round "..gStates.currentRound.." of "..gStates.rounds)
						UI.setAttribute("DummyButton", "onClick", "PreEndRound")
					end
				end
			else
				if getObjectFromGUID(turnOrder[gStates.turnNumber].turnOrderTokenGUID).is_face_down==false
					and gStates.tacticShown==false and gStates.tacticRemove==false and gStates.endRoundCalled==false and #playerAreaObjects<1 then
					UI.setAttribute("EndRoundButton", "interactable", "True")
					UI.setAttribute("EndRoundButtonImage", "image", "Button Active")
				end
			end
		end
		if gStates.endRoundCalled==true then UI.setAttribute("EndRoundButton", "Text", "End of Round Called") end

		local notice=false
		local UIColor=positionToColor(gStates.turnNumber)
		--Display Info Pannel if pursuing monsters have two options.

		if gStates.pursuitTwoOption==true then
			UI.setAttribute("NoticeText", "Text", "Pursuing Monster(s) have two Options for the current Player to decide between.")
			UI.setAttribute("NoticeBoard", "visibility", "")
			UI.setAttribute("NoticeBoard", "height", "50")
			notice=true
		end

		--Display Info pannel if player needs to deploy a tomb or dungeon token
		if #gStates.locationPlace>0 then
			local site="Village"
			if gStates.locationPlace[#gStates.locationPlace]=="Secret Tomb" then site="Monastary" end
			UI.setAttribute("NoticeText", "Text", "Place a "..gStates.locationPlace[#gStates.locationPlace].." token on an accessible non-swamp, non-feature space next to the "..site)
			UI.setAttribute("NoticeBoard", "visibility", "")
			UI.setAttribute("NoticeBoard", "height", "50")
			notice=true
		end

		--Display Info pannel if End of round is immenant
		if turnOrder[nextPlayer].endCalled==true and (gStates.preEndTurn==true or turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5]) and gStates.currentRound < gStates.rounds then
			UI.setAttribute("NoticeText", "Text", "The game is about to experiance end of round updates.\nPut Banners in discard if desired\nDiscard the 2nd offer if playing 'Control over the Offer'")
			UI.setAttribute("NoticeBoard", "visibility", "")
			UI.setAttribute("NoticeBoard", "height", "70")
			notice=true
		end

		--Display Info pannel if tactics are shown
		UI.setAttribute("DrawOne", "interactable", "true")
		UI.setAttribute("DrawOneImage", "image", "Button Active")
		if gStates.tacticRemove==true or gStates.tacticShown==true then
			if gStates.tacticRemove==true then
				UI.setAttribute("NoticeText", "Text", "Choose tactic(s) to be removed from the Game")
			else
				UI.setAttribute("NoticeText", "Text", turnOrder[gStates.turnNumber].mage.." needs to choose a tactic from the center")
			end
			UI.setAttribute("DrawOne", "interactable", "False")
			UI.setAttribute("DrawOneImage", "image", "Button Deactive")
			UI.setAttribute("NoticeBoard", "visibility", "")
			UI.setAttribute("NoticeBoard", "height", "50")
			notice=true
		else --turn off help notes after first round of tactic selection
			gStates.help=true
			DisplayHelp(nil, "-1", "Game Started")
		end

		--Remove or Display the notice board as needed
		if notice==false and gStates.noticeShown==true then
			UI.hide("NoticeBoard")
			gStates.noticeShown=false
		end
		if notice==true and gStates.noticeShown==false then
			UI.show("NoticeBoard")
			gStates.noticeShown=true
		end

		--Update Model Bases and color bars to hand color
		for a=1, 4, 1 do--run through all positions
			for b=1, #turnOrder, 1 do
				if turnOrder[b].seatPos==a then--figure out which turn order matches the position
					local turnColor=1
					for c=1, #Player.getAvailableColors(), 1 do
						d=math.ceil((Player[Player.getAvailableColors()[c]].getHandTransform().position[1]+97.59)/40)
						if d==turnOrder[b].seatPos then break end
						turnColor=turnColor+1
					end
					if turnColor<=#Player.getAvailableColors() then
						local color=Player.getAvailableColors()[turnColor]
						for c=1, #mageKnights,1 do
							if mageKnights[c].mage==turnOrder[b].mage and turnOrder[b].mage~=gStates.positionMageKnight[5] then--figures out which Mage is in that position
								if getObjectFromGUID(mageKnights[c].model)~=nil then getObjectFromGUID(mageKnights[c].model).setColorTint(color) end
								if getObjectFromGUID(mageKnights[c].standee)~=nil then getObjectFromGUID(mageKnights[c].standee).setColorTint(color) end
								if getObjectFromGUID(colorBand[a])~=nil then getObjectFromGUID(colorBand[a]).setColorTint(color) end
								break
							end
						end
					end
				end
			end
		end

		--update Deed and discard deck discriptions
		local obj={}
		for a, playerStats in pairs(turnOrder) do
			for b, c in pairs(getObjectFromGUID(deedDeckZones[playerStats.seatPos]).getObjects()) do obj[#obj+1]=c end
			for b, c in pairs(getObjectFromGUID(deedDeckDiscardZones[playerStats.seatPos]).getObjects()) do obj[#obj+1]=c end
		end
		for b, posibleDeck in pairs(obj) do
			if posibleDeck.tag=="Deck" then
				local deckStats={["Red Card(s)"]=0, ["Green Card(s)"]=0, ["Blue Card(s)"]=0, ["White Card(s)"]=0,
								["Starting Card(s)"]=0, ["Advanced Action(s)"]=0, ["Spell(s)"]=0, ["Wound(s)"]=0, ["Artifact(s)"]=0,
								["Card(s) are Move" ]=0, ["Card(s) are Combat"]=0, ["Card(s) are Influence"]=0, ["Card(s) are Special"]=0, ["Card(s) are Heal"]=0, ["Card(s) are Action"]=0}
				--count card types colours, and abilities
				for c, deedCard in pairs(posibleDeck.getObjects()) do
					if gameCards[deedCard.guid]~=nil and gameCards[deedCard.guid].cardType~="Regular Unit" and gameCards[deedCard.guid].cardType~="Elite Unit" then
						if gameCards[deedCard.guid].cardType=="Advanced Action" then deckStats["Advanced Action(s)"]=deckStats["Advanced Action(s)"]+1 end
						if gameCards[deedCard.guid].cardType=="Artifact" then deckStats["Artifact(s)"]=deckStats["Artifact(s)"]+1 end
						if gameCards[deedCard.guid].cardType=="Spell" then deckStats["Spell(s)"]=deckStats["Spell(s)"]+1 end
						if gameCards[deedCard.guid].cardType=="Starting" then deckStats["Starting Card(s)"]=deckStats["Starting Card(s)"]+1 end
						for d, cardColor in pairs(gameCards[deedCard.guid].color) do
							if cardColor=="Blue" then deckStats["Blue Card(s)"]=deckStats["Blue Card(s)"]+1 end
							if cardColor=="Red" then deckStats["Red Card(s)"]=deckStats["Red Card(s)"]+1 end
							if cardColor=="Green" then deckStats["Green Card(s)"]=deckStats["Green Card(s)"]+1 end
							if cardColor=="White" then deckStats["White Card(s)"]=deckStats["White Card(s)"]+1 end
						end
						for d, cardAction in pairs(gameCards[deedCard.guid].action) do
							if cardAction=="Move" then deckStats["Card(s) are Move"]=deckStats["Card(s) are Move"]+1 end
							if cardAction=="Combat" then deckStats["Card(s) are Combat"]=deckStats["Card(s) are Combat"]+1 end
							if cardAction=="Influence" then deckStats["Card(s) are Influence"]=deckStats["Card(s) are Influence"]+1 end
							if cardAction=="Special" then deckStats["Card(s) are Special"]=deckStats["Card(s) are Special"]+1 end
							if cardAction=="Heal" then deckStats["Card(s) are Heal"]=deckStats["Card(s) are Heal"]+1 end
							if cardAction=="Action" then deckStats["Card(s) are Action"]=deckStats["Card(s) are Action"]+1 end
						end
					else
						deckStats["Wound(s)"]=deckStats["Wound(s)"]+1
					end
				end
				--write a description
				local deckDescription=""
				for statName, statValue in pairs(deckStats) do
					if statValue>0 then
						deckDescription=deckDescription..statValue.." "..statName.."\n"
					end
					if statName=="White Card(s)" or statName=="Artifact(s)" then deckDescription=deckDescription.."----------\n" end
				end
				deckDescription=deckDescription.."----------"
				posibleDeck.setName("Deed Cards")
				posibleDeck.setDescription(deckDescription)
			end
		end

		--Increase hand size for day tactic 4
		local cardsInHand=0
		if turnOrder[gStates.turnNumber].seatPos<5 then
			for a, possibleCards in pairs(getObjectFromGUID(handZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
				if possibleCards.tag=="Card" then cardsInHand=cardsInHand+1 end
			end
		end
		if turnOrder[gStates.turnNumber].tactic==4 and gStates.dayRound==true and cardsInHand>=2 then
			gStates.tactic4HandBonus=1
		else
			gStates.tactic4HandBonus=0
		end

		if gStates.preEndTurn==true then
			UI.setAttribute("RewardCheck", "active", "true")
			UI.show("EndGameButton")
		else
			UI.setAttribute("RewardCheck", "active", "false")
			UI.hide("EndGameButton")
		end
		if UIColor=="Black" then UIColor="rgb(0,0,0)" end
		UI.setAttribute("MainGameNotes", "color", UIColor)
		UI.setAttribute("RewardNotes", "color", UIColor)
		UI.setAttribute("DrawHandText", "text", "Draw up to "..tostring(turnOrder[gStates.turnNumber].hand+turnOrder[gStates.turnNumber].handBonus+gStates.tactic4HandBonus).." cards")
		UI.setAttribute("DrawHandText", "color", "Black")
		if turnOrder[gStates.turnNumber].hand+turnOrder[gStates.turnNumber].handBonus+gStates.tactic4HandBonus>turnOrder[gStates.turnNumber].baseHand then UI.setAttribute("DrawHandText", "color", "rgb(0.4, 0.1, 0.2)") end
		if turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5] then
			local mainText="You are playing\n"..gStates.gameScenario.."\n\n"..turnOrder[gStates.turnNumber].mage.."'s Turn\n\nReputation = "..reputationTable[turnOrder[gStates.turnNumber].reputation].repDisplay.."\nFame = "..turnOrder[gStates.turnNumber].fame
			if fameForUp>0 then mainText=mainText.."\nNext Level in "..fameForUp.." Fame" else mainText=mainText.."\n" end
			UI.setAttribute("MainGameNotes", "text", mainText)
		else
			UI.setAttribute("MainGameNotes", "text", "You are playing\n"..gStates.gameScenario.."\n\n"..turnOrder[gStates.turnNumber].mage.."'s Turn\n\n\n\n")
		end
		UI.show("MainGame")
		gStates.mainUIPause=true end, 5)
	end
	gStates.mainUIPause=false
end

--work out which color hand has the current turns mage
function positionToColor(turnNumber)
	local turnColor=1
	for index, color in pairs(Player.getAvailableColors()) do
		b=math.ceil((Player[color].getHandTransform().position[1]+97.59)/40)
		if b==turnOrder[turnNumber].seatPos then break end
		turnColor=turnColor+1
	end
	local color=Player.getAvailableColors()[turnColor]
	if turnColor==#Player.getAvailableColors()+1 or turnOrder[turnNumber].mage==gStates.positionMageKnight[5] then color="Black" end
	return color
end

--Tactic Showing and Hiding
function tacticToggle()
	--rearanges the turn order tokens
	function turnOrderSort()
		for a=1, #turnOrder, 1 do
			getObjectFromGUID(turnOrder[a].turnOrderTokenGUID).unlock()
			getObjectFromGUID(turnOrder[a].turnOrderTokenGUID).setPositionSmooth({-1.90, 1.2, -18.00-(1.4*a)})
		end
	end

	--Show all tactics available
	if gStates.tacticShown==true then
		broadcastToAll("Turn order Re-Organised based on tactic card selection", {1,1,0.5})
		turnOrderSort()
		Wait.frames(function()
			for a=1,6,1 do
				local obj=getObjectFromGUID(tacticZones[a]).getObjects()
				local depth=-8
				if gStates.dayRound==true then depth=-4 end
				if obj~=nil then
					for b=1, #obj, 1 do
						if obj[b].tag=="Tile" then
							obj[b].lock()
							obj[b].setPosition({obj[b].getPosition()[1], depth, obj[b].getPosition()[3]})
						end
					end
				end
			end
		end, 30)--allow time for the smooth claim to pull the cards out of the zone
		UI.setAttribute("ScoreButtonActual", "interactable", "True")
		UI.setAttribute("ScoreButtonActualImage", "image", "Button Active")
		gStates.tacticShown=false
		--remove note about re-areanging turn tokens
		if getObjectFromGUID("0934f2")~=nil then getObjectFromGUID("0934f2").destruct()	end
	else
		gStates.tacticSixState="notClaimed"
		gStates.tacticShown=true
		broadcastToAll("Start of a Round. Please select a tactic Card for the round", {1,1,0.5})
		for a=1, 6, 1 do
			if gStates.dayRound==true then
				if getObjectFromGUID(tacticCard[a+6])~=nil then
					getObjectFromGUID(tacticCard[a+6]).setPosition({-16.50+(4*a), -4, -14.00})
					getObjectFromGUID(tacticCard[a+6]).lock()
				end
				if getObjectFromGUID(tacticCard[a])~=nil then
					getObjectFromGUID(tacticCard[a]).unlock()
					getObjectFromGUID(tacticCard[a]).setRotation({0.00, 180, 0.00})
					getObjectFromGUID(tacticCard[a]).setPosition({-16.50+(4*a), 1.5, -14.00})
				end
			else
				if getObjectFromGUID(tacticCard[a])~=nil then
					getObjectFromGUID(tacticCard[a]).setPosition({-16.50+(4*a), -8, -14.00})
					getObjectFromGUID(tacticCard[a]).lock()
				end
				if getObjectFromGUID(tacticCard[a+6])~=nil then
					getObjectFromGUID(tacticCard[a+6]).unlock()
					getObjectFromGUID(tacticCard[a+6]).setRotation({0.00, 180, 0.00})
					getObjectFromGUID(tacticCard[a+6]).setPosition({-16.50+(4*a), 1.5, -14.00})
				end
			end
		end
		UI.setAttribute("ScoreButtonActual", "interactable", "False")
		UI.setAttribute("ScoreButtonActualImage", "image", "Button Deactive")
		if getObjectFromGUID("0934f2")==nil then turnOrderSort() end
		mainUIUpdate("Tactic Togle")
	end
	claimButtonRefresh()
end

--Move's an offer or tactic card to a player's location
function claimMove(player, mouseButton, id)
	if mouseButton=="-1" then
		local claimedCard=getObjectFromGUID(id:sub(1, 6))
		local source=id:sub(7, string.len(id))
		if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true and turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5] then
			if claimedCard~=nil then
				--flip the card if going to deed deck
				if source=="offer" or source=="monastery" then claimedCard.setRotationSmooth({0.0, 180.0, 180.0}) end
				--Move the card to deed deck or tactic area.
				if source~="unit" then
					local adjust=113.9
					if source:sub(1, string.len(source)-1)=="tactic" then adjust=117.47 end
					claimedCard.setPositionSmooth({(turnOrder[gStates.turnNumber].seatPos*40)-adjust, 3.0, -43.16})
					if source:sub(1, string.len(source)-1)~="tactic" then turnOrder[gStates.turnNumber].deedCount=turnOrder[gStates.turnNumber].deedCount+1 end
					--put the card into the deck to get around shrinking deck problem.
					 for a, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					 	if (b.tag=="Card" or b.tag=="Deck") and source~="tactic" then
					 		Wait.frames(function() b.putObject(claimedCard) end, 15)
					 		break
					 	end
					end
					if source=="offer" then Wait.frames(function() fillSlide() end, 30) end
					broadcastToAll("Player "..Player[player.color].steam_name.." gained "..getObjectFromGUID(claimedCard.guid).getName().." for "..turnOrder[gStates.turnNumber].mage, positionToColor(gStates.turnNumber))
				else
					--Move the Unit card to an empty unit spot
					local unitArray={{command=false, unit=false},{command=false, unit=false},{command=false, unit=false},{command=false, unit=false},{command=false, unit=false},{command=false, unit=false}}
					for a, obj in pairs(getObjectFromGUID(playerUnitAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
						if obj.getName()~=nil then
							if obj.getName()=="Command Token" or obj.getName()=="Bonds of Loyalty" or obj.guid=="8dbce4" then unitArray[math.ceil((obj.getPosition()[1]+105.36-(turnOrder[gStates.turnNumber].seatPos*40))/3.75)].command=true end
							if obj.getName()=="Regular Unit" or obj.getName()=="Elite Unit" then unitArray[math.ceil((obj.getPosition()[1]+105.36-(turnOrder[gStates.turnNumber].seatPos*40))/3.75)].unit=true end
						end
					end
					local found=false
					for a=1, 6, 1 do
						if unitArray[a].command==true and unitArray[a].unit==false then
							found=true
							local adjust=107.24-(a*3.75)
							claimedCard.setPositionSmooth({(turnOrder[gStates.turnNumber].seatPos*40)-adjust, 2.0, -34.74})
							if gameCards[claimedCard.guid]~=nil then
								broadcastToAll("Player "..Player[player.color].steam_name.." gained "..gameCards[claimedCard.guid].name.." for "..turnOrder[gStates.turnNumber].mage, positionToColor(gStates.turnNumber))
							end
							break
						end
					end
					if found==false then broadcastToAll("You have no free command tokens to enlist another unit", {1,0,0}) end
					--give warning if claiming a unit from a spot you are not on.
					if gameCards[claimedCard.guid]~=nil then
						local found=false
						for a, b in pairs(gameCards[claimedCard.guid].recruit) do
							if b==turnOrder[gStates.turnNumber].avatarLocation then found=true break end
						end
						if found==false then broadcastToAll("Claimed Unit normally isn't recruited from the location you're currently at.", positionToColor(gStates.turnNumber)) end
					end
				end
				--activate some of the tactics effects.
				if source:sub(1, string.len(source)-1)=="tactic" then
					turnOrder[gStates.turnNumber].tactic=tonumber(source:sub(7, string.len(source)))
					if gStates.dayRound==true and turnOrder[gStates.turnNumber].tactic==5 then
						DrawUpTo({color="Black"}, "-1", "DrawOne")
						DrawUpTo({color="Black"}, "-1", "DrawOne")
					end
					if gStates.dayRound==true and turnOrder[gStates.turnNumber].tactic==2 then
						if getObjectFromGUID("a000a4")~=nil then getObjectFromGUID("a000a4").Call("buttonActivate") end--activate Day Tactic 2 buttons
					end
					incrementTurn()
				end
			end
		else
			if turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
				if turnOrder[gStates.turnNumber].mage=="Volkare" then
					broadcastToAll("Volkare doesn't claim cards", {1,0,0})
				else
					broadcastToAll("Dummy doesn't claim cards this way", {1,0,0})
				end
			end
		end
	end
end

--Moves claimed skill to player location
function skillMove(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, gStates.skillButtons)==true then--and turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5]
			--convert button pressed to xy coordinates
			local claimedSkill=getObjectFromGUID(id:sub(1, 6))
			local source=tonumber(id:sub(7, string.len(id)))
			local buttonToXYZ={(math.floor(source/8)*3.7)+11, 2, ((source-(math.floor(source/8)*8))*1.35)-25.3}
			--use cooordinates to find matching recorded skills
			for skillGUID, skillPos in pairs(gStates.mageSkills) do
				if math.floor(buttonToXYZ[1])==math.floor(skillPos[1]) and math.floor(buttonToXYZ[3])==math.floor(skillPos[3]) then
					--update skill location register with a free spot on player board
					local count=0
					for skillGUID, skillPos in pairs(gStates.mageSkills) do
						if skillPos[3]<-36.9 and math.floor(skillPos[1])==math.floor(((gStates.skillButtons*40)-107.3)) then count=count+1 end
					end
					gStates.mageSkills[skillGUID]={((gStates.skillButtons*40)-107.3), 1.1, -38.67-(1.48*count)}
					--Bonds of Loyalty goes to unit area
					if skillGUID=="f30dd4" then
						gStates.mageSkills[skillGUID]={((gStates.skillButtons*40)-84.7), 1.1, -31.19}
						local unitPlace={{36.0, 1.25, -4.2}, {31.2, 1.25, -4.2}, {26.4, 1.25, -4.2}, {21.6, 1.25, -4.2}, {16.8, 1.25, -4.2}, {12.0, 1.25, -4.2}, {7.2, 1.25, -4.2}, {2.4, 1.25, -4.2}, {-2.4, 1.25, -4.2}}
						local params={smooth=true, rotation={0, 180, 0}}
						--Place Unit Cards
						for a=gStates.totalUnitCount+1, gStates.totalUnitCount+2, 1 do
							params.position=unitPlace[a]
							getObjectFromGUID(getObjectFromGUID("4fa2f2").getObjects()[1].guid).takeObject(params)
						end
						broadcastToAll("Two more Regular units added to the Unit Offer for this round", {1,1,0.5})
					end
					--move selected skill
					getObjectFromGUID(skillGUID).setPositionSmooth(gStates.mageSkills[skillGUID])
					if gStates.motivationSkill[skillGUID]~=nil then
						gStates.motivationSkill[skillGUID].pos=gStates.skillButtons
						gStates.motivationSkill[skillGUID].state="active"
						mainUIUpdate("Skill Claimed")
					end
					break
				end
			end
			--move remaining skills down
			for skillGUID, skillPos in pairs(gStates.mageSkills) do
				if math.floor(buttonToXYZ[1])==math.floor(skillPos[1]) and skillPos[3]>buttonToXYZ[3] then
					gStates.mageSkills[skillGUID][3]=gStates.mageSkills[skillGUID][3]-1.35
					getObjectFromGUID(skillGUID).setPositionSmooth(gStates.mageSkills[skillGUID])
				end
			end
			--Lock Reward claim check button

			--limit advanced action selection if another players skill chosen

			--deploy a dummy skill for next level up.
			if gStates.playersRef==5 then
				local exist=0
				local dummyPos=0
				for a=1, #turnOrder, 1 do
					if turnOrder[a].mage==gStates.positionMageKnight[5] then dummyPos=a break end
				end
				for skillGUID, skillPos in pairs(gStates.mageSkills) do
					if math.floor(skillPos[1])==math.floor((turnOrder[dummyPos].seatPos*3.7)+7.3) then exist=exist+1 end
				end
				local pos={(turnOrder[dummyPos].seatPos*3.7)+7.3, 2.00, -23.95+(exist*1.35)}
				local b={}
				if getObjectFromGUID("219c37")~=nil then--use "all Skills" bag if it exists
					b=getObjectFromGUID("219c37").takeObject({position=pos, rotation={0, 180, 0}})
				else
					b=getObjectFromGUID(turnOrder[dummyPos].skillGUID).takeObject({position=pos, rotation={0, 180, 0}})
				end
				gStates.mageSkills[b.guid]=pos
			end
			--turn off skill claim buttons
			local found=false
			for a=1, #turnOrder, 1 do
				if turnOrder[a].seatPos==gStates.skillButtons and turnOrder[a].levelUp>0 then LevelUp(a) found=true end
			end
			if found==false then
				gStates.skillButtons=0
				Wait.frames(function()
					for skillGUID, x in pairs(gStates.mageSkills) do
						getObjectFromGUID(skillGUID).UI.setXmlTable({{}})
					end
				end, 1)
			end
		else
			if turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
				broadcastToAll("Dummy doesn't claim skill!", {1,0,0})
			end
		end
	end
end

--Removes all claim buttons and re-activates only buttons with cards
function claimButtonRefresh()
	--Remove buttons if dummy is choosing
	getObjectFromGUID("483ed5").UI.setXmlTable({{}})
	if gStates.tacticShown==false or turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
		for zoneGUID, cardSource in pairs(tacticClaimingZones) do
			local card=getObjectFromGUID(zoneGUID).getObjects()
			if #card>=1 then
				card[1].UI.setXmlTable({{}})
			end
		end
	end
	--Add buttons
	Wait.time(function()
		if gStates.tacticShown==true then
			--Tactic card claim buttons
			if turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
				getObjectFromGUID("483ed5").UI.setXmlTable({createClaimButton("483ed5", "tactic7")})
			else
				for zoneGUID, cardSource in pairs(tacticClaimingZones) do
					if cardSource:sub(1,6)=="tactic" then
						local card=getObjectFromGUID(zoneGUID).getObjects()
						if #card>=1 then
							card[1].UI.setXmlTable({createClaimButton(card[1].guid, cardSource)})
						end
					end
				end
			end
		end
		if gStates.tacticRemove==true then
			--Remove Tactic Claim Button
			if gStates.discardTactics==2 then
				getObjectFromGUID("483ed5").UI.setXmlTable({createClaimButton("483ed5", "removeTactic5")})
			else
				for zoneGUID, cardSource in pairs(tacticClaimingZones) do
					if cardSource:sub(1,6)=="tactic" then
						local cardSourceRemove="removeTactic"..cardSource:sub(7,8)
						local card=getObjectFromGUID(zoneGUID).getObjects()
						if #card>=1 then
							card[1].UI.setXmlTable({createClaimButton(card[1].guid, cardSourceRemove)})
						end
					end
				end
			end
		end
		if gStates.tacticRemove==false and gStates.tacticShown==false then
			for zoneGUID, cardSource in pairs(cardClaimingZones) do
				for _, card in pairs(getObjectFromGUID(zoneGUID).getObjects()) do
					if card.tag=="Card" then
						card.UI.setXmlTable({createClaimButton(card.guid, cardSource)})
					end
				end
			end
		end
	end, 0.3)
end

--Get's the dummy to pick a tactic card
function dummyTurn(player, mouseButton, id)
	if mouseButton=="-1" then
		if gStates.tacticShown==true then
			--pick a random tactic if they are displayed
			local dummyTactic=nil
			local found=false
			math.randomseed(os.time())
			while found==false do
				dummyTactic=math.random(1,6)
				if getObjectFromGUID(tacticZones[dummyTactic]).getObjects()[1]~=nil then
					if getObjectFromGUID(tacticZones[dummyTactic]).getObjects()[1].tag=="Tile" then found=true end
				end
			end
			local claimedCard=getObjectFromGUID(tacticZones[dummyTactic]).getObjects()
			broadcastToAll("Dummy RANDOMLY gained Tactic for "..turnOrder[gStates.turnNumber].mage, positionToColor(gStates.turnNumber))
			claimedCard[1].setPositionSmooth({getObjectFromGUID(dummyBoard).getPosition()[1], 3.0, getObjectFromGUID(dummyBoard).getPosition()[3]-5.17})
			turnOrder[gStates.turnNumber].tactic=dummyTactic
		end
		if gStates.tacticShown==false then
			--Draw Cards based on the crytal amount
			local cardDraw=3
			local volkareDrew={color="Blue", spell=2}--this will give Volkare a Frenzy result.
			local pass=1
			local dummyPos=nil
			function dummyDraw()
				local foundDeedDeck=nil
				local lastCard=nil
				for deck, search in pairs(getObjectFromGUID(deedDeckZones[dummyPos]).getObjects()) do
					if search.tag=="Deck" or search.tag=="Card" then foundDeedDeck=search break end
				end
				if foundDeedDeck~=nil then
					local destination=getObjectFromGUID(deedDeckDiscardZones[dummyPos]).getPosition()
					if foundDeedDeck.tag=="Deck" then
						for dummyDraw=1, cardDraw, 1 do
							lastCard=foundDeedDeck.takeObject({position={destination[1], destination[2]+(dummyDraw*1.5)+((pass-1)*4.5), destination[3]}, rotation={0, 180, 0}})
						end
					else
						if cardDraw>0 then
							foundDeedDeck.setPositionSmooth({destination[1], destination[2]+1.5+((pass-1)*4.5), destination[3]})
							foundDeedDeck.setRotationSmooth({0, 180, 0})
							lastCard=foundDeedDeck
						end
					end
				end
				if pass==1 and lastCard~=nil then
					local cardColor=lastCard.getDescription()
					if cardColor=="Red Green" then cardDraw=turnOrder[gStates.turnNumber].dummyCrystals["Red"]+turnOrder[gStates.turnNumber].dummyCrystals["Green"] end
					if cardColor=="Green Blue" then cardDraw=turnOrder[gStates.turnNumber].dummyCrystals["Green"]+turnOrder[gStates.turnNumber].dummyCrystals["Blue"] end
					if cardColor=="Blue White" then cardDraw=turnOrder[gStates.turnNumber].dummyCrystals["Blue"]+turnOrder[gStates.turnNumber].dummyCrystals["White"] end
					if cardColor=="White Red" then cardDraw=turnOrder[gStates.turnNumber].dummyCrystals["Red"]+turnOrder[gStates.turnNumber].dummyCrystals["White"] end
					if cardColor=="Red" or cardColor=="Green" or cardColor=="Blue" or cardColor=="White" then cardDraw=turnOrder[gStates.turnNumber].dummyCrystals[cardColor] volkareDrew.color=cardColor end
					if cardColor=="" then volkareDrew.color="Wound" end
					if lastCard.getName()~="Spell" then volkareDrew.spell=1 end
					return
				end
			end
			--draw cards for the standard dummy
			if gStates.positionMageKnight[5]~="Volkare" and gStates.endRoundCalled==false then
				--Count crystals in Inventory
				turnOrder[gStates.turnNumber].dummyCrystals["Red"]=0
				turnOrder[gStates.turnNumber].dummyCrystals["White"]=0
				turnOrder[gStates.turnNumber].dummyCrystals["Green"]=0
				turnOrder[gStates.turnNumber].dummyCrystals["Blue"]=0
				for a, b in pairs(getObjectFromGUID(playerCrystalAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					if b.getName()=="Red Mana" or b.getName()=="Blue Mana" or b.getName()=="Green Mana" or b.getName()=="White Mana" then
						turnOrder[gStates.turnNumber].dummyCrystals[b.getDescription()]=turnOrder[gStates.turnNumber].dummyCrystals[b.getDescription()]+1
					end
				end
				dummyPos=turnOrder[gStates.turnNumber].seatPos
				dummyDraw()
				Wait.time(function()
					pass=pass+1
					dummyDraw()
				end, 1.5)
			end
			--draw card for Volkare and process him
			if gStates.positionMageKnight[5]=="Volkare" and gStates.endRoundCalled==false and gStates.volkareStart==true then
				local blurb=""
				if getObjectFromGUID("09a991").is_face_down==false then
					--draw a card if one exists
					dummyPos=turnOrder[gStates.turnNumber].seatPos
					cardDraw=1
					dummyDraw()
					--wound card will roll and remove unit
					if volkareDrew.color=="Wound" then
						blurb="Volkare rests this turn, "
						--roll volkares duce and read result
						local volkareDice=getObjectFromGUID("9a686a")
						volkareDice.randomize()
						Wait.condition(function()
							if gStates.volkareUnitCrystals[volkareDice.getRotationValue()]~=nil and getObjectFromGUID(gStates.volkareUnitCrystals[volkareDice.getRotationValue()]).getObjects()[1]~=nil then
								local unitCard=getObjectFromGUID(gStates.volkareUnitCrystals[volkareDice.getRotationValue()]).getObjects()[1]
								unitCard.destruct()
								--add a gray unit to Volkare's Army
								if gStates.gameScenario~="Volkare's Quest" then
									blurb=blurb.."and removes the "..gameCards[unitCard.guid].name.." to recruit another unit to his army."
									local params={position={0, 0, 0}, rotation={0, 180, 180}}
								 	params.position[1]=getObjectFromGUID(dummyBoard).getPosition()[1]+5.1+(0.2*gStates.volkareRecruit)
								 	params.position[2]=getObjectFromGUID(dummyBoard).getPosition()[2]+1.0+(0.2*gStates.volkareRecruit)
								 	params.position[3]=getObjectFromGUID(dummyBoard).getPosition()[3]+1.9+(0.2*gStates.volkareRecruit)
									gStates.volkareRecruit=gStates.volkareRecruit+1
								 	local monster=getObjectFromGUID(monsterPiles.gray).takeObject(params)
								 	gStates.monsterPlayLocation[monster.guid]={params.position[1], params.position[2], params.position[3]}
								else
									blurb=blurb.."and intimadtes the "..gameCards[unitCard.guid].name.." to flee the area."
								end
							else
								blurb=blurb.."and has no affect on the units."
							end
							UI.setAttribute("DummyNotes", "Text", blurb)
						end, function() return volkareDice.resting end)
					end
					--Any other card
					if volkareDrew.color~="Wound" then
						local volkareVector={	["Volkare's Return"]=		{["White"]=240, ["Blue"]=180, 	["Green"]=120},
												["Volkare's Return Blitz"]=	{["White"]=240, ["Blue"]=180, 	["Green"]=120},
												["Volkare's Quest"]=		{["White"]=60, 	["Blue"]=60, 	["Green"]=0}}
						--re roll mana of same colour, gold can be chosen if day and the colour does not exist
						local found=false
						local remember=nil
						for a, diceObj in pairs(getObjectFromGUID("2cd825").getObjects()) do
							if diceObj.tag=="Dice" and diceObj.getRotationValue()==volkareDrew.color.." Mana" then
								diceObj.randomize()
								found=true
								break
							end
							if diceObj.tag=="Dice" and diceObj.getRotationValue()=="Gold Mana" then remember=diceObj.guid end
						end
						if found==false and remember~=nil and gStates.dayRound==true then
							getObjectFromGUID(remember).randomize()
							found=true
						end
						if found==true then blurb=", and re-rolled a Mana Die." else blurb="." end

						--move Volkare's figure
						if gStates.gameScenario~="Volkare's Quest" and gStates.cityRevealed.model~=nil and volkareDrew.color=="Red" then volkareDrew.color="Blue" end
						if volkareDrew.color=="Green" or volkareDrew.color=="Blue" or volkareDrew.color=="White" then
							local volkarePOS=getObjectFromGUID(gStates.volkareModel).getPosition()
							--Blurb Update
							local cityDistance=50
							if gStates.cityRevealed.model~=nil then cityDistance=math.sqrt(((volkarePOS[1]-getObjectFromGUID(gStates.cityRevealed.model).getPosition()[1])^2)+((volkarePOS[3]-getObjectFromGUID(gStates.cityRevealed.model).getPosition()[3])^2)) end
							if volkareDrew.spell==1 then
								if gStates.cityRevealed.model==nil or gStates.gameScenario=="Volkare's Quest" then blurb="Volkare moved in the "..volkareDrew.color.." direction"..blurb end
								if gStates.cityRevealed.model~=nil and gStates.gameScenario~="Volkare's Quest" then
									if cityDistance>2.5 then blurb="Volkare moved towards the city"..blurb end
								end
							else
								if gStates.cityRevealed.model==nil or gStates.gameScenario=="Volkare's Quest" then blurb="Volkare moved twice in the "..volkareDrew.color.." direction"..blurb end
								if gStates.cityRevealed.model~=nil and gStates.gameScenario~="Volkare's Quest" then
									if cityDistance>5 then blurb="Volkare moved twice towards the city"..blurb end
							 	end
							end

							local terrainPlayed=false
							--Add terrain tile if Volkare's return scenario if location is Empty and no city is revealed
							if gStates.cityRevealed.model==nil and gStates.gameScenario~="Volkare's Quest" then
								local terrainSpots={{-36.0305, 1.0, -11.9267}, 	{-30.0303, 1.0, -14.0000}, 	{-24.0301, 1.0, -16.0837}, 	{-37.2305, 1.0,  -5.6911},
													{-31.2303, 1.0,  -7.7696}, 	{-25.2302, 1.0,  -9.8482}, 	{-19.2300, 1.0, -11.9267},	{-32.4304, 1.0,  -1.5341},
													{-26.4302, 1.0,  -3.6126}, 	{-20.4300, 1.0,  -5.6911}, 	{-14.4298, 1.0,  -7.7696},	{-27.6302, 1.0,   2.6230},
													{-21.6300, 1.0,   0.5445}, 	{-15.6299, 1.0,  -1.5341},	{ -9.6297, 1.0,  -3.6126}, 	{-22.8301, 1.0,   6.7800},
													{-16.8299, 1.0,   4.7015},	{-10.8297, 1.0,   2.6230}, 	{ -4.8295, 1.0,   0.5445},	{-18.0299, 1.0,  10.9371},
													{-12.0297, 1.0,   8.8586}, 	{ -6.0278, 1.0,   6.7794}, 	{ -0.0294, 1.0,   4.7015},	{-13.2298, 1.0,  15.0941},
													{ -7.2296, 1.0,  13.0156}, 	{ -1.2294, 1.0,  10.9371}, 	{  4.7708, 1.0,   8.8586}}
								local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
								local found=false
								local volkareProjPos={volkarePOS[1]-(2.39*volkareDrew.spell*math.cos(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color]))), 3.5, volkarePOS[3]-(2.39*volkareDrew.spell*math.sin(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color])))}
								for a, terTile in pairs(objectsInPlay) do
									if terrainTiles[terTile.guid]~=nil then
										if math.sqrt(((volkareProjPos[1]-terTile.getPosition()[1])^2)+((volkareProjPos[3]-terTile.getPosition()[3])^2))<3.1 then
											found=true
										end
									end
								end
								if found==false and terrainPlayed==false then
									for a, terTile in pairs(terrainSpots) do
										if math.sqrt(((volkareProjPos[1]-terTile.getPosition()[1])^2)+((volkareProjPos[3]-terTile.getPosition()[3])^2))<3.1 then
											local newtile=getObjectFromGUID("966e0e").takeObject({position=terTile, smooth=true})
											found=true
											terrainPlayed=true
											blurb=blurb.." New Terrain explored."
											Wait.frames(function()
												Wait.condition(function()
													newtile.flip()
												end, function() return newtile.resting end)
											end, 20)
											break
										end
									end
								end
							end

							--Combat note
							if (gStates.cityRevealed.model~=nil and gStates.gameScenario~="Volkare's Quest" and ((cityDistance>2.5 and volkareDrew.spell==1) or (cityDistance>5 and volkareDrew.spell==2)))
								or gStates.gameScenario=="Volkare's Quest" or (gStates.cityRevealed.model==nil and terrainPlayed==false) or (cityDistance>5 and volkareDrew.spell==2) then
								if gStates.playerCount>1 then blurb=blurb.."\n\nIf he is on, or crossed a Mage Knight, combat was initiated."
								else blurb=blurb.."\n\nIf he is on, or crossed over you, combat was initiated." end
								if gStates.gameScenario=="Volkare's Quest" then blurb=blurb.." Defeating at least "..(gStates.playerCount*2).." of his army before his next turn will force him to skip the turn." end
							end

							local wait=0
							if terrainPlayed==true then wait=200 end
							local pass=0
							local doubleAttack=false
							for z=1, volkareDrew.spell, 1 do
								Wait.frames(function()
									Wait.condition(function()
										pass=pass+1
										--check he won't move out of bounds and alter his course
										volkarePOS=getObjectFromGUID(gStates.volkareModel).getPosition()
										local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
										local found=false
										local volkareProjPos={volkarePOS[1]-(2.39*math.cos(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color]))), 3.5, volkarePOS[3]-(2.39*math.sin(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color])))}
										for a, terTile in pairs(objectsInPlay) do
											local tilePos=terTile.getPosition()
											if terrainTiles[terTile.guid]~=nil then
												if math.sqrt(((volkareProjPos[1]-tilePos[1])^2)+((volkareProjPos[3]-tilePos[3])^2))<3.1 then
													found=true
												end
											end
										end
										if found==false and gStates.gameScenario~="Volkare's Quest" and gStates.cityRevealed.model~=nil and (volkareDrew.color=="White" or volkareDrew.color=="Green") then volkareDrew.color="Blue" end
										if found==false and gStates.gameScenario=="Volkare's Quest" and (volkareDrew.color=="White" or volkareDrew.color=="Blue") then volkareDrew.color="Green" end
										if found==false and gStates.gameScenario=="Volkare's Quest" and volkareDrew.color=="Green" then volkareDrew.color="Blue" end

										--change vector to move closer to the city
										if gStates.cityRevealed.model~=nil and gStates.gameScenario~="Volkare's Quest" then
											local cityPos=getObjectFromGUID(gStates.cityRevealed.model).getPosition()
											getObjectFromGUID(gStates.volkareModel).setDecals({})
											--stops automation next to city
											if math.sqrt(((volkarePOS[1]-cityPos[1])^2)+((volkarePOS[3]-cityPos[3])^2))<2.5 then
												--check if city is beat by player or end game
												cityBeatCheck()
												if gStates.defeatedCities==0 then
													blurb="Volkare has been welcomed in by the City, making him unbeatable.\n\nYou have Lost."
													gStates.volkareWon=true
												else
													--check if player is there defending or end game
													local cityZone={["6079bc"]="8a7266", ["d0acb2"]="648da8", ["34e3e4"]="213d78", ["156b6a"]="d2d65e"}
													local playerDefending=false
													for a, obj in pairs(getObjectFromGUID(cityZone[gStates.cityRevealed.model]).getObjects()) do
														for b, mage in pairs(mageKnights) do
															if obj.guid==mage.model or obj.guid==mage.token or obj.guid==mage.standee then playerDefending=true end
														end
													end
													if playerDefending==true then
														if (volkareDrew.spell==2 and pass==2) or volkareDrew.spell==1 then
															if volkareDrew.spell==1 or (volkareDrew.spell==2 and doubleAttack==false) then
																blurb="Volkare Attacks the City"..blurb.." If you kill at least "..gStates.playerCount.." of Volkare's army, move Volkare back one space.\nOtherwise you have Lost"
															end
															if volkareDrew.spell==2 and doubleAttack==true then
																blurb="Volkare Attacks the City"..blurb.." If you kill at least "..gStates.playerCount.." of Volkare's army, Volkare stays where he is.\nOtherwise you have Lost"
															end
														end
														doubleAttack=true
													else
														--check if this is Volkare's second attack or end game
														if gStates.volkareRaisedCity==true then
															blurb="Volkare has conquered the city.\n\nYou have Lost."
															gStates.volkareWon=true
														else
															if (volkareDrew.spell==2 and pass==2) or volkareDrew.spell==1 then	blurb="Volkare has raised the city\n(it provides no Interaction or Hand Size bonus from now on)"..blurb end
															--set the terain hex database to raised
															terrainTiles[gStates.cityRevealed.terrain].hexFeature.center="raised"
															gStates.hexOverideSave[gStates.cityRevealed.terrain]={center="raised"}
															--mark city card as raised.
															getObjectFromGUID(cityScriptZones[cityZone[gStates.cityRevealed.model]].cityCard).setDescription("Raised City - Provides no Interaction")
															getObjectFromGUID(cityScriptZones[cityZone[gStates.cityRevealed.model]].cityCard).addDecal({name="City Raised", url="http://cloud-3.steamusercontent.com/ugc/938341811903683200/0910E72610C36BACDEF44CB3BA2A909BA4AFC12E/",
																position={0.0, 0.5, 0.0}, rotation={90.0, 180.0, 0.0}, scale={1, 2, 2}})
															gStates.volkareRaisedCity=true
														end
													end
												end
												if (volkareDrew.spell==2 and pass==2) or volkareDrew.spell==1 then
													UI.setAttribute("DummyNotes", "Text", blurb)
													mainUIUpdate("Volkare Beat City")
												end
												return
											end
											--chooses a proper bearing
											local cityBearing=math.floor((math.deg(math.atan2(volkarePOS[3]-cityPos[3], volkarePOS[1]-cityPos[1]))/5)+0.5)*5
											if cityBearing>=360 then cityBearing=cityBearing-360 end
											if cityBearing<0 then cityBearing=cityBearing+360 end
											if cityBearing<60  then if volkareDrew.color=="White" then cityBearing=0 else cityBearing=60  end end
											if cityBearing>300 then if volkareDrew.color=="Green" then cityBearing=0 else cityBearing=300 end end
											if cityBearing>60  and cityBearing<120 then cityBearing=120 end
											if cityBearing>240 and cityBearing<300 then cityBearing=240 end
											if cityBearing>120 and cityBearing<180 then if volkareDrew.color=="Green" then cityBearing=120 else cityBearing=180 end end
											if cityBearing>180 and cityBearing<240 then if volkareDrew.color=="White" then cityBearing=240 else cityBearing=180 end	end
											volkareVector[gStates.gameScenario][volkareDrew.color]=cityBearing
										end

										--one hex away from portal always goes to portal
										local portalPos=getObjectFromGUID("5d0bac").getPosition()
										local volkareToPortalDist=math.sqrt(((volkarePOS[1]-portalPos[1])^2)+((volkarePOS[3]-portalPos[3])^2))
										if gStates.gameScenario=="Volkare's Quest" and volkareToPortalDist<2.5 then
											--stops automation when on portal need to inititiate a game over.
											if volkareToPortalDist<0.5 then
												gStates.volkareWon=true
												blurb="Volkare passed through the Portal. His unknowable intentions achieved.\n\nYou have Lost."
												UI.setAttribute("DummyNotes", "Text", blurb)
												mainUIUpdate("Volkare entered portal")
												return
											end
											--find the portal bearing
											local portalBearing=math.floor((math.deg(math.atan2(volkarePOS[3]-portalPos[3], volkarePOS[1]-portalPos[1]))/5)+0.5)*5
											if portalBearing>=360 then portalBearing=portalBearing-360 end
											if portalBearing<0 then portalBearing=portalBearing+360 end
											volkareVector[gStates.gameScenario][volkareDrew.color]=portalBearing
										end

										--white green and blue card will move volkare (Red also when city revealed)
										local volkareNewPos={volkarePOS[1]-(2.39*math.cos(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color]))), 3.5, volkarePOS[3]-(2.39*math.sin(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color])))}
										getObjectFromGUID(gStates.volkareModel).setPositionSmooth(volkareNewPos)
										local arrow=getObjectFromGUID("6647eb").clone({position={volkarePOS[1]-(1.1*math.cos(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color]))), 1.11, volkarePOS[3]-(1.1*math.sin(math.rad(volkareVector[gStates.gameScenario][volkareDrew.color])))}})
										local convert={[0]=270, [60]=210, [120]=150, [180]=90, [240]=30, [300]=330}
										arrow.setRotation({90.00, convert[volkareVector[gStates.gameScenario][volkareDrew.color]], 0.00})
										arrow.setColorTint(volkareDrew.color)
										Wait.frames(function() arrow.lock() end, 50)
										--initiate fight if location has mage knights, Mage knights allways retreat

										--remove Guide Arrows
										if gStates.gameScenario=="Volkare's Quest" and math.sqrt(((volkareNewPos[1]-portalPos[1])^2)+((volkareNewPos[3]-portalPos[3])^2))<2.5 then
											getObjectFromGUID(gStates.volkareModel).setDecals({})
										end
										if (volkareDrew.spell==2 and pass==2) or volkareDrew.spell==1 then UI.setAttribute("DummyNotes", "Text", blurb) end
									end, function() return getObjectFromGUID(gStates.volkareModel).resting end)
								end, wait+(50*(z-1)))
							end
						end

						--red card will initiate fight with avatars
						if volkareDrew.color=="Red" then
							if volkareDrew.spell==1 then
								if gStates.playerCount>1 then blurb="Volkare attacks the Mage Knight with the highest fame one space from him"..blurb
								else blurb="Volkare attacks you if you are one space from him"..blurb end
							else
								if gStates.playerCount>1 then blurb="Volkare attacks the Mage Knight with the highest fame within two spaces from him"..blurb
								else blurb="Volkare attacks you if you are within two spaces of him"..blurb end
							end
							UI.setAttribute("DummyNotes", "Text", blurb)
						end
					end
				else
					getObjectFromGUID("09a991").flip()
					blurb="Volkare lost at least "..(gStates.playerCount*2).." tokens from his Army, so misses a turn"
					UI.setAttribute("DummyNotes", "Text", blurb)
				end
				gStates.volkareArmyDefeated=0
				gStates.volkareStart=false
				return

			end

		end
		gStates.volkareStart=true
		incrementTurn()
	end
end

--give mana token if starting on a Glade
function startOfTurn()
	--Records current amount of discarded cards
	turnOrder[gStates.turnNumber].discardCount=0
	for a, b in pairs(getObjectFromGUID(deedDeckDiscardZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
		if b.tag=="Card" then turnOrder[gStates.turnNumber].discardCount=turnOrder[gStates.turnNumber].discardCount+1 end
		if b.tag=="Deck" then turnOrder[gStates.turnNumber].discardCount=turnOrder[gStates.turnNumber].discardCount+b.getQuantity() end
	end

	--remove the manual increase to hand size
	turnOrder[gStates.turnNumber].handBonus=0

	--record abatar start location
	for b, details in pairs(mageKnights) do
		if details.mage==turnOrder[gStates.turnNumber].mage then
			if getObjectFromGUID(details.model)~=nil then turnOrder[gStates.turnNumber].turnStartLoc=getObjectFromGUID(details.model).getPosition() end
			if getObjectFromGUID(details.token)~=nil then turnOrder[gStates.turnNumber].turnStartLoc=getObjectFromGUID(details.token).getPosition() end
			if getObjectFromGUID(details.standee)~=nil then turnOrder[gStates.turnNumber].turnStartLoc=getObjectFromGUID(details.standee).getPosition() end
		end
	end

	--Gain mana from glade
	if turnOrder[gStates.turnNumber].avatarLocation=="glade" or turnOrder[gStates.turnNumber].avatarLocation=="graveyard"
	 	or turnOrder[gStates.turnNumber].avatarLocation=="hidden valley"or turnOrder[gStates.turnNumber].avatarLocation=="necropolis" then
		--check if glade is conquered
		local gladeOpen=true
		if gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="Life and Death"
			and (turnOrder[gStates.turnNumber].avatarLocation=="glade" or turnOrder[gStates.turnNumber].avatarLocation=="graveyard") then
			gladeOpen=false
			--find avatar locations
			local avatarLocation={}
			for a, avatar in pairs(mageKnights) do
				if avatar.mage==turnOrder[gStates.turnNumber].mage then
					if getObjectFromGUID(avatar.model)~=nil then avatarLocation=getObjectFromGUID(avatar.model).getPosition() break end
					if getObjectFromGUID(avatar.token)~=nil then avatarLocation=getObjectFromGUID(avatar.token).getPosition() break end
					if getObjectFromGUID(avatar.standee)~=nil then avatarLocation=getObjectFromGUID(avatar.standee).getPosition() break end
				end
			end
			--compare location to shields
			local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
			table.sort(objectsInPlay, function (k1, k2) return k1.getPosition()[2]>k2.getPosition()[2] end)
			for a, obj in pairs(objectsInPlay) do
				if obj.getName()=="Shield" then
					if math.sqrt(((obj.getPosition()[1]-avatarLocation[1])^2)+((obj.getPosition()[3]-avatarLocation[3])^2))<1 then
						gladeOpen=true
						break
					end
				end
			end
		end
		if gladeOpen==true then
			local params={position={(turnOrder[gStates.turnNumber].seatPos*40)-103, 1.65, -39}, rotation={0, 0, 0}, smooth=false}
			if gStates.dayRound==true and turnOrder[gStates.turnNumber].avatarLocation~="graveyard" and turnOrder[gStates.turnNumber].avatarLocation~="necropolis" then
				getObjectFromGUID("4a836f").takeObject(params)
				broadcastToAll(turnOrder[gStates.turnNumber].mage.." gained a Gold Mana Token from the Magical Glade", positionToColor(gStates.turnNumber))
			end
			if gStates.dayRound==false then
				getObjectFromGUID("74d666").takeObject(params)
				if turnOrder[gStates.turnNumber].avatarLocation~="graveyard" and turnOrder[gStates.turnNumber].avatarLocation~="necropolis" then
					broadcastToAll(turnOrder[gStates.turnNumber].mage.." gained a Black Mana Token from the Magical Glade", positionToColor(gStates.turnNumber))
				else
					broadcastToAll(turnOrder[gStates.turnNumber].mage.." gained a Black Mana Token from the Graveyard", positionToColor(gStates.turnNumber))
				end
			end
		end
	end
end

--Clears a players board area and Asks if rewards are claimed
function PreEndTurn(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
			if gStates.skillButtons==0 then
				--reset variables for next turn
				gStates.preEndTurn=true
				gStates.monsterOffsetZ=0
				turnOrder[gStates.turnNumber].combatIconHide="Both"
				addAvatarButtons()

				--flip Day tactic six if using the second turn.
				if id=="ExtraTurnTacticButton" then gStates.tacticSixState="Started" getObjectFromGUID("2404f1").setRotationSmooth({0.00, 180.00, 180.00}) end

				--flip turn order token
				if getObjectFromGUID(turnOrder[gStates.turnNumber].turnOrderTokenGUID).is_face_down==true then
					getObjectFromGUID(turnOrder[gStates.turnNumber].turnOrderTokenGUID).flip()
					broadcastToAll(turnOrder[gStates.turnNumber].mage.."'s Turn order token flipped back upright.", positionToColor(gStates.turnNumber))
				end

				--Disable Day Tactic 2 after first turn
				if gStates.dayRound==true and turnOrder[gStates.turnNumber].tactic==2 and gStates.tacticTwoState~="Used" then
					gStates.tacticTwoState="Used"
					if getObjectFromGUID("a000a4")~=nil then getObjectFromGUID("a000a4").Call("buttonActivate") end--activate Day Tactic 2 buttons
					if getObjectFromGUID("a000a4").is_face_down==false then getObjectFromGUID("a000a4").flip() end
				end

				--lift player Avatar for token to go under
				if (turnOrder[gStates.turnNumber].avatarLocation=="mine" and gStates.gameScenario=="Mines Liberation")
					or (turnOrder[gStates.turnNumber].avatarLocation=="city" and gStates.gameScenario=="The Lost Relic Blitz")
					or turnOrder[gStates.turnNumber].avatarLocation=="keep"
					or turnOrder[gStates.turnNumber].avatarLocation=="mage tower"
					or turnOrder[gStates.turnNumber].avatarLocation=="ruin"
					or turnOrder[gStates.turnNumber].avatarLocation=="monster den"
					or turnOrder[gStates.turnNumber].avatarLocation=="spawning grounds" then
					for a, b in pairs(mageKnights) do
						if b.mage==turnOrder[gStates.turnNumber].mage then
							if getObjectFromGUID(b.model)~=nil then getObjectFromGUID(b.model).setPosition({getObjectFromGUID(b.model).getPosition()[1], getObjectFromGUID(b.model).getPosition()[2]+3, getObjectFromGUID(b.model).getPosition()[3]}) getObjectFromGUID(b.model).lock() end
							if getObjectFromGUID(b.token)~=nil then getObjectFromGUID(b.token).setPosition({getObjectFromGUID(b.token).getPosition()[1], getObjectFromGUID(b.token).getPosition()[2]+3, getObjectFromGUID(b.token).getPosition()[3]}) getObjectFromGUID(b.token).lock() end
							if getObjectFromGUID(b.standee)~=nil then getObjectFromGUID(b.standee).setPosition({getObjectFromGUID(b.standee).getPosition()[1], getObjectFromGUID(b.standee).getPosition()[2]+3, getObjectFromGUID(b.standee).getPosition()[3]}) getObjectFromGUID(b.standee).lock() end
							break
						end
					end
				end

				--Drop Avatar after a pause
				Wait.frames(function()
					for a, b in pairs(mageKnights) do
						if getObjectFromGUID(b.model)~=nil then getObjectFromGUID(b.model).setLock(false) getObjectFromGUID(b.model).addForce({0, -1, 0}) end
						if getObjectFromGUID(b.token)~=nil then getObjectFromGUID(b.token).setLock(false) end
						if getObjectFromGUID(b.standee)~=nil then getObjectFromGUID(b.standee).setLock(false) end
					end
				end, 100)

				--return dice function needed twice
				function returnDice(diceGUID)
					--make sure the turn order token is face up
					local found=false
					for a=1, #turnOrder, 1 do
						if getObjectFromGUID(turnOrder[a].turnOrderTokenGUID).is_face_down==true then
							found=true
						end
					end
					--return dice if alowed
					if found==false then
						getObjectFromGUID(diceGUID).setPosition({-12.5+(math.random()*7), 2, -25.0+(math.random()*4.0)})
						getObjectFromGUID(diceGUID).randomize()
					end
				end

				--locate discard deck
				local cardDestination=nil
				for a, b in pairs(getObjectFromGUID(deedDeckDiscardZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					if b.tag=="Card" or b.tag=="Deck" then cardDestination=b break end
				end

				--Get objects from player area to clean them up
				local objectAvoidance=1
				local volkareCityShield=0
				for a, playAreaObj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					--Return any Mana dice
					if playAreaObj.tag=="Dice" then
						returnDice(playAreaObj.guid)
					end

					--Delete wound tokens
					if playAreaObj.getName()=="Unit Wound" then playAreaObj.destruct() end

					--move volkare reminder to next player
					if playAreaObj.getName()=="Volkare Reminder Token" and getObjectFromGUID(turnOrder[nextTurn()].turnOrderTokenGUID).is_face_down==true then
						playAreaObj.setPositionSmooth({turnOrder[nextTurn()].seatPos*40-100, 1.5, -39.41})
					end
					if playAreaObj.getName()=="Volkare Reminder Token" and getObjectFromGUID(turnOrder[nextTurn()].turnOrderTokenGUID).is_face_down==false then playAreaObj.destruct() end

					--Mark mine monster as defeated
					for terrainguid, monsters in pairs(gStates.mineMonsterQty) do
						if monsters[playAreaObj.guid]~="nil" then
							monsters[playAreaObj.guid]="dead"
							break
						end
					end

					--Return undefeated face down tokens
					if monsterPugs[playAreaObj.guid]~=nil and playAreaObj.is_face_down==true then
						if gStates.monsterPlayLocation[playAreaObj.guid]==nil then
							if gStates.summonStates[playAreaObj.guid]~="summoned" and (turnOrder[gStates.turnNumber].avatarLocation=="monster den" or turnOrder[gStates.turnNumber].avatarLocation=="spawning grounds" or turnOrder[gStates.turnNumber].avatarLocation=="ruin") then
								for c=1, #mageKnights,1 do
									if mageKnights[c].mage==turnOrder[gStates.turnNumber].mage then
										if getObjectFromGUID(mageKnights[c].model)~=nil then params={position=getObjectFromGUID(mageKnights[c].model).getPosition()} end
										if getObjectFromGUID(mageKnights[c].standee)~=nil then params={position=getObjectFromGUID(mageKnights[c].standee).getPosition()} end
										if getObjectFromGUID(mageKnights[c].token)~=nil then params={position=getObjectFromGUID(mageKnights[c].token).getPosition()} end
										gStates.monsterPlayLocation[playAreaObj.guid]={params.position[1], params.position[2], params.position[3]}
										break
									end
								end
							end
						end
						if gStates.monsterPlayLocation[playAreaObj.guid]~=nil then
							if gStates.pursuing[turnOrder[gStates.turnNumber].mage][playAreaObj.guid]==nil then
								Wait.frames(function() playAreaObj.setRotationSmooth({0, 180, 0}) end, 5)
							else
								gStates.pursuing[turnOrder[gStates.turnNumber].mage][playAreaObj.guid].state="Stunned"
								broadcastToAll(turnOrder[gStates.turnNumber].mage.." Stunned the Pursuing Rampager (Skips next turns Movement)", positionToColor(gStates.turnNumber))
							end
							if getObjectFromGUID(turnOrder[nextTurn()].turnOrderTokenGUID).is_face_down==true and playAreaObj.getRotationValues()[2]==nil then
								--Move to next players play area.
								playAreaObj.setPositionSmooth({turnOrder[nextTurn()].seatPos*40-100, 1.5, -39.41})
							else
								playAreaObj.setPositionSmooth(gStates.monsterPlayLocation[playAreaObj.guid])
							end
						end
					end

					function discardMonster(playAreaObj, giveRewards)
						local tokens=	{"Dark Crusader Draconum", "9860ce", "Dark Crusader Dungeon Monster", "e9b18c", "Marauding Dark Crusader", "61ba30"	--Dark Crusader Pugs
									,"Elementalist Draconum", "80c10d", "Elementalist Dungeon Monster", "236555", "Marauding Elementalist", "4aecb4"	--Elementalist Faction
									,"Draconum", "b23c77", "Dungeon Monster", "763c2d", "Marauding Orcs", "ed0ec9", "City Garrison", "730898", "Ruin", "869a0f", "Mage Tower Garrison", "6ae8c3", "Keep Garrison", "b336a7"}--General Pug
						for x=1, #tokens, 2 do
							if playAreaObj.getRotationValues()[2].value==tokens[x] then
								playAreaObj.setRotationSmooth({0, 180, 0})
								local params={}
								if getObjectFromGUID(tokens[x+1])~=nil then
									params={position=getObjectFromGUID(tokens[x+1]).getPosition()}
								end
								if x<=6 then
									if gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Realm of the Dead Blitz" then
										params={position=getObjectFromGUID(tokens[x+13]).getPosition()}
									end
									--Put Dark Crusader reward in player inventory
									if giveRewards==true and getObjectFromGUID("f469f4")~=nil and gStates.summonStates[playAreaObj.guid]~="summoned" then--Dark reward pile
										getObjectFromGUID("f469f4").takeObject({position={(turnOrder[gStates.turnNumber].seatPos*40)-117.2+(math.random()*6.5), 2, -35+(math.random()*3.2)}})
									end
								end
								if x>=7 and x<=12 then
									if gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Hidden Valley Blitz" then
										params={position=getObjectFromGUID(tokens[x+7]).getPosition()}
									end
									--Put Elementalist reward in player inventory
									if giveRewards==true and getObjectFromGUID("33de41")~=nil and gStates.summonStates[playAreaObj.guid]~="summoned" then--Dark reward pile
										getObjectFromGUID("33de41").takeObject({position={(turnOrder[gStates.turnNumber].seatPos*40)-117.2+(math.random()*6.5), 2, -35+(math.random()*3.2)}})
									end
								end
								--mark city monsters defeated
								for cityguid, monsters in pairs(gStates.cityMonsterQty) do
									if monsters[playAreaObj.guid]~=nil then
										--mark monster dead
										monsters[playAreaObj.guid]="dead"
										--drop shield
										local cityZone={["6079bc"]="8a7266", ["d0acb2"]="648da8", ["34e3e4"]="213d78", ["156b6a"]="d2d65e", ["a7d898"]="48f2f1"}
										if cityZone[cityguid]~=nil then
											local location={getObjectFromGUID(cityZone[cityguid]).getPosition()[1]+(-2+monsters.shieldsThere), 1.13, getObjectFromGUID(cityZone[cityguid]).getPosition()[3]+1}
											--Volkares camp gives only half shields to green and gray rounded down.
											if cityguid=="a7d898" and (monsterPugs[playAreaObj.guid].pugType=="green" or monsterPugs[playAreaObj.guid].pugType=="gray") then
												volkareCityShield=volkareCityShield+0.5
											end
											if cityguid~="a7d898" or (cityguid=="a7d898" and (monsterPugs[playAreaObj.guid].pugType=="red" or monsterPugs[playAreaObj.guid].pugType=="white")) or volkareCityShield==1 then
												if volkareCityShield==1 then volkareCityShield=0 end
												monsters.shieldsThere=monsters.shieldsThere+1
												dropShield(location)
											end
											--count volkares army defeat
											if gStates.gameScenario=="Volkare's Quest" then
												if cityguid==volkare.model then gStates.volkareArmyDefeated=gStates.volkareArmyDefeated+1 end
												if gStates.volkareArmyDefeated>=(gStates.playerCount*2) and getObjectFromGUID("09a991").is_face_down==false then getObjectFromGUID("09a991").flip() end
											end
										end
										break
									end
								end
								params.position.y=1.3+(0.3*objectAvoidance)
								objectAvoidance=objectAvoidance+1
								playAreaObj.setPositionSmooth(params.position)
								break
							end
						end
					end

					--Process and Discard Face up monsters
					if monsterPugs[playAreaObj.guid]~=nil and (playAreaObj.is_face_down==false or gStates.monsterPlayLocation[playAreaObj.guid]==nil) then
						if playAreaObj.getRotationValues()[2]~=nil then
							discardMonster(playAreaObj, true)
						else--process leaders
							local currenLeader=elementalist
							if playAreaObj.guid==darkCrusader.token then currenLeader=darkCrusader end
							--drop shield(s) on leader disc
							for b=1, gStates.leaderOverkill, 1 do
								local obj=getObjectFromGUID(currenLeader.disc)
								local hexRotationRad=math.rad(-1*(-120+tonumber(30*(gStates.elementalistLevel-gStates.leaderReduction-(b-1)))))
								if playAreaObj.guid==darkCrusader.token then hexRotationRad=math.rad(-1*(-120+tonumber(30*(gStates.darkCrusaderLevel-gStates.leaderReduction-(b-1))))) end
								local location={obj.getPosition()[1]+(math.cos(hexRotationRad)*2.9), 2+(b*1.5), obj.getPosition()[3]+(math.sin(hexRotationRad)*2.9)}
								dropShield(location)
							end
							--reduce level
							gStates.leaderReduction=gStates.leaderReduction+gStates.leaderOverkill
							gStates.leaderOverkill=1
							if getObjectFromGUID(turnOrder[nextTurn()].turnOrderTokenGUID).is_face_down==true then
								--Move to next players play area.
								playAreaObj.setPositionSmooth({turnOrder[nextTurn()].seatPos*40-100, 1.5, -39.41})
							else--combat with leader is over.
								local currenLeaderLevel=0
								if playAreaObj.guid==darkCrusader.token then gStates.darkCrusaderLevel=gStates.darkCrusaderLevel-gStates.leaderReduction currenLeaderLevel=gStates.darkCrusaderLevel end
								if playAreaObj.guid==elementalist.token then gStates.elementalistLevel=gStates.elementalistLevel-gStates.leaderReduction currenLeaderLevel=gStates.elementalistLevel end
								gStates.leaderReduction=0
								if (gStates.darkCrusaderLevel==0 and playAreaObj.guid==darkCrusader.token) or
									(gStates.elementalistLevel==0 and playAreaObj.guid==elementalist.token) then
									playAreaObj.destruct()
									gStates.cityMonsterQty[currenLeader.terrainHex][currenLeader.token]="dead"
									getObjectFromGUID(currenLeader.disc).setCustomObject({image=leaderData[currenLeader.terrainHex]["dead"].discImg})
									getObjectFromGUID(currenLeader.disc).reload()
									Wait.frames(function()
										for monsterGUID, state in pairs(gStates.cityMonsterQty[currenLeader.terrainHex]) do
											if getObjectFromGUID(monsterGUID)~=nil and getObjectFromGUID(monsterGUID).getRotationValues()[2]~=nil then
												discardMonster(getObjectFromGUID(monsterGUID), false)
											end
										end
									end, 5)
								else
									playAreaObj.setPositionSmooth(gStates.monsterPlayLocation[playAreaObj.guid])
									Wait.frames(function()
										getObjectFromGUID(currenLeader.disc).setCustomObject({image=leaderData[currenLeader.terrainHex][currenLeaderLevel].discImg})
										getObjectFromGUID(currenLeader.disc).reload()
										getObjectFromGUID(currenLeader.token).setCustomObject({image=leaderData[currenLeader.terrainHex][currenLeaderLevel].tokenImg})
										getObjectFromGUID(currenLeader.token).setName("Elementalist Leader Level "..currenLeaderLevel)
										getObjectFromGUID(currenLeader.token).reload()
									end, 100)
								end
							end
						end
					end

					--Discard Reward Tokens
					local tokens=	{"Ghostly Elixir", "Orb of Twilight", "Staff of Concealment", "Vampiric Chalice",  "Amulet of Reawakening", "Vial of Toxin", "f9d3a4"	--Dark Crusader Pugs
									,"Healing Herbs", "Mystical Map", "Tome of Relearning", "Cloak of Shielding",  "Ice Shard", "Fire Gem", "076ab9"}						--Elementalist Faction
					if playAreaObj.getName()~=nil then
						for x=1, #tokens, 1 do
							if playAreaObj.getName()==tokens[x] then
								playAreaObj.setRotation({0, 180, 180})
								getObjectFromGUID(tokens[(7*math.ceil(x/7))]).putObject(playAreaObj)
							end
						end
					end

					--Discard or delete players cards
					if playAreaObj.tag=="Card" then
						--Check for and leave banner Cards
						local found=false
						for x=7, #bannerCards, 1 do
							if playAreaObj.guid==bannerCards[x] then found=true break end
						end
						if playAreaObj.guid=="1f362f" or playAreaObj.guid=="085e69" or playAreaObj.guid=="7ebe5e"
							and playAreaObj.getRotation()[2]>175 and playAreaObj.getRotation()[2]<185
							and (playAreaObj.is_face_down==false) then found=true end--Steady Tempo, Mysterious Box and Crystal Joy
						--Check if the card is registered to the player and place on deed pile
						if found==false then
							--Delete face down cards
							if playAreaObj.is_face_down==true then
								playAreaObj.destruct()
							else
								for x=1,#turnOrder[gStates.turnNumber].deadDeckInventory, 1 do
									if playAreaObj.guid==turnOrder[gStates.turnNumber].deadDeckInventory[x] then
										if cardDestination==nil then
											playAreaObj.setRotation({0.0, 180.0, 0.0})
											playAreaObj.setPosition({(turnOrder[gStates.turnNumber].seatPos*40)-110.32, 1.12, -43.20})
											cardDestination=playAreaObj
										else
											playAreaObj.setPosition({playAreaObj.getPosition()[1], 1.9, playAreaObj.getPosition()[3]})
											cardDestination=cardDestination.putObject(playAreaObj)
										end
										break
									end
								end
							end
						end
					end

					--Cleanup Skills
					if skillTokens[playAreaObj.guid]~=nil then
						--Flip all per round skills in current play area face down
						if skillTokens[playAreaObj.guid].skillType=="Round" then
							getObjectFromGUID(playAreaObj.guid).setRotationSmooth({0.0, 180.0, 180.0})
						end
						--Return all non coop and comp skills to their recorded position
						if skillTokens[playAreaObj.guid].skillType=="Round" or skillTokens[playAreaObj.guid].skillType=="Turn" then
							getObjectFromGUID(playAreaObj.guid).setPositionSmooth({gStates.mageSkills[playAreaObj.guid][1], 1.5, gStates.mageSkills[playAreaObj.guid][3]})
						end
						--Coop and Comp Skills
						if skillTokens[playAreaObj.guid].skillType=="Coop" or skillTokens[playAreaObj.guid].skillType=="Comp" then
							if gStates.doingTheRounds[playAreaObj.guid]==nil then
								--Skill owner has played a coop or comp skill and it need to start the rounds
								gStates.doingTheRounds[playAreaObj.guid]=gStates.turnNumber
							else
								--Coop skill has been used by a player and needs to stop the rounds.
								if skillTokens[playAreaObj.guid].skillType=="Coop" then
									gStates.doingTheRounds[playAreaObj.guid]=nextTurn("skipDummy")
								end
							end
						end
					end
				end

				--Manipulate skills
				local nextPlayer=nextTurn("skipDummy")
				local count=0
				local keepSafe={}
				local aboveSkillZone={	["725de9"]="40ef14",--Krang's Coop SKill
										["818aea"]="8fc095",--Tovak's Coop Skill
										["c4546c"]="d28865",--Tovak's Comp Skill
										["958209"]="22b866"}--Krang's Comp SKill
				for skillGUID, Skillzone in pairs(aboveSkillZone) do
					if getObjectFromGUID(skillGUID)~=nil then
						getObjectFromGUID(Skillzone).setPosition({getObjectFromGUID(skillGUID).getPosition()[1], 1.4, getObjectFromGUID(skillGUID).getPosition()[3]})
					end
				end

				Wait.frames(function()
					for skillGUID, skillDetails in pairs(skillTokens) do
						if getObjectFromGUID(skillGUID)~=nil then
							--Flip up per turn skills
							if skillDetails.skillType=="Turn" then getObjectFromGUID(skillGUID).setRotationSmooth({0.0, 180.0, 0.0}) end
							--Comp and Unplayed coop skills that are doing the rounds.
							if gStates.doingTheRounds[skillGUID]~=nil then
								if gStates.doingTheRounds[skillGUID]==nextPlayer or gStates.soloCoop[skillGUID]==true then
									if (gStates.playerCount>1 and skillGUID~="3bd08e" and skillGUID~="958209") or gStates.soloCoop[skillGUID]==true then
										--Flip and return completed skill
										getObjectFromGUID(skillGUID).setPositionSmooth({gStates.mageSkills[skillGUID][1], 1.5, gStates.mageSkills[skillGUID][3]})
										getObjectFromGUID(skillGUID).setRotationSmooth({0.0, 180.0, 180.0})
										gStates.doingTheRounds[skillGUID]=nil
										gStates.soloCoop[skillGUID]=nil
										if aboveSkillZone[skillGUID]~=nil then
											for a, b in pairs(getObjectFromGUID(aboveSkillZone[skillGUID]).getObjects()) do
												if b.tag=="Figurine" then
													b.destruct()
												end
											end
										end
									else
										--place next to owner skill for solo and certain comp skills
										if aboveSkillZone[skillGUID]~=nil then
											for a, b in pairs(getObjectFromGUID(aboveSkillZone[skillGUID]).getObjects()) do
												if b.tag=="Figurine" then
													local offsetX=getObjectFromGUID(aboveSkillZone[skillGUID]).getPosition()[1]-b.getPosition()[1]
													local offsetZ=getObjectFromGUID(aboveSkillZone[skillGUID]).getPosition()[3]-b.getPosition()[3]
													b.setPositionSmooth({turnOrder[nextPlayer].seatPos*40-109.5+offsetX , 2.0, -39.41+offsetZ})
													keepSafe[b.guid]=true
												end
											end
										end
										getObjectFromGUID(skillGUID).setPositionSmooth({turnOrder[nextPlayer].seatPos*40-109.5 , 1.5, -39.41})
										gStates.soloCoop[skillGUID]=true
									end
								else
									--move token to next player board
									local position={105, -1.48}
									if skillDetails.skillType=="Coop" then position={109.5, 1.48} end
									if aboveSkillZone[skillGUID]~=nil then
										for a, b in pairs(getObjectFromGUID(aboveSkillZone[skillGUID]).getObjects()) do
											if b.tag=="Figurine" then
												local offsetX=getObjectFromGUID(aboveSkillZone[skillGUID]).getPosition()[1]-b.getPosition()[1]
												local offsetZ=getObjectFromGUID(aboveSkillZone[skillGUID]).getPosition()[3]-b.getPosition()[3]
												b.setPositionSmooth({turnOrder[nextPlayer].seatPos*40-position[1]+offsetX , 2.0, -39.41+(position[2]*count)+offsetZ})
												keepSafe[b.guid]=true
											end
										end
									end
									getObjectFromGUID(skillGUID).setPositionSmooth({turnOrder[nextPlayer].seatPos*40-position[1] , 1.5, -39.41+(position[2]*count)})
									count=count+1
								end
							end
						end
					end

					--Delete Crystals and wound tokens Unit Wound
					for a, playAreaObj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
						if (playAreaObj.tag=="Figurine" and keepSafe[playAreaObj.guid]~=true)
						or playAreaObj.getName()=="Blue Defender Bonus Reminder" or playAreaObj.getName()=="Green Defender Bonus Reminder"
						or playAreaObj.getName()=="White Defender Bonus Reminder" or playAreaObj.getName()=="Red Defender Bonus Reminder" then
							playAreaObj.destruct()
						end
					end
				end, 2)

				--Remove crystals and dice used to power Units
				local crystalsToDestroy={}
				local magicFamiliarLocation={}
				for a, unitAreaObj in pairs(getObjectFromGUID(playerUnitAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
					--Return any Mana dice
					if unitAreaObj.tag=="Dice" then
						returnDice(unitAreaObj.guid)
					end
					--Record Crystals in the Unit Area
					if unitAreaObj.tag=="Figurine" and unitAreaObj.getName()~="Unit Wound" then crystalsToDestroy[#crystalsToDestroy+1]=unitAreaObj end
					--Record location of Magic Familiars
					if unitAreaObj.guid=="0a2e0b" or unitAreaObj.guid=="d8e49b" then magicFamiliarLocation[#magicFamiliarLocation+1]=unitAreaObj.getPosition()[1] end
				end
				for a, crystals in pairs(crystalsToDestroy) do
					local delete=true
					for b, familiarLocation in pairs(magicFamiliarLocation) do
						if crystals.getPosition()[1]>=familiarLocation-1.5 and crystals.getPosition()[1]<=familiarLocation+1.5 then delete=false end
					end
					if delete==true then crystals.destruct() end
				end

				--Adjust fame position
				local startingFameToLevel=math.floor(math.sqrt((turnOrder[gStates.turnNumber].fame-(gStates.scoreIfLooped*turnOrder[gStates.turnNumber].scoreLoop))+1))
				local newFame=turnOrder[gStates.turnNumber].fame+turnOrder[gStates.turnNumber].fameGain-(gStates.scoreIfLooped*turnOrder[gStates.turnNumber].scoreLoop)
				local scoreLooped=false
				if newFame>=gStates.scoreIfLooped then newFame=newFame-gStates.scoreIfLooped scoreLooped=true end
				local fameToLevel=math.floor(math.sqrt(newFame+1))
				local startPosition=(newFame-(fameToLevel*fameToLevel))+2
				if scoreLooped==false then startPosition=startPosition+((fameToLevel-startingFameToLevel)*gStates.blitz) end
				local levelRowFameQuantity=(((fameToLevel-1)*cellGainPerLevel)+normalCellAmount)
				local levelRowLength=((fameToLevel-1)*gStates.rowLengthGainPerLevel)+gStates.normalRowLength
				local xOffset=(1/levelRowFameQuantity*levelRowLength)/2
				local yOffset=(heightOfFameBoard/gStates.rowsOnBoard)/2
				local horizontalValue=leftOfFameBoard+(startPosition/levelRowFameQuantity*levelRowLength)-xOffset
				local verticalValue=(topOfFameBoard-((fameToLevel/gStates.rowsOnBoard)*heightOfFameBoard))+yOffset-0.25
				getObjectFromGUID(turnOrder[gStates.turnNumber].fameGUID).setPosition({horizontalValue, 1.5, verticalValue+((turnOrder[gStates.turnNumber].seatPos-2.5)/5)})

				--Adjust Reputation Position
				local repPos=reputationTable[turnOrder[gStates.turnNumber].reputation+turnOrder[gStates.turnNumber].repGain].reputationPos
				getObjectFromGUID(turnOrder[gStates.turnNumber].reputationGUID).setPosition({repPos[1], repPos[2], repPos[3]})

				mainUIUpdate("Pre End Turn")
				Wait.frames(function() LevelUp(gStates.turnNumber) end, 15)
			else
				if gStates.skillButtons~=0 then
					for a, b in pairs(turnOrder) do
						if b.seatPos==gStates.skillButtons then
							broadcastToAll(b.mage.." needs to select a skill before "..turnOrder[gStates.turnNumber].mage.." can end their Turn.", {1,0,0}) break
						end
					end
				end
			end
		end
	end
end

--drop a shield
function dropShield(location)
	for a, details in pairs(mageKnights) do
		if details.mage==turnOrder[gStates.turnNumber].mage then
			getObjectFromGUID(details.shieldContainer).takeObject({position=location, smooth=false})
			break
		end
	end
end

--perform Level Up
function LevelUp(playerTurnSequence)
	if turnOrder[playerTurnSequence].levelUp>0 then
		local multiSkill=false
		--turnOrder[gStates.turnNumber].level=turnOrder[gStates.turnNumber].level+turnOrder[gStates.turnNumber].levelUp
		local loops=turnOrder[playerTurnSequence].levelUp
		for a=1, loops, 1 do
			if ((turnOrder[playerTurnSequence].level)+1)%2==0 then --Skill and Advanced Action Level Up
				if multiSkill==false then
					--draw two skills to communal
					if getObjectFromGUID(turnOrder[playerTurnSequence].skillGUID).getQuantity()>1 then
						local exist=0
						for skillGUID, skillPos in pairs(gStates.mageSkills) do
							if math.floor(skillPos[1])==math.floor((turnOrder[playerTurnSequence].seatPos*3.7)+7.3) then exist=exist+1 end
						end
						for b=0, 1, 1 do
							local pos={(turnOrder[playerTurnSequence].seatPos*3.7)+7.3, 2.00, -23.95+(b*1.35)+(exist*1.35)}
							local b=getObjectFromGUID(turnOrder[playerTurnSequence].skillGUID).takeObject({position=pos, smooth=false, rotation={0, 180, 0}})
							gStates.mageSkills[b.guid]=pos
						end
					end
					--activate claim buttons for valid Skills
					gStates.skillButtons=turnOrder[playerTurnSequence].seatPos
					skillButtonActivate()
					--Look at skill Area
					broadcastToAll(turnOrder[playerTurnSequence].mage.." needs to gain a new Skill and Advanced Action card.", positionToColor(gStates.turnNumber))
					multiSkill=true
				else
					break
				end
			else --odd number levels
				--Command Token Deploy
				getObjectFromGUID(turnOrder[playerTurnSequence].commandGUID).takeObject({position={(turnOrder[playerTurnSequence].seatPos*40)-103.49+(3.76*((turnOrder[gStates.turnNumber].level)/2)), 2.00, -31.2}, rotation={0, 180, 180}})
				broadcastToAll(turnOrder[playerTurnSequence].mage.." gained a new Command token.", positionToColor(playerTurnSequence))
				--Hand Size Increase
				if (turnOrder[playerTurnSequence].level)+1==5 or (turnOrder[playerTurnSequence].level)+1==9 then
					turnOrder[playerTurnSequence].baseHand=turnOrder[playerTurnSequence].baseHand+1
					turnOrder[playerTurnSequence].hand=turnOrder[playerTurnSequence].hand+1
					broadcastToAll(turnOrder[playerTurnSequence].mage.."'s hand size increased by one.", positionToColor(playerTurnSequence))
				end
			end
			turnOrder[playerTurnSequence].level=turnOrder[playerTurnSequence].level+1
			turnOrder[playerTurnSequence].levelUp=turnOrder[playerTurnSequence].levelUp-1
		end
	end
end

--put skill buttons on skills when appropiate
function skillButtonActivate()
	Wait.frames(function()
		if gStates.tacticShown==false and gStates.tacticRemove==false then
			--Work out which skills exist where.
			local skillSort={currentPlayer={}}
			if gStates.skillButtons>0 then
				for skillGUID, skillPos in pairs(gStates.mageSkills) do
					if skillPos[3]>-30 then
						local skillColumn=math.ceil((skillPos[1]-12.85)/3.7)
						local skillRow=math.ceil((skillPos[3]+24.625)/1.35)
						if gStates.skillButtons~=skillColumn+1 then
							skillSort[(skillColumn*8)+skillRow]=skillGUID
						else
							skillSort.currentPlayer[#skillSort.currentPlayer+1]={skillGUID, skillPos[3], (skillColumn*8)+skillRow}
						end
					end
				end
			end
			--Add claim buttons for skills that are legal
			table.sort(skillSort.currentPlayer, function (k1, k2) return k1[2] > k2[2] end)
			for buttonNumber=1, 32, 1 do
				if gStates.skillButtons>0 then
					if math.ceil(buttonNumber/8)~=gStates.skillButtons then
						if skillSort[buttonNumber]~=nil then getObjectFromGUID(skillSort[buttonNumber]).UI.setXmlTable({createClaimButton(skillSort[buttonNumber], tostring(buttonNumber))}) end
					else
						if buttonNumber==skillSort.currentPlayer[1][3] and turnOrder[gStates.turnNumber].level<12 then getObjectFromGUID(skillSort.currentPlayer[1][1]).UI.setXmlTable({createClaimButton(skillSort.currentPlayer[1][1], tostring(buttonNumber))}) end
						if buttonNumber==skillSort.currentPlayer[2][3] and turnOrder[gStates.turnNumber].level<12 then getObjectFromGUID(skillSort.currentPlayer[2][1]).UI.setXmlTable({createClaimButton(skillSort.currentPlayer[2][1], tostring(buttonNumber))}) end
					end
				end
			end
		end
	end, 5)
end

--Deals player Hand then increments turn
function EndTurn(player, mouseButton, id)
	if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
		UI.setAttribute("NightTacticSix", "active", "false")
		gStates.preEndTurn=false
		gStates.levelingUp=false
		gStates.skippedMove=false
		gStates.summonStates={}
		turnOrder[gStates.turnNumber].fameGain=0 gStates.gainList={}
		turnOrder[gStates.turnNumber].repGain=0
		turnOrder[gStates.turnNumber].combatIconHide="None"

		--Update all pursuing monsters, new deployed or stunned will be on the move.
		if gStates.pursuing[turnOrder[gStates.turnNumber].mage]~=nil then
			for guid, monster in pairs(gStates.pursuing[turnOrder[gStates.turnNumber].mage]) do
				if monster.state=="Deployed" and getObjectFromGUID(guid).is_face_down==true then getObjectFromGUID(guid).flip() end
				if monster.state=="Stunned" then monster.state="Deployed" else monster.state="Pursuing" end
				monster.location={getObjectFromGUID(guid).getPosition()[1], getObjectFromGUID(guid).getPosition()[2], getObjectFromGUID(guid).getPosition()[3]}
				gStates.monsterPlayLocation[guid]=monster.location
			end
			--delete the help arrows
			for guid, _ in pairs(gStates.arrowDelete) do
				if getObjectFromGUID(guid)~=nil then getObjectFromGUID(guid).destroy() end
			end
			gStates.arrowDelete={}
		end

		--Draw cards back up to hand size
		local nextPlayer=nextTurn()
		if turnOrder[nextPlayer].endCalled~=true then
			DrawUpTo(player, "-1", "DrawHand")
		end

		--re-enable night tactic six buttons
		if turnOrder[gStates.turnNumber].tactic==6 and gStates.tacticSixState~="Used" and gStates.dayRound==false then
			gStates.tacticSixState="notClaimed"
		end

		--Update Moticvation Skille ststus
		for a, stats in pairs(gStates.motivationSkill) do
			if stats.state=="used" then stats.state="deactive" end
		end

		Wait.frames(function()
			--Records current amount of cards in deed deck
			for a, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
				if b.tag=="Card" then turnOrder[gStates.turnNumber].deedCount=1 end
				if b.tag=="Deck" then turnOrder[gStates.turnNumber].deedCount=b.getQuantity() end
			end

			--update turn order
			incrementTurn()
		end, 10)
	end
end

function scenarioEnd()
	if gStates.endGameAchieved==false then
		UI.setAttribute("EndGameButtonText", "text", "Scenario End Achieved - Yes")
		UI.setAttribute("EndGameButtonImage", "image", "Button Deactive")
		gStates.endGameAchieved=true
		turnOrder[gStates.realTurn].gameEnder=true
		broadcastToAll("Final Turn(s) Started", {1,1,0.5})
	else
		UI.setAttribute("EndGameButtonText", "text", "Scenario End Achieved - No")
		UI.setAttribute("EndGameButtonImage", "image", "Button Active")
		gStates.endGameAchieved=false
		turnOrder[gStates.realTurn].gameEnder=false
		broadcastToAll("Final Turn(s) Cancelled", {1,1,0.5})
		mainUIUpdate("Scenario End")
	end
end

--increments the turn counter
function incrementTurn()
	if gStates.turnNumber>0 then turnOrder[gStates.turnNumber].pillagedVillage=false end
	--find next mage with face down turn order token
	gStates.turnNumber=gStates.realTurn
	local turnSearch=gStates.turnNumber+1
	if turnSearch>#turnOrder then turnSearch=1 end
	local found=false
	for a=1, #turnOrder-1, 1 do
		if getObjectFromGUID(turnOrder[turnSearch].turnOrderTokenGUID).is_face_down==true then
			gStates.realTurn=gStates.turnNumber
			gStates.turnNumber=turnSearch
			gStates.skipTurn[#gStates.skipTurn+1]=turnSearch
			found=true
			break
		end
		turnSearch=turnSearch+1
		if turnSearch>#turnOrder then turnSearch=1 end
	end
	--if no out of order mages find next legit mage's turn
	local endRoundDummy=false
	if found==false then
		if gStates.tacticSixState=="Started" then
			for a=1, #gStates.skipTurn, 1 do
				if turnOrder[gStates.skipTurn[a]].tactic==6 then
					table.remove(gStates.skipTurn, a)
					gStates.turnNumber=gStates.turnNumber+1
				end
			end
			gStates.tacticSixState="Used"
		else
			gStates.turnNumber=gStates.turnNumber+1
		end
		if gStates.turnNumber>#turnOrder then
			gStates.turnNumber=1
			--Work out new turn order from tactics.
			if gStates.tacticShown==true then
				table.sort(turnOrder, function (k1, k2) return k1.tactic < k2.tactic end)
				tacticToggle()
			end
		end
		--Skip dummy if end of game or round started
		if (gStates.endGameAchieved==true or gStates.endRoundCalled==true) and turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
			broadcastToAll(turnOrder[gStates.turnNumber].mage.." isn't included in the final round of turns", {1,1,0.5})
			if turnOrder[gStates.turnNumber].endCalled==true then turnOrder[gStates.turnNumber].endCalled=false endRoundDummy=true end
			gStates.turnNumber=gStates.turnNumber+1
			if gStates.turnNumber>#turnOrder then gStates.turnNumber=1 end
		end
		--skip players who played out of turn
		local count=0
		for a=1, #gStates.skipTurn, 1 do
			if gStates.skipTurn[a-count]==gStates.turnNumber then
				table.remove(gStates.skipTurn, a-count)
				count=count+1
				broadcastToAll(turnOrder[gStates.turnNumber].mage.." skips their turn. They played out of order", positionToColor(gStates.turnNumber))
				gStates.turnNumber=gStates.turnNumber+1
				if gStates.turnNumber>#turnOrder then gStates.turnNumber=1 end
			end
			--Skip dummy if end of game started
			if (gStates.endGameAchieved==true or gStates.endRoundCalled==true) and turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
				broadcastToAll(turnOrder[gStates.turnNumber].mage.." isn't included in the final round of turns", {1,1,0.5})
				if turnOrder[gStates.turnNumber].endCalled==true then turnOrder[gStates.turnNumber].endCalled=false endRoundDummy=true end
				gStates.turnNumber=gStates.turnNumber+1
				if gStates.turnNumber>#turnOrder then gStates.turnNumber=1 end
			end
		end
		gStates.realTurn=gStates.turnNumber
		--Check if every mage has had his turn
	end
	if turnOrder[gStates.turnNumber].endCalled==true or endRoundDummy==true then
		turnOrder[gStates.turnNumber].endCalled=false
		endRound()
	else
		broadcastToAll("It is now "..turnOrder[gStates.turnNumber].mage.."'s turn.", positionToColor(gStates.turnNumber))
		if gStates.tacticShown==false then
			startOfTurn()
		else
			claimButtonRefresh()
		end
		adjustHandSize()
	end
end

--Return the value of the next turn
function nextTurn(type)
	--find the next player with a flipped down turn order token
	local nextTurnNumber=gStates.realTurn
	local turnSearch=nextTurnNumber+1
	if turnSearch>#turnOrder then turnSearch=1 end
	local found=false
	for a=1, #turnOrder-1, 1 do
		if gStates.firstStarted~=0 and gStates.turnNumber~=turnSearch and getObjectFromGUID(turnOrder[turnSearch].turnOrderTokenGUID).is_face_down==true then
			nextTurnNumber=turnSearch
			found=true
			break
		end
		turnSearch=turnSearch+1
		if turnSearch>#turnOrder then turnSearch=1 end
	end
	--if no out of order mages find next legit mage's turn
	if found==false then
		nextTurnNumber=nextTurnNumber+1
		if nextTurnNumber>#turnOrder then nextTurnNumber=1 end
		--Skip dummy if end of game or round started
		if (type=="skipDummy") and turnOrder[nextTurnNumber].mage==gStates.positionMageKnight[5] then --gStates.endGameAchieved==true or gStates.endRoundCalled==true or
			nextTurnNumber=nextTurnNumber+1
			if nextTurnNumber>#turnOrder then nextTurnNumber=1 end
		end
		--skip players who played out of turn
		for a=1, #gStates.skipTurn, 1 do
			if gStates.skipTurn[a]==nextTurnNumber then
				nextTurnNumber=nextTurnNumber+1
				if nextTurnNumber>#turnOrder then nextTurnNumber=1 end
			end
			--Skip dummy if end of game started
			if (gStates.endGameAchieved==true or gStates.endRoundCalled==true) and turnOrder[nextTurnNumber].mage==gStates.positionMageKnight[5] then
				nextTurnNumber=nextTurnNumber+1
				if nextTurnNumber>#turnOrder then nextTurnNumber=1 end
			end
		end
	end
	if gStates.tacticSixState=="Started" then
		nextTurnNumber=gStates.realTurn
	end
	return nextTurnNumber
end

--record the player who called end of round
function PreEndRound(player, mouseButton, id)
	if mouseButton=="-1" and legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
		turnOrder[gStates.turnNumber].endCalled=true
		gStates.endRoundCalled=true
		if gStates.currentRound==gStates.rounds then
			if gStates.playersRef==5 and turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5] then UI.setAttribute("GameOver", "active", "true") return end
			gStates.endGameAchieved=true
		end--GameOver
		broadcastToAll("End Round Called. Everyone has one final turn", positionToColor(gStates.turnNumber))
		--Delete mana token given by glade
		for a, playAreaObj in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[gStates.turnNumber].seatPos]).getObjects()) do
			if playAreaObj.tag=="Figurine" then playAreaObj.destruct() end
		end
		incrementTurn()
	end
end

--Run all the End of Round Tasks
function endRound()
	--Update round count and check for end of game
	broadcastToAll("-------------------",{1,1,0.5})
	gStates.currentRound=gStates.currentRound+1

	--Swith Day/Night Objects
	local dieValue={"Red", "Green", "Blue", "White", "Gold", "Black"}
	local virtualDie1=math.random(1,6)
	local virtualDie2=math.random(1,6)
	if gStates.darknessComing==true then broadcastToAll("Virtual Dice rolled "..dieValue[virtualDie1].." and "..dieValue[virtualDie2], {1,1,0.5}) end
	if gStates.darknessComing==true and (virtualDie1==6 or virtualDie2==6) then broadcastToAll("Time of day has changed permenantly", {1,1,0.5}) end
	if gStates.darknessComing==false or (gStates.darknessComing==true and (virtualDie1==6 or virtualDie2==6) and gStates.timeChanged==false) then
		gStates.timeChanged=true
		dayNight()
	end

	--Reroll all mana dice
	broadcastToAll("Mana Dice Reset", {1,1,0.5})
	for a, die in pairs(getObjectFromGUID("2cd825").getObjects()) do
		if die.getName()=="Mana Dice" then
			die.randomize()
		end
	end

	--Rampage defeated sites
	if gStates.rampage>=1 then
		broadcastToAll("Rampaging Tokens have been Replenished", {1,1,0.5})
		local northBearing=40
		local startTileGUID="5d0bac"
		if getObjectFromGUID(startTileGUID)==nil then startTileGUID="722590" northBearing=70 end
		local startBearing=0
		for a, terrain in pairs(getObjectFromGUID(mapArea).getObjects()) do
			--Find terrain with rampaging or draconum
			if terrainTiles[terrain.guid]~=nil then
				if terrain.is_face_down==false then--check if terrain is face up
					for hexLocation, hexFeature in pairs(terrainTiles[terrain.guid].hexFeature) do
						if hexFeature=="rampaging" or hexFeature=="draconum" then
							if gStates.gameScenario~="Ladyhawke" then startBearing=math.deg(math.atan2(terrain.getPosition()[3]-getObjectFromGUID(startTileGUID).getPosition()[3], terrain.getPosition()[1]-getObjectFromGUID(startTileGUID).getPosition()[1])) end
							playRampagingTokens(terrain, startBearing, northBearing, hexLocation, hexFeature, false)
						end
					end
				end
			end
		end
	end

	--Stop Smoke
	for a, b in pairs(gStates.smoke) do
		getObjectFromGUID(b[1]).AssetBundle.playLoopingEffect(1)
		getObjectFromGUID(b[2]).AssetBundle.playLoopingEffect(1)
	end

	--Update Dummy Player
	fillSlide()
	Wait.frames(function()
		if gStates.positionMageKnight[5]~="nobody" and gStates.positionMageKnight[5]~="Volkare" then
			--Put advanced action in dummy deck
			broadcastToAll("Dummy Collected The First Advance Action Card", {1,1,0.5})
			local objCard=getObjectFromGUID("b4f60a").getObjects()
			for i=1, #objCard, 1 do
				if objCard[i].tag=="Card" then
					getObjectFromGUID(objCard[i].guid).setRotationSmooth({0,180,180})
					getObjectFromGUID(objCard[i].guid).setPositionSmooth({getObjectFromGUID(dummyBoard).getPosition()[1]+4.5, 1.17, getObjectFromGUID(dummyBoard).getPosition()[3]-5.2})
					break
				end
			end
			--Put spell colored crystal in dummy inventory
			local spellColor=getObjectFromGUID(getObjectFromGUID("67ca95").getObjects()[1].guid).getDescription()--read information from the card in the first spell position
			broadcastToAll("Dummy added a "..spellColor.." mana crystal to its inventory", {1,1,0.5})
			local params={position={0, 1.65, 0}, rotation={0, 30, 0}, smooth=false}
			local obj=nil
			local crystalsPerRow=3
			if gStates.rounds>6 then crystalsPerRow=4 end
			if gStates.rounds>8 then crystalsPerRow=5 end
			params.position[1]=getObjectFromGUID(dummyBoard).getPosition()[1]-2.0+((3.4/(crystalsPerRow-1))*(gStates.currentRound-2))-(((3.4/(crystalsPerRow-1))*crystalsPerRow)*math.floor((gStates.currentRound-2)/crystalsPerRow))
			params.position[3]=getObjectFromGUID(dummyBoard).getPosition()[3]+0.3-(1.2*math.floor((gStates.currentRound-2)/crystalsPerRow))
			if spellColor=="Red" then obj=getObjectFromGUID("819a62").takeObject(params) obj.lock() end
			if spellColor=="Blue" then obj=getObjectFromGUID("8ae7b8").takeObject(params) obj.lock() end
			if spellColor=="Green" then obj=getObjectFromGUID("a30eb7").takeObject(params) obj.lock() end
			if spellColor=="White" then obj=getObjectFromGUID("4f6569").takeObject(params) obj.lock() end
			for a=1, #turnOrder, 1 do
				if turnOrder[a].mage==gStates.positionMageKnight[5] then
					local b=obj.getDescription()
					turnOrder[a].dummyCrystals[b]=turnOrder[a].dummyCrystals[b]+1
					break
				end
			end
		else
			--Discards an Advance Action
			local MainDeck=getObjectFromGUID("7ce69e").getObjects()
			local discard=getObjectFromGUID("b4f60a").getObjects()
			if discard[1]~=nil and MainDeck[1]~=nil then
				MainDeck[1].putObject(discard[1])
			end
		end
		--Discards the last Spell
		local MainDeck=getObjectFromGUID("f752bb").getObjects()
		local discard=getObjectFromGUID("67ca95").getObjects()
		if discard[1]~=nil and MainDeck[1]~=nil then
			MainDeck[1].putObject(discard[1])
		end

		--Turn on advanced units for last half of game in "Conquer and Hold"
		if gStates.currentRound > gStates.rounds/2 and gStates.gameScenario=="Conquer and Hold" then
			gStates.eliteUnitsUsed=true
			broadcastToAll("Elite Units are included in the next Offer", {1,1,0.5})
		end

		--Cycle all the offers
		Wait.frames(function()
			broadcastToAll("Unit Offer Refreshed", {1,1,0.5})
			broadcastToAll("Advanced Actions and Spells Cycled", {1,1,0.5})
			broadcastToAll("-------------------", {1,1,0.5})
			UnitOffer()
			fillSlide()
		end, 50)
	end, 50)

	--Flip all skills
	broadcastToAll("All Mage Skills Reset", {1,1,0.5})
	for skillGUID, skillDetails in pairs(skillTokens) do
		if getObjectFromGUID(skillGUID)~=nil then getObjectFromGUID(skillGUID).setRotationSmooth({0.0, 180.0, 0.0}) end
	end
	--Update Moticvation Skille ststus
	for a, stats in pairs(gStates.motivationSkill) do
		if stats.state~="notClaimed" then stats.state="active" end
	end

	--Ready all units
	broadcastToAll ("All Units are Ready for combat again", {1,1,0.5})
	local commandTokens={"12e399", "87cff0", "7a2083", "4af106", "ab5b0d", "88f6c1",--Braevalar Command
						 "07eec8", "d9f39d", "ea80e4", "dbc3f1", "442ad5", "4aa025",--Krang command
						 "a0f780", "47d922", "a8f242", "d960d3", "493833", "6bfe5b",--Ymirgh command
						 "104cff", "20a938", "2c51b2", "519062", "31e29d", "ab61c0",--Arythea command
						 "a345a3", "77dd3d", "c53d0a", "d55244", "4c1c1b", "2eb846",--Norowas command
						 "c5b17e", "7c0270", "4ea3a1", "4bbe27", "867634", "0162e7",--Goldyx command
						 "aa0a9d", "fa99cf", "10295b", "92bd25", "7e91b7", "7e6c4f",--Tovak command
						 "07661c", "bf879c", "6b7e70", "439a0a", "fb74bd", "361a24",--Wolfhawk command
						 "",	   "",		 "",	   "",		 "",	   "f30dd4"}--Norowas Skill is also a command token
	for x=1, #commandTokens, 1 do
		if getObjectFromGUID(commandTokens[x])~=nil then
			local token=getObjectFromGUID(commandTokens[x])
			if token.is_face_down==true or x % 6==0 then token.setPosition({token.getPosition()[1],token.getPosition()[2],-31.19}) end
		end
	end

	--Flip banner Cards
	for a=7, 12, 1 do
		if getObjectFromGUID(bannerCards[a])~=nil then getObjectFromGUID(bannerCards[a]).setRotationSmooth({0, 180, 0}) end
	end

	--Shuffle all discarded player decks and loose cards back to starting position
	broadcastToAll ("Deed Decks reset and shuffled", {1,1,0.5})
	for a=1, #turnOrder, 1 do
		--Volkare does not reset his deck
		if getObjectFromGUID(deedDeckDiscardZones[turnOrder[a].seatPos])~=nil and not (gStates.positionMageKnight[5]=="Volkare" and (turnOrder[a].seatPos==math.floor(((getObjectFromGUID(dummyBoard).getPosition()[1]+122.5)/40)) or (turnOrder[a].seatPos==5 and math.floor(getObjectFromGUID(dummyBoard).getPosition()[1])==62))) then
			--find the discard deck and flip it back to above the deed deck location.
			local newDeck=nil
			local discards=getObjectFromGUID(deedDeckDiscardZones[turnOrder[a].seatPos]).getObjects()
			local test=0
			for b=1, #discards, 1 do
				if discards[b].tag=="Deck" then
					newDeck=discards[b]
					newDeck.setRotationSmooth({0.0, 180.0, 180.0})
					newDeck.setPosition({getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getPosition()[1], 1.2, getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getPosition()[3]})
					test=1
					break
				end
			end
			--If testing (or cheating) their won't be a discard pile, so assign the normal deck as the destination for loose cards
			if test==0 then
				local decks=getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()
				for b=1, #decks, 1 do
					if decks[b].tag=="Deck" then
						newDeck=decks[b]
						break
					end
				end
			end

			--pull all the cards recorded as part of that players hand back to the floating deed deck, then it will fall into any existing cards
			for b=1, #turnOrder[a].deadDeckInventory,1 do
				if getObjectFromGUID(turnOrder[a].deadDeckInventory[b])~=nil then
					local found=0
					for c=7, 12, 1 do
						if turnOrder[a].deadDeckInventory[b]==bannerCards[c] then found=1 break end
					end
					if found==0 and newDeck~=nil then
						newDeck.putObject(getObjectFromGUID(turnOrder[a].deadDeckInventory[b]))
					end
				end
			end
		end
	end

	--Work out new tactics picking order
	table.sort(turnOrder, function (k1, k2) return k1.tactic > k2.tactic end)
	table.sort(turnOrder, function (k1, k2) return k1.fame < k2.fame end)
	gStates.turnNumber=1
	gStates.realTurn=1
	broadcastToAll("It is now "..turnOrder[gStates.turnNumber].mage.."'s turn.", positionToColor(gStates.turnNumber))
	gStates.tacticTwoState="notUsed"
	gStates.tacticFourState="notUsed"
	gStates.tacticSixState="notClaimed"
	gStates.endRoundCalled=false

	--Lay out tactics for removal
	--No tactics removed Scenarios
	if gStates.darknessComing==true or gStates.discardTactics==0 or gStates.currentRound>gStates.rounds-1 then
		tacticToggle()
	else
		--Remove the player's tactic Scenarios
		gStates.tacticRemove=true
		local d=1
		for a=1, 6, 1 do
			for b=1, #turnOrder, 1 do
				local c=0
				if gStates.dayRound==true then c=6 end
				if turnOrder[b].tactic==a and ((turnOrder[b].mage~=gStates.positionMageKnight[5] and gStates.discardTactics==1) or gStates.discardTactics==2) then
					getObjectFromGUID(tacticCard[turnOrder[b].tactic+c]).setRotation({0.0, 180.0, 0.0})
					getObjectFromGUID(tacticCard[turnOrder[b].tactic+c]).setPosition({-12.50+(4*d), 1.03, -14.00})
					d=d+1
					break
				end
				if turnOrder[b].tactic==a and turnOrder[b].mage==gStates.positionMageKnight[5] then
					local depth=-8
					if gStates.dayRound==true then depth=-4 end
					getObjectFromGUID(tacticCard[turnOrder[b].tactic+c]).setPosition({-16.50+(4*a), depth, -14.00})
					getObjectFromGUID(tacticCard[turnOrder[b].tactic+c]).lock()
				end
			end
		end
		claimButtonRefresh()
	end

	--shuffles, deals cards
	Wait.frames(function()
		--shuffle and scale decks down for more room
		for a=1, #turnOrder, 1 do
			if getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos])~=nil and turnOrder[a].mage~="Volkare" then
				local decks=getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()
				for b=1, #decks, 1 do
					if decks[b].tag=="Deck" then
						decks[b].shuffle()
						-- for c, d in pairs(turnOrder) do
						-- 	if a==d.seatPos and d.mage~=gStates.positionMageKnight[5] then decks[b].scale({0.97, 0.97, 0.97}) break end
						-- end
						break
					end
				end
			end
		end

		--deal
		Wait.frames(function() DealAllHands() end, 50)
	end, 150)

	--set discards count to 0
	for a, b in pairs(turnOrder) do	b.discardCount=0 end

	--Stops the button on last round
	if gStates.currentRound==gStates.rounds then broadcastToAll("Final Round", {1,1,0.5}) end
end

--Swap Day and Night items
function dayNight()
	--Swith day night board
	local tileColor={}
	if gStates.dayRound==false then
		tileColor={r=1.0, g=1.0, b=1.0}
		local nightObject={"43fa2e", "0f95b7", "9e7de3", "ee9e66", "717bcc", "39ca3f", "d951b8"}
					--Day Board, 5 Weather Tokens, weather deck
		broadcastToAll("Day Has Risen", {1,1,0.5})
		for i=1, #nightObject, 1 do
			if getObjectFromGUID(nightObject[i])~=nil then getObjectFromGUID(nightObject[i]).setState(1) end
		end
		local ruinPugs={"2721c8", "3ac2d6", "3ae05e", "8ca894", "f3c6e3", "2f9a1f", "0e09cf", "a59f0b", "40fd40", "f172a4", "28cc9c", "58c5ab", "1e5666", "09a519", "21dc40"}
					--Day Board, 5 Weather Tokens, weather deck
		broadcastToAll("Ruins are revealed", {1,1,0.5})
		for i=1, #ruinPugs, 1 do
			if getObjectFromGUID(ruinPugs[i])~=nil then getObjectFromGUID(ruinPugs[i]).setRotationSmooth({0.0, 180.0, 0.0}) end
		end
		Wait.frames(function() if getObjectFromGUID("a822f8")~=nil then getObjectFromGUID("a822f8").shuffle() end end, 5)--shuffle day weather
		gStates.dayRound=true
	else
		tileColor={r=0.6, g=0.6, b=0.6}
		local dayObject={"a02b0f", "889c03", "36014f", "9b5096", "b92ffa", "0ddafe", "a822f8"}
					--Day Board, 5 Weather Tokens, weather deck
		broadcastToAll("Night has Fallen", {1,1,0.5})
		for i=1, #dayObject, 1 do
			if getObjectFromGUID(dayObject[i])~=nil then getObjectFromGUID(dayObject[i]).setState(2) end
		end
		Wait.frames(function() if getObjectFromGUID("d951b8")~=nil then getObjectFromGUID("d951b8").shuffle() end end, 5)--shuffle night weather
		gStates.dayRound=false
	end

	--Make terrain tile light or dark
	for a, b in pairs(terrainTiles) do
		local obj=getObjectFromGUID(a)
		if obj~=nil then obj.setColorTint(tileColor) end
	end
end

pause=false
function shieldLocation(obj, zone, status)
	if zone.guid==mapArea then
		local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
		table.sort(objectsInPlay, function (k1, k2) return k1.getPosition()[2]<k2.getPosition()[2] end)
		local found=false
		local shieldPos=obj.getPosition()
		for a, terTile in pairs(objectsInPlay) do
			--Figure out which hex it is on
			if terrainTiles[terTile.guid]~=nil then
				local tilePos=terTile.getPosition()
				local shieldToTileDist=math.sqrt(((shieldPos[1]-tilePos[1])^2)+((shieldPos[3]-tilePos[3])^2))
				if shieldToTileDist<3.1 then
					--found=true
					local bearing="center"
					if shieldToTileDist>1 then
						bearing=(60*(math.floor((math.deg(math.atan2(shieldPos[3]-tilePos[3], shieldPos[1]-tilePos[1]))+terTile.getRotation()[2]+30)/60)))
						if bearing>=360 then bearing=bearing-360 end
						if bearing<0 then bearing=bearing+360 end
					end
					for hexLocation, hexFeature in pairs(terrainTiles[terTile.guid].hexFeature) do
						if hexLocation==tostring(bearing) then
							local found=false
							for b, mageSearch in pairs(turnOrder) do
								if mageSearch.mage==obj.getDescription() or obj.getName()=="Burned Monastery" then
									found=true
									if status=="remove" then
										if hexFeature=="keep" and obj.getName()~="Burned Monastery" then
											broadcastToAll("Keep Released", positionToColor(b))
											mageSearch.keepsBeat=mageSearch.keepsBeat-1
											adjustHandSize()
										end
										if hexFeature=="monastery" and gStates.monasteryBurned[terTile.guid]==true then
											broadcastToAll("Monastery got Repaired, somehow?", positionToColor(b))
											gStates.monasteryCount=gStates.monasteryCount+1
											gStates.monasteryBurned[terTile.guid]=false
											getObjectFromGUID(gStates.smoke[terTile.guid][1]).AssetBundle.playLoopingEffect(1)
											getObjectFromGUID(gStates.smoke[terTile.guid][2]).AssetBundle.playLoopingEffect(1)
										end
										if hexFeature=="glade" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Druid Nights" then
											broadcastToAll("Glade Deactivated", positionToColor(b))
										end
										if hexFeature=="glade" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Life and Death" then
											broadcastToAll("Glade Deactivated", positionToColor(b))
										end
										if hexFeature=="graveyard" and obj.getName()~="Burned Monastery" then
											broadcastToAll("Graveyard Deactivated", positionToColor(b))
										end
										if hexFeature:sub(1, 4)=="mine" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Mines Liberation" then
											broadcastToAll("Mine Undone", positionToColor(b))
										end
										if hexFeature=="mage tower" and obj.getName()~="Burned Monastery" then
											broadcastToAll("Mage Tower Released", positionToColor(b))
										end
										if (hexFeature=="monster den" or hexFeature=="spawning grounds" or hexFeature=="maze" or hexFeature=="labyrinth" or hexFeature=="ruin" or hexFeature=="dungeon" or hexFeature=="tomb") and obj.getName()~="Burned Monastery" then
											broadcastToAll("Adventure Site Undone", positionToColor(b))
										end
										if hexFeature:sub(1, 4)=="city" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="The Lost Relic Blitz" then
											broadcastToAll("Relic Piece Replaced", positionToColor(b))
										end
										break
									else
										if hexFeature=="monastery" and gStates.monasteryBurned[terTile.guid]~=true then
											broadcastToAll("'You maniacs! You Burned it! You burned it all to Hell!'", positionToColor(b))
											gStates.monasteryCount=gStates.monasteryCount-1
											gStates.monasteryBurned[terTile.guid]=true
											if gStates.smoke[terTile.guid]==nil then
												gStates.smoke[terTile.guid]={}
												for aa=1, 2, 1 do
													local smoke=getObjectFromGUID("6e47a5").clone()
													Wait.frames(function()
														smoke.lock()
														smoke.setPosition({shieldPos[1], -1*aa, shieldPos[3]})
														smoke.AssetBundle.playLoopingEffect(0)
														gStates.smoke[terTile.guid][#gStates.smoke[terTile.guid]+1]=smoke.guid
													end, 2)
												end
											else
												getObjectFromGUID(gStates.smoke[terTile.guid][1]).AssetBundle.playLoopingEffect(0)
												getObjectFromGUID(gStates.smoke[terTile.guid][2]).AssetBundle.playLoopingEffect(0)
											end
										end
										if hexFeature=="keep" and obj.getName()~="Burned Monastery" then
											broadcastToAll("'War is too serious a matter to leave to soldiers.'", positionToColor(b))
											mageSearch.keepsBeat=mageSearch.keepsBeat+1
											adjustHandSize()
											break
										end
										if hexFeature=="glade" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Druid Nights" then
											broadcastToAll("Glade Activated", positionToColor(b))
										end
										if hexFeature=="glade" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Life and Death" then
											broadcastToAll("Glade Liberated", positionToColor(b))
										end
										if hexFeature=="graveyard" and obj.getName()~="Burned Monastery" then
											broadcastToAll("Graveyard Liberated", positionToColor(b))
										end
										if hexFeature:sub(1, 4)=="mine" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="Mines Liberation" then
											broadcastToAll("Mine Liberated", positionToColor(b))
										end
										if hexFeature=="mage tower" and obj.getName()~="Burned Monastery" then
											broadcastToAll("Mage Tower Conquered", positionToColor(b))
										end
										if (hexFeature=="monster den" or hexFeature=="spawning grounds") and obj.getName()~="Burned Monastery" then
											broadcastToAll("'They mostly come at night...Mostly.'", positionToColor(b))
										end
										if (hexFeature=="maze" or hexFeature=="labyrinth" or hexFeature=="ruin" or hexFeature=="dungeon" or hexFeature=="tomb") and obj.getName()~="Burned Monastery" then
											broadcastToAll("Adventure Site Beaten", positionToColor(b))
										end
										if hexFeature:sub(1, 4)=="city" and obj.getName()~="Burned Monastery" and gStates.gameScenario=="The Lost Relic Blitz" then
											broadcastToAll("Relic Piece Recovered", positionToColor(b))
										end
										break
									end
								end
							end
							--Update dungeon lords hex details if a reminder token dropped.
							if found==false and status=="enter" then
								if hexFeature=="" and terrainTiles[terTile.guid].hexType[tostring(bearing)]~="swamp" and terrainTiles[terTile.guid].hexType[tostring(bearing)]~="lake" and terrainTiles[terTile.guid].hexType[tostring(bearing)]~="mountain" then
									local site="tomb"
									if obj.getName()=="Secret Dungeon" then site="dungeon" end
									terrainTiles[terTile.guid].hexFeature[hexLocation]=site
									gStates.hexOverideSave[terTile.guid]={[hexLocation]=site}
									obj.lock()
									broadcastToAll("Secret "..site.." established", {1,1,0.5})
									table.remove(gStates.locationPlace)
									mainUIUpdate("Need Token")
								else--error message
									broadcastToAll("That location is not allowed", {1,1,0.5})
								end
							end
							if found==false and status=="remove" then
								if (hexFeature=="tomb" and obj.getName()=="Secret Tomb") or (hexFeature=="dungeon" and obj.getName()=="Secret Dungeon") then
									local site="tomb"
									if obj.getName()=="Secret Dungeon" then site="dungeon" end
									terrainTiles[terTile.guid].hexFeature[hexLocation]=""
									gStates.hexOverideSave[terTile.guid]={[hexLocation]=""}
									broadcastToAll("Secret "..site.." removed.", {1,1,0.5})
									gStates.locationPlace[#gStates.locationPlace+1]=obj.getName()
									mainUIUpdate("Need Token")
								end
							end
							break
						end
					end
					break
				end
			end
			--if found==true then break end
		end
	end
	if zone.guid~=mapArea then
		if pause==false then pause=true Wait.frames(function()
			for b, mageSearch in pairs(turnOrder) do
				if mageSearch.mage==obj.getDescription() then
					cityBeatCheck()
					-- if status=="remove" then
					-- 	if (zone.guid=="8a7266" or zone.guid=="648da8" or zone.guid=="213d78" or zone.guid=="d2d65e")
					-- 		and (gStates.gameScenario~="The Gauntlet"
					-- 		and gStates.gameScenario~="The Hidden Valley Blitz" and gStates.gameScenario~="The Realm of the Dead Blitz"
					-- 		and gStates.gameScenario~="Life and Death" and gStates.gameScenario~="Dungeon Lords"
					-- 		and gStates.gameScenario~="Druid Nights" and gStates.gameScenario~="Mines Liberation") then
					-- 		broadcastToAll("City Defender Restored", positionToColor(b))
					-- 	end
					-- 	if zone.guid==darkCrusader.discZone or zone.guid==elementalist.discZone then
					-- 		broadcastToAll("Leader Level Increased", positionToColor(b))
					-- 	end
					-- 	if zone.guid==volkare.discZone then
					-- 		if mageSearch.defeatedCities[cityScriptZones[volkare.discZone].cityGUID]==nil then
					-- 			broadcastToAll("Volkare has been Restored", positionToColor(b))
					-- 			for c, mageSearch2 in pairs(turnOrder) do
					-- 				if mageSearch2.defeatedCities[cityScriptZones[volkare.discZone].cityGUID]=="Lead" then
					-- 					mageSearch2.keepsBeat=mageSearch2.keepsBeat-1
					-- 				end
					-- 			end
					-- 		else
					-- 			broadcastToAll("Volkare's Army Increased", positionToColor(b))
					-- 		end
					-- 	end
					--else
						if zone.guid~=elementalist.discZone and zone.guid~=darkCrusader.discZone and (gStates.gameScenario=="The Gauntlet"
						or gStates.gameScenario=="The Hidden Valley Blitz" or gStates.gameScenario=="The Realm of the Dead Blitz"
						or gStates.gameScenario=="Life and Death" or gStates.gameScenario=="Dungeon Lords"
						or gStates.gameScenario=="Druid Nights" or gStates.gameScenario=="Mines Liberation") then
							broadcastToAll("City is Friendly to "..mageSearch.mage, positionToColor(b))
						else
							if zone.guid=="8a7266" or zone.guid=="648da8" or zone.guid=="213d78" or zone.guid=="d2d65e" then
								if mageSearch.defeatedCities[cityScriptZones[zone.guid].cityGUID]~=nil then
									broadcastToAll("City has been Conquered", positionToColor(b))
									if gStates.smoke[cityScriptZones[zone.guid].cityGUID]==nil then
										gStates.smoke[cityScriptZones[zone.guid].cityGUID]={}
										for aa=1, 2, 1 do
											local smoke=getObjectFromGUID("6e47a5").clone()
											local test=zone.guid
											Wait.frames(function()
												smoke.lock()
												smoke.setPosition({getObjectFromGUID(cityScriptZones[zone.guid].cityGUID).getPosition()[1], -1*aa, getObjectFromGUID(cityScriptZones[zone.guid].cityGUID).getPosition()[3]})
												smoke.AssetBundle.playLoopingEffect(0)
												gStates.smoke[cityScriptZones[zone.guid].cityGUID][#gStates.smoke[cityScriptZones[zone.guid].cityGUID]+1]=smoke.guid
											end, 2)
										end
									else
										getObjectFromGUID(gStates.smoke[cityScriptZones[zone.guid].cityGUID][1]).AssetBundle.playLoopingEffect(0)
										getObjectFromGUID(gStates.smoke[cityScriptZones[zone.guid].cityGUID][2]).AssetBundle.playLoopingEffect(0)
									end
								else
									broadcastToAll("City Defender Defeated", positionToColor(b))
								end
							end
						end
						if zone.guid==darkCrusader.discZone or zone.guid==elementalist.discZone then
							if gStates.defeatedFactionTest[cityScriptZones[zone.guid].cityGUID]~=nil then
								broadcastToAll("Leader has been Defeated", positionToColor(b))
							else
								broadcastToAll("Leader Level Reduced", positionToColor(b))
							end
						end
						if zone.guid==volkare.discZone then
							if mageSearch.defeatedCities[cityScriptZones[zone.guid].cityGUID]~=nil then
								broadcastToAll("Volkare is Defeated", positionToColor(b))
								if gStates.volkareCityDefeat==false then
									gStates.volkareCityDefeat=true
									for c, mageSearch2 in pairs(turnOrder) do
										if mageSearch2.defeatedCities[cityScriptZones[zone.guid].cityGUID]=="Lead" then
											mageSearch2.keepsBeat=mageSearch2.keepsBeat+1
										end
									end
								end
								if gStates.smoke[cityScriptZones[zone.guid].cityGUID]==nil then
									gStates.smoke[cityScriptZones[zone.guid].cityGUID]={}
									for aa=1, 2, 1 do
										local smoke=getObjectFromGUID("6e47a5").clone()
										local test=zone.guid
										Wait.frames(function()
											smoke.lock()
											smoke.setPosition({getObjectFromGUID(cityScriptZones[zone.guid].cityGUID).getPosition()[1], -1*aa, getObjectFromGUID(cityScriptZones[zone.guid].cityGUID).getPosition()[3]})
											smoke.AssetBundle.playLoopingEffect(0)
											gStates.smoke[cityScriptZones[zone.guid].cityGUID][#gStates.smoke[cityScriptZones[zone.guid].cityGUID]+1]=smoke.guid
										end, 2)
									end
								else
									getObjectFromGUID(gStates.smoke[cityScriptZones[zone.guid].cityGUID][1]).AssetBundle.playLoopingEffect(0)
									getObjectFromGUID(gStates.smoke[cityScriptZones[zone.guid].cityGUID][2]).AssetBundle.playLoopingEffect(0)
								end
							else
								broadcastToAll("Volkare's Army Reduced", positionToColor(b))
							end
						end
					--end
					adjustHandSize()
					break
				end
			end
			pause=false
		end, 10) end
	end
	addAvatarButtons()
end

--new XML buttons on skills, offer and tactic cards
function createClaimButton(objGUID, source)
	local onClick="global/claimMove"
	local width=180
	local height=50
	local position="0 190 -10"
	local rotation="0 0 180"
	local image=""
	local text="^ CLAIM"
	local fontSize="30"
	for a=1, 32, 1 do
		if source==tostring(a) or source=="higherLevelSkill" then
			if source==tostring(a) then	onClick="global/skillMove" else onClick="global/higherLevelSkill" end
			width=150
			height=140
			position="-270 0 -1"
			image=" Short"
			text="<"
			fontSize="100"
			break
		end
	end
	if source:sub(1,6)=="tactic" or source:sub(1,12)=="removeTactic" then
		width=120
		height=30
		position="0 130 -1"
		fontSize="20"
		if source:sub(1,12)=="removeTactic" then
			text="^ REMOVE"
			onClick="global/removeTactic"
		end
		if source=="tactic7" or source=="removeTactic5" then
			width=675
			height=69
			fontSize="47"
			image=" Long"
			rotation="180 180 180"
			if source=="tactic7" then
				position="0 211 -29"
				onClick="global/dummyTurn"
				text="Pick Random for Dummy"
			else
				position="-400 211 -29"
				onClick="global/removeTactic"
				text="^ Remove Both ^"
			end
		end
	end
    return {tag="Button", attributes={id=objGUID..source, onClick=onClick, onMouseDown="global/ButtonClickDown", onMouseUp="global/ButtonClickUp", onMouseExit="global/ButtonClickUp", height=height, width=width, position=position, rotation=rotation},--, onMouseEnter="global/highLightOn", func="", color="",
			children={	{tag="Image", attributes={id=objGUID..source.."Image", image="Button Active"..image}},
						{tag="Text", attributes={id=objGUID..source.."Text", fontSize=fontSize, fontStyle="Bold", alignment="MiddleCenter", text=text}}}}
end

function removeTactic(player, mouseButton, id)
	if mouseButton=="-1" then
		if id:sub(7,string.len(id))=="removeTactic5" then
			for b=1, 6, 1 do
				local obj=getObjectFromGUID(tacticZones[b]).getObjects()
				for c=1, #obj, 1 do
					if obj[c].tag=="Tile" then obj[c].destruct() end
				end
			end
		else
			getObjectFromGUID(id:sub(1, 6)).destruct()
		end
		gStates.tacticRemove=false
		tacticToggle()
	end
end

--adjust hand Size
function adjustHandSize()
	local found=false
	for b, avatar in pairs(mageKnights) do
		if turnOrder[gStates.turnNumber].mage==avatar.mage and avatar.mage~="Volkare" then
			if getObjectFromGUID(avatar.model)~=nil then found=true Wait.frames(function() onObjectDrop(nil, getObjectFromGUID(avatar.model)) end, 1) break end
			if getObjectFromGUID(avatar.token)~=nil then found=true Wait.frames(function() onObjectDrop(nil, getObjectFromGUID(avatar.token)) end, 1) break end
			if getObjectFromGUID(avatar.standee)~=nil then found=true Wait.frames(function() onObjectDrop(nil, getObjectFromGUID(avatar.standee)) end, 1) break end
			break
		end
	end
	if found==false then mainUIUpdate("Incremented to Dummy's Turn") end
end

--refill empty token piles. Both onObjectEnterScriptingZone and endRound call this routine
function tokenRefill()
	local tokenPileLink={	{discard="6ae8c3", destination=monsterPiles.purple},--Mage Towers Discard-->Main
							{discard="b336a7", destination=monsterPiles.gray},--Keeps Discard-->Main
							{discard="730898", destination=monsterPiles.white},--Cities Discard-->Main
							{discard="869a0f", destination=monsterPiles.yellow},--Ruins Discard-->Main
							{discard="b23c77", destination=monsterPiles.red},--Draconum Discard-->Main
							{discard="763c2d", destination=monsterPiles.tan},--Dungeon Discard-->Main
							{discard="ed0ec9", destination=monsterPiles.green},--Ork Discard-->Main
							{discard="9860ce", destination=monsterPiles.redDark},--Dark Crusader Draconum Discard-->Main
							{discard="e9b18c", destination=monsterPiles.tanDark},--Dark Crusader Dungeon Discard-->Main
							{discard="61ba30", destination=monsterPiles.greenDark},--Dark Crusader Ork Discard-->Main
							{discard="f9d3a4", destination="f469f4"},--Dark Crusader Reward Discard-->Main
							{discard="80c10d", destination=monsterPiles.redElem},--Elementalist Draconum Discard-->Main
							{discard="236555", destination=monsterPiles.tanElem},--Elementalist Dungeon Discard-->Main
							{discard="4aecb4", destination=monsterPiles.greenElem},--Elementalist Ork Discard-->Main
							{discard="076ab9", destination="33de41"}}--Elementalist Reward Discard-->Main
	for a=1, #tokenPileLink, 1 do
		local discardPug=tokenPileLink[a].discard
		local destinationPug=tokenPileLink[a].destination
		if getObjectFromGUID(destinationPug)~=nil and getObjectFromGUID(discardPug)~=nil then
			if #getObjectFromGUID(destinationPug).getObjects()==0 then
				if #getObjectFromGUID(discardPug).getObjects()>0 then
					getObjectFromGUID(discardPug).shuffle()
					for _, take in pairs(getObjectFromGUID(discardPug).getObjects()) do
						local obj=getObjectFromGUID(discardPug).takeObject()
						gStates.monsterPlayLocation[obj.guid]=nil
						getObjectFromGUID(destinationPug).putObject(obj)
					end
				end
			end
		end
	end
end

--used to workout the ofset for each hex on a terrain tile
function angleToXY(obj, ang)
	XY={}
	hexRotationRad=math.rad(360-obj.getRotation()[2]+tonumber(ang))
	XY[1]=obj.getPosition()[1]+(math.cos(hexRotationRad)*2.39)
	XY[2]=obj.getPosition()[3]+(math.sin(hexRotationRad)*2.39)
	return XY
end

--Plays rampaging tokens. Both onObjectEnterScriptingZone and endRound call this routine
function playRampagingTokens(obj, startBearing, northBearing, hexLocation, hexFeature, dropped)
	local virtualDie=math.random(1,6)
	local free=true
	local params={}
	--set position of terrain hex in real world coordinates
	if hexLocation=="center" then params.position={obj.getPosition()[1], 2, obj.getPosition()[3]}
	else params.position={angleToXY(obj, hexLocation)[1], 2, angleToXY(obj, hexLocation)[2]} end
	--Check if the hex has any existing tokens for Rampage Variant
	if (gStates.rampage==1 and virtualDie>=4) or gStates.rampage==2 then
		spawnObject({type="ScriptingTrigger", position=params.position, scale={x=1.75, y=1.75, z=1.75}, sound=false, callback_function = function(pass)
			for e, f in pairs(getObjectFromGUID(pass.guid).getObjects()) do
				local name=nil
				if f.getRotationValues()[2]~=nil then name=f.getRotationValues()[2].value else name=f.getName() end
				local nameList={"Marauding Orcs", "Marauding Elementalist", "Marauding Dark Crusader",
								"Draconum", "Elementalist Draconum", "Dark Crusader Draconum",
								"Arythea", "Bravelar", "Goldyx", "Krang", "Norowas", "Tovak", "Volkare", "Wolfhawk", "Ymirgh"}
				for g, h in pairs(nameList) do
					if name==h then free=false break end
				end
			end
			pass.destruct()
		end})
	end
	Wait.frames(function()
		if dropped==true or (gStates.rampage==1 and virtualDie>=4 and free==true) or (gStates.rampage==2 and free==true) then
			tokenRefill()
			local tokenPileGreen=	monsterPiles.green--Standard green Tokens
			local tokenPileBrown=	monsterPiles.tan--Standard Brown Tokens
			local tokenPileRed=		monsterPiles.red--Standard Red Tokens
			if gStates.gameScenario=="Life and Death" then
				if startBearing<=northBearing then
					if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then tokenPileGreen=monsterPiles.greenElem end
					if getObjectFromGUID(monsterPiles.tanElem).getQuantity()>0 then tokenPileBrown=monsterPiles.tanElem end
					if getObjectFromGUID(monsterPiles.redElem).getQuantity()>0 then tokenPileRed=monsterPiles.redElem end --elementalist Tokens
				else
					if (startBearing<=northBearing+1 and gStates.coop==1) or (gStates.coop==0 and obj.getPosition()[3]<-7 and obj.getPosition()[3]>-8 and obj.getPosition()[1]<-31 and obj.getPosition()[1]>-32) then
						if math.random(1,2)==1 then --Random Shades Token
							if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then tokenPileGreen=monsterPiles.greenElem end
							if getObjectFromGUID(monsterPiles.tanElem).getQuantity()>0 then tokenPileBrown=monsterPiles.tanElem end
							if getObjectFromGUID(monsterPiles.redElem).getQuantity()>0 then tokenPileRed=monsterPiles.redElem end --elementalist Tokens
						else
							if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then tokenPileGreen=monsterPiles.greenDark end
							if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then tokenPileBrown=monsterPiles.tanDark end
							if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then tokenPileRed=monsterPiles.redDark end---Dark Crusader Tokens
						end
					else
						if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then tokenPileGreen=monsterPiles.greenDark end
						if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then tokenPileBrown=monsterPiles.tanDark end
						if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then tokenPileRed=monsterPiles.redDark end---Dark Crusader Tokens
					end
				end
			end
			if gStates.gameScenario=="The Realm of the Dead Blitz" then
				if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then tokenPileGreen=monsterPiles.greenDark end
				if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then tokenPileBrown=monsterPiles.tanDark end
				if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then tokenPileRed=monsterPiles.redDark end---Dark Crusader Tokens
			end
			if gStates.gameScenario=="The Hidden Valley Blitz" then
				if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then tokenPileGreen=monsterPiles.greenElem end
				if getObjectFromGUID(monsterPiles.tanElem).getQuantity()>0 then tokenPileBrown=monsterPiles.tanElem end
				if getObjectFromGUID(monsterPiles.redElem).getQuantity()>0 then tokenPileRed=  monsterPiles.redElem end --elementalist Tokens
			end
			params.rotation={0.0, 180.0, 0.0}
			if hexFeature=="draconum" and gStates.gameScenario~="The Lost Relic Blitz" then tokenPileGreen=tokenPileRed end
			--play Green token
			if getObjectFromGUID(tokenPileGreen)~=nil and getObjectFromGUID(tokenPileGreen).getQuantity()>0 then
				local token=getObjectFromGUID(tokenPileGreen).takeObject(params)
				gStates.monsterPlayLocation[token.guid]=params.position
				gStates.rampagingMonsters[token.guid]=true
				if gStates.rampageAmbush==true and gStates.tacticShown==false and dropped==true then
					--token.addDecal({name="Ambush Circle", url="http://cloud-3.steamusercontent.com/ugc/1617313257052487169/A0FE9D65A1E285BC563116914A5D6C36DF0B7B6E/",
					--position={0, 0.05, 0}, rotation={90.0, 180.0, 0.0}, scale={11, 11, 11}})
					gStates.ambushing[token.guid]=params.position
				end
				if gStates.rampagePursuit==true and gStates.tacticShown==false and dropped==true then
					for _, mage in pairs(mageKnights) do
						if mage.mage==turnOrder[gStates.turnNumber].mage then
							--token.addDecal({name="Pursue Shield", url=mage.shieldImage,
							--position={0, 0.15, 0}, rotation={90.0, 180.0, 0.0}, scale={1, 1, 1}})
							if gStates.pursuing[mage.mage]==nil then gStates.pursuing[mage.mage]={} end
							gStates.pursuing[mage.mage][token.guid]={state="Deployed", location=params.position}
						end
					end
				end
			else
				broadcastToAll("Sorry, There are no Rampage tokens left to deploy", {1,0,0})
			end
			--play Brown token
			if dropped==false and ((gStates.rampage==1 and virtualDie==6) or (gStates.rampage==2 and virtualDie>=4)) then
				params.position[1]=params.position[1]+0.2
				params.position[2]=params.position[2]+0.5
				params.position[3]=params.position[3]+0.2
				if getObjectFromGUID(tokenPileBrown).getQuantity()>0 then
					local token=getObjectFromGUID(tokenPileBrown).takeObject(params)
					gStates.monsterPlayLocation[token.guid]=params.position
					gStates.rampagingMonsters[token.guid]=true
				else
					broadcastToAll("Sorry, There are no Brown Monster tokens left to deploy", {1,0,0})
				end
			end
		end
	end, 3)
end

--Pillage Village, draw two cards for chosen mage and reduce Reputation by 1
function plunderVillage(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, tonumber(id:sub(8,8)))==true then
			for a=1, #turnOrder, 1 do
				if turnOrder[a].seatPos==tonumber(id:sub(8,8)) then
					broadcastToAll(turnOrder[a].mage.." just Plundered their Village.", positionToColor(a))

					--draw two cards for chosen mage
					local temp=gStates.turnNumber
					gStates.turnNumber=a
					DrawUpTo({color="Black"}, "-1", "DrawOne")--color is only there to stop error
					DrawUpTo({color="Black"}, "-1", "DrawOne")--color is only there to stop error
					gStates.turnNumber=temp
					turnOrder[a].deedCount=turnOrder[a].deedCount-2

					--reduce Reputation by 1
					local repPos=reputationTable[turnOrder[a].reputation-1].reputationPos
					getObjectFromGUID(turnOrder[a].reputationGUID).setPosition({repPos[1], repPos[2], repPos[3]})

					--only alow once per turn
					turnOrder[a].pillagedVillage=true
					mainUIUpdate("Village Pillaged")
					break
				end
			end
		end
	end
end

function nightTactic2(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, tonumber(id:sub(14,14)))==true then
			for a=1, #turnOrder, 1 do
				if turnOrder[a].seatPos==tonumber(id:sub(14,14)) then
					--Find Discard Deck
					for b, discards in pairs(getObjectFromGUID(deedDeckDiscardZones[turnOrder[a].seatPos]).getObjects()) do
						if discards.tag=="Deck" then
							--shuffle discard
							discards.shuffle()
							--put three discards in deed deck
							local deckPos={-73.90+(40*(turnOrder[a].seatPos-1)), 1.50, -43.16}
							discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
							discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
							discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
							break
						end
					end
					--stop from repeating
					gStates.tacticTwoState="Used"
					--flip over tactic
					if getObjectFromGUID("f6ad01").is_face_down==false then getObjectFromGUID("f6ad01").flip() end
					broadcastToAll(turnOrder[a].mage.." used Tactic to refill Deed Deck with 3 Random discards", positionToColor(a))
					mainUIUpdate("Night Tactic 2 Used")
					break
				end
			end
		end
	end
end

function nightTactic4(player, mouseButton, id)
	if mouseButton=="-1" then
		local playerPosition=tonumber(id:sub(14,14))
		if legalPlayerCheck(player.color, playerPosition)==true then
			for a=1, #turnOrder, 1 do
				if turnOrder[a].seatPos==playerPosition then
					--find positions deed deck
					local deedDeck=nil
					for b, possibleDeck in pairs(getObjectFromGUID(deedDeckZones[playerPosition]).getObjects()) do
						if possibleDeck.tag=="Deck" or possibleDeck.tag=="Card" then deedDeck=possibleDeck break end
					end
					--Shuffle Deed Deck
					deedDeck.shuffle()
					Wait.time(function()
						--work out how many cards were Placed
						for x, b in pairs(getObjectFromGUID(deedDeckZones[playerPosition]).getObjects()) do
							if b.tag=="Deck" then
								--Refill Hand - Potential for something else to happen while turnorder is not correct?
								local temp=gStates.turnNumber
								gStates.turnNumber=a
								for f=1, b.getQuantity()-turnOrder[a].deedCount, 1 do
									DrawUpTo({color="Black"}, "-1", "DrawOne")--color is only there to stop error
								end
								gStates.turnNumber=temp
								break
							end
						end
						--flip Tactic face down
						if getObjectFromGUID("db7aaa").is_face_down==false then getObjectFromGUID("db7aaa").flip() end
						--Update states and buttons
						gStates.tacticFourState="Used"
						broadcastToAll(turnOrder[a].mage.." used Tactic 4 to redraw hand", positionToColor(a))
						mainUIUpdate("night Tactic 4 Used")
					end, 0.5)
				end
			end
		end
	end
end

function nightTactic6(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, tonumber(id:sub(18,18)))==true then
			if id:sub(1,17)=="NightTactic6Store" then
				--lift tactic up
				getObjectFromGUID("e2af14").setPositionSmooth({getObjectFromGUID("e2af14").getPosition()[1], 4, getObjectFromGUID("e2af14").getPosition()[3]})
				--move top deed deck card under tactic
				for a, deedZoneObj in pairs(getObjectFromGUID(deedDeckZones[math.ceil((getObjectFromGUID("e2af14").getPosition()[1]+78)/40)]).getObjects()) do
					if deedZoneObj.name=="Card" then
						deedZoneObj.setPosition({getObjectFromGUID("e2af14").getPosition()[1], 1.2, getObjectFromGUID("e2af14").getPosition()[3]})
						deedZoneObj.setRotation({0, 180, 180})
						break
					end
					if deedZoneObj.tag=="Deck" then
						deedZoneObj.takeObject({position={getObjectFromGUID("e2af14").getPosition()[1], 1.2, getObjectFromGUID("e2af14").getPosition()[3]}, rotation={0, 180, 180}})
						break
					end
				end
				--Update states and buttons
				gStates.powerStored=gStates.powerStored+1
				gStates.tacticSixState="Stored"
				mainUIUpdate("Night Taxtic 6 Stored")
			end
			if id:sub(1,17)=="NightTactic6Claim" then
				--look for objects under tactic
				spawnObject({type="ScriptingTrigger", position=getObjectFromGUID("e2af14").getPosition(), scale={x=0.6, y=0.6, z=0.6}, sound=false, callback_function = function(pass)
					for c=1, 3, 1 do
						for a, underTactic in pairs(getObjectFromGUID(pass.guid).getObjects()) do
							--move all cards under tactic to hand
							if underTactic.tag=="Deck" then
								for b=1, underTactic.getQuantity(), 1 do
									underTactic.takeObject({position={(math.ceil((getObjectFromGUID("e2af14").getPosition()[1]+78)/40)*40)-100, 4.59, -47.55}, rotation={0, 180, 0}})
								end
								break
							end
							if underTactic.tag=="Card" and underTactic.getName()~="Night Tactic 6" then
								underTactic.setPosition({(math.ceil((getObjectFromGUID("e2af14").getPosition()[1]+78)/40)*40)-100, 4.59, -47.55})
								underTactic.setRotation({0, 180, 0})
								break
							end
						end
					end
					--flip tactic face down
					if getObjectFromGUID("e2af14").is_face_down==false then getObjectFromGUID("e2af14").flip() end
					--Update states and buttons
					gStates.powerStored=0
					gStates.tacticSixState="Used"
					mainUIUpdate("Night Taxtic 6 Stored")
					pass.destruct()
				end})
			end
		end
	end
end

--Motivation Skill Usage. To run via script-motivation({color="Black"}, -1, skillGUID.."xxxxxxxxxxx"..PlayerPos)
function motivation(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, tonumber(id:sub(18, 18)))==true then
			for a=1, #turnOrder, 1 do
				if turnOrder[a].seatPos==tonumber(id:sub(18, 18)) then
					broadcastToAll(turnOrder[a].mage.." used a Motivation skill.", positionToColor(a))

					--draw two cards for chosen mage
					local temp=gStates.turnNumber
					gStates.turnNumber=a
					DrawUpTo({color="Black"}, "-1", "DrawOne")--color is only there to stop error
					DrawUpTo({color="Black"}, "-1", "DrawOne")--color is only there to stop error
					gStates.turnNumber=temp
					turnOrder[a].deedCount=turnOrder[a].deedCount-2

					--Gain Fame or mana token
					local lowestFame=1
					for b=2, #turnOrder, 1 do
						if turnOrder[b].mage~=gStates.positionMageKnight[5] then
							if turnOrder[b].fame<turnOrder[lowestFame].fame or turnOrder[lowestFame].mage==gStates.positionMageKnight[5] then lowestFame=b end
						end
					end
					for b=1, #turnOrder, 1 do
						if turnOrder[b].fame==turnOrder[lowestFame].fame and b~=lowestFame then lowestFame=0 break end
					end
					if turnOrder[lowestFame].seatPos==tonumber(id:sub(18, 18)) then
						local params={position={(gStates.motivationSkill[id:sub(1, 6)].pos*40)-101, 1.65, -39}, rotation={0, 0, 0}, smooth=false}
						if gStates.motivationSkill[id:sub(1, 6)].bonus:sub(11, 13)=="Red" then
							getObjectFromGUID("819a62").takeObject(params)
							broadcastToAll("and gained a Red Mana Token also", positionToColor(a))
						end
						if gStates.motivationSkill[id:sub(1, 6)].bonus:sub(11, 14)=="Blue" then
							getObjectFromGUID("8ae7b8").takeObject(params)
							broadcastToAll("and gained a Blue Mana Token also", positionToColor(a))
						end
						if gStates.motivationSkill[id:sub(1, 6)].bonus:sub(11, 15)=="White" then
							getObjectFromGUID("4f6569").takeObject(params)
							broadcastToAll("and gained a White Mana Token also", positionToColor(a))
						end
						if gStates.motivationSkill[id:sub(1, 6)].bonus:sub(11, 15)=="Green" then
							getObjectFromGUID("a30eb7").takeObject(params)
							broadcastToAll("and gained a Green Mana Token also", positionToColor(a))
						end
						if gStates.motivationSkill[id:sub(1, 6)].bonus:sub(11, 14)=="Fame" then
							local startingFameToLevel=math.floor(math.sqrt((turnOrder[a].fame-(gStates.scoreIfLooped*turnOrder[a].scoreLoop))+1))
							local newFame=turnOrder[a].fame+1-(gStates.scoreIfLooped*turnOrder[a].scoreLoop)
							local scoreLooped=false
							if newFame>=gStates.scoreIfLooped then newFame=newFame-gStates.scoreIfLooped scoreLooped=true end
							local fameToLevel=math.floor(math.sqrt(newFame+1))
							local startPosition=(newFame-(fameToLevel*fameToLevel))+2
							if scoreLooped==false then startPosition=startPosition+((fameToLevel-startingFameToLevel)*gStates.blitz) end
							local levelRowFameQuantity=(((fameToLevel-1)*cellGainPerLevel)+normalCellAmount)
							local levelRowLength=((fameToLevel-1)*gStates.rowLengthGainPerLevel)+gStates.normalRowLength
							local xOffset=(1/levelRowFameQuantity*levelRowLength)/2
							local yOffset=(heightOfFameBoard/gStates.rowsOnBoard)/2
							local horizontalValue=leftOfFameBoard+(startPosition/levelRowFameQuantity*levelRowLength)-xOffset
							local verticalValue=(topOfFameBoard-((fameToLevel/gStates.rowsOnBoard)*heightOfFameBoard))+yOffset-0.25
							getObjectFromGUID(turnOrder[a].fameGUID).setPosition({horizontalValue, 1.5, verticalValue+((turnOrder[a].seatPos-2.5)/5)})
							broadcastToAll("and gained a Fame also", positionToColor(a))
						end
					end
					--flip skill down.
					getObjectFromGUID(id:sub(1, 6)).setRotationSmooth({0, 180, 180})
					getObjectFromGUID(id:sub(1, 6)).setPositionSmooth({gStates.mageSkills[id:sub(1, 6)][1], 1.5, gStates.mageSkills[id:sub(1, 6)][3]})

					--only allow once per turn
					gStates.motivationSkill[id:sub(1, 6)].state="used"
					mainUIUpdate("Motivation Skill activated")
					break
				end
			end
		end
	end
end

--Draw cards from a deed deck into that positions hand
function DrawUpTo(player, mouseButton, id)
	if mouseButton=="-1" then
		local playerPosition=turnOrder[gStates.turnNumber].seatPos
		if legalPlayerCheck(player.color, playerPosition)==true then
			local deedDeck=nil
			for a, possibleDeck in pairs(getObjectFromGUID(deedDeckZones[playerPosition]).getObjects()) do
				if possibleDeck.tag=="Deck" or possibleDeck.tag=="Card" then deedDeck=possibleDeck break end
			end
			if deedDeck~=nil then
				local cardsInHand=0
				local handSize=turnOrder[gStates.turnNumber].hand+turnOrder[gStates.turnNumber].handBonus+gStates.tactic4HandBonus
				if id=="DrawHand" then
					for a, possibleCards in pairs(getObjectFromGUID(handZones[playerPosition]).getObjects()) do
						if possibleCards.tag=="Card" then cardsInHand=cardsInHand+1 end
					end
				else--Draw one
					cardsInHand=handSize-1
				end
				if handSize>cardsInHand then
					local waitTime=0
					--Night tactic 2 grab three random discards back to deck if draw will reduce to 0.
					if id=="DrawHand" and handSize-cardsInHand>=deedDeck.getQuantity() and gStates.endRoundCalled==false and turnOrder[gStates.turnNumber].tactic==2 and gStates.dayRound==false and gStates.tacticTwoState~="Used" and turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5] then
						--Raise deed deck or card
						local deckPos=deedDeck.getPosition()
						deedDeck.setPositionSmooth({deckPos[1], 3, deckPos[3]})
						--Find Discard Deck
						for a, discards in pairs(getObjectFromGUID(deedDeckDiscardZones[playerPosition]).getObjects()) do
							if discards.tag=="Deck" then
								--shuffle discard
								discards.shuffle()
								--put three discards in deed deck
								discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
								discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
								discards.takeObject({position=deckPos, smooth=true, rotation={0, 180, 180}})
								break
							end
						end
						--stop from repeating
						gStates.tacticTwoState="Used"
						--flip over tactic
						if getObjectFromGUID("f6ad01").is_face_down==false then getObjectFromGUID("f6ad01").flip() end
						broadcastToAll("Night Tactic Two was used to refill Deed Deck with 3 Random discards", positionToColor(gStates.turnNumber))
						waitTime=150
					end
					Wait.frames(function()
						for a, possibleDeck in pairs(getObjectFromGUID(deedDeckZones[playerPosition]).getObjects()) do
							if possibleDeck.tag=="Deck" or possibleDeck.tag=="Card" then deedDeck=possibleDeck break end
						end
						if deedDeck.tag=="Deck" then
							for x=1, handSize-cardsInHand, 1 do
								deedDeck.takeObject({position={(playerPosition*40)-105-(x*0.2), 4.59, -47.55}, rotation={0, 180, 0}})
							end
						else
							deedDeck.setPositionSmooth({(playerPosition*40)-105, 4.59, -47.55})
							deedDeck.setRotationSmooth({0, 180, 0})
						end
					end, waitTime)
				end
		    end
		end
	end
end

--Deals all the hands by fast forwarding through the turns
function DealAllHands()
	local temp=gStates.turnNumber
	for a=1, #turnOrder, 1 do
		gStates.turnNumber=a
		if turnOrder[gStates.turnNumber].mage~=gStates.positionMageKnight[5] then DrawUpTo({color="Black"}, "-1", "DrawHand") end--color is only there to stop error
	end
	gStates.turnNumber=temp
	Wait.frames(function()
		for x=1, #turnOrder, 1 do
			--Records current amount of cards in deed deck
			for a, b in pairs(getObjectFromGUID(deedDeckZones[turnOrder[x].seatPos]).getObjects()) do
				if b.tag=="Card" then turnOrder[x].deedCount=1 end
				if b.tag=="Deck" then turnOrder[x].deedCount=b.getQuantity() end
			end
		end
	end, 10)
end

--Fill any gaps in the offer by sliding more cards down the line
function fillSlide()
	local offerList={{}, {}}
	local sourceDeck={"7ce69e", "f752bb"}
	for _, obj in pairs(getObjectFromGUID("45cc44").getObjects()) do
		if obj.tag=="Card" then
			local cardSpot=obj.getPosition()
			offerList[math.floor(((-cardSpot[3]-10.2)/6)+0.5)][math.floor(((cardSpot[1]-21.6)/4.8)+0.5)]=obj.guid
		end
	end

	--fill gaps in the offer
	for column=1, gStates.offerSize, 1 do
		for row=1, 2, 1 do
			if offerList[row][column]==nil then
				for replaceColumn=column+1, gStates.offerSize+1, 1 do
					if replaceColumn<gStates.offerSize+1 then
						--fill empty spaces with cards further up the offer
						if offerList[row][replaceColumn]~=nil then
							getObjectFromGUID(offerList[row][replaceColumn]).setPositionSmooth({(column*4.8)+21.6, 1.5, -((row*6)+10.2)})
							getObjectFromGUID(offerList[row][replaceColumn]).setRotationSmooth({0, 180, 0})
							offerList[row][column]=offerList[row][replaceColumn]
							offerList[row][replaceColumn]=nil
							break
						end
					else
						--fill empty spaces from deck when no cards are found
						local MainDeck=getObjectFromGUID(sourceDeck[row]).getObjects()
						if MainDeck[1]~=nil then
							if MainDeck[1].tag=="Deck" then
								local newcard=MainDeck[1].takeObject({position={((column*4.8)+21.6), 1.5, -((row*6)+10.2)}, rotation={0, 180, 0}})
								offerList[row][column]=newcard.guid
							else
								MainDeck[1].setPositionSmooth({(column*4.8)+21.6, 1.5, -((row*6)+10.2)})
								MainDeck[1].setRotationSmooth({0, 180, 0})
								MainDeck[1]=nil
							end
						end
					end
				end
			end
		end
	end
end

--Unit and Monastery Offer update
function UnitOffer()
	local unitPlace=		{{36.0, 1.25,  -4.2}, {31.2, 1.25,  -4.2}, {26.4, 1.25,  -4.2}, {21.6, 1.25,  -4.2}, {16.8, 1.25,  -4.2}, {12.0, 1.25,  -4.2}, {7.2, 1.25, -4.2}, {2.4, 1.25, -4.2}}
	local monasteryPlace=	{{36.0, 1.25, -10.2}, {31.2, 1.25, -10.2}, {26.4, 1.25, -10.2}, {21.6, 1.25, -10.2}, {16.8, 1.25, -10.2}, {12.0, 1.25, -10.2}}
	local drawDecks=		{["Regular Unit"]="4fa2f2", ["Elite Unit"]="715b48", ["Advanced Action"]="7ce69e"}--Zone covering Regular units draw deck, Elite Units Draw Deck, Advanced Actions Draw Deck
	local skip=false
	--Place existing cards under raised decks
	local offerCards=getObjectFromGUID("a3d99b").getObjects()--Zone where units and monastery cards are played
	for i=1, #offerCards, 1 do
		if offerCards[i].tag=="Card" then
			getObjectFromGUID(getObjectFromGUID(drawDecks[offerCards[i].getName()]).getObjects()[1].guid).putObject(offerCards[i])
		end
		if offerCards[i].tag=="Deck" then
			for j=1, offerCards[i].getQuantity(), 1 do
				local pos=offerCards[i].getPosition()
				local params={position={pos.x-j*0.85+1, pos.y+0.15, pos.z}}
				offerCards[i].takeObject(params)
			end
			--Wait.frames(UnitOffer(), 50)
			broadcastToAll("Sorry, I seem to have double dealt. Manual cleaning of Offer required", {1,0,0})
			skip=true
		end
	end

	if skip==false then
		local params={smooth=true, rotation={0, 180, 0}}
		--Place Unit Cards
		for a=1, gStates.totalUnitCount, 1 do
			params.position=unitPlace[a]
			local drawDeckType=drawDecks["Regular Unit"]
			if gStates.eliteUnitsUsed==true and (a==1 or a==3 or a==5 or a==7 or a==9) then drawDeckType=drawDecks["Elite Unit"] end
			getObjectFromGUID(getObjectFromGUID(drawDeckType).getObjects()[1].guid).takeObject(params)
		end

		--Place Monastery offer cards
		for i=1, gStates.monasteryCount, 1 do
			params.position=monasteryPlace[i]
			getObjectFromGUID(getObjectFromGUID(drawDecks["Advanced Action"]).getObjects()[1].guid).takeObject(params)
		end
	end
end

--checks the clicking player matches the current turn
function legalPlayerCheck(clickingPlayersColor, playerPosExpected)
	--converts player color in to a posiion value
	local playerPosition=0
	if Player[clickingPlayersColor].seated==true and clickingPlayersColor~="Black" then playerPosition=math.ceil((Player[clickingPlayersColor].getHandTransform().position[1]+97.59)/40) end
	if playerPosition==playerPosExpected or clickingPlayersColor=="Black" or turnOrder[gStates.turnNumber].mage==gStates.positionMageKnight[5] then
		return true
	else
		for a=1, #turnOrder, 1 do
			if turnOrder[a].seatPos==playerPosExpected then
				broadcastToAll("Only player sitting at "..turnOrder[a].mage.." or Game Master(Black) may press this.\n(Change seats by left clicking your Name found in the upper right corner)", {1,0,0})
				break
			end
		end
		return false
	end
end

--Add Icons to players Avatar and Rampaging Monsters
function addAvatarButtons()
	--go through all mage knights
	for a, details in pairs(mageKnights) do
		if details.shieldContainer~=nil then
			--add marker token to all avatars
			local scale=1
			local mageShield={}
			local mageMarker={}
			local avatarButton={}
			if getObjectFromGUID(details.model)~=nil then scale=0.9 end
			if getObjectFromGUID(details.token)~=nil then scale=0.53 end
			--add icons based on Avatar
			for b, player in pairs(turnOrder) do
				if player.mage==details.mage and player.mage~=gStates.positionMageKnight[5] then
					--work out Avatar Position
					local avPos={}
					local cityHasMonsters=false
					local cityHasShields=false
					if getObjectFromGUID(details.model)~=nil then avPos=getObjectFromGUID(details.model).getPosition() end
					if getObjectFromGUID(details.token)~=nil then avPos=getObjectFromGUID(details.token).getPosition() end
					if getObjectFromGUID(details.standee)~=nil then avPos=getObjectFromGUID(details.standee).getPosition() end
					--Use City Model location as Avatar Location if in City
					if player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp" then
						--figure out which city avatar is in
						for zone, citySearch in pairs(cityScriptZones) do
							local shield=0
							for obj, detail in pairs(getObjectFromGUID(zone).getObjects()) do
								if detail.getName()==player.mage then
									avPos=getObjectFromGUID(citySearch.cityGUID).getPosition()
									--check if all monsters are dead
									if gStates.cityMonsterQty[citySearch.cityGUID]~=nil then
										for cityguid, monsters in pairs(gStates.cityMonsterQty[citySearch.cityGUID]) do
											if monsters=="alive" then cityHasMonsters=true end
										end
									end
									--check if enough shields are present
									for obj2, detail2 in pairs(getObjectFromGUID(zone).getObjects()) do
										if detail2.getName()=="Shield" then
											shield=shield+1
											if (gStates.cityMonsterQty[citySearch.cityGUID]~=nil and shield>=gStates.cityMonsterQty[citySearch.cityGUID].shieldsNeeded) or gStates.cityMonsterQty[citySearch.cityGUID]==nil then cityHasShields=true end--Volkare will lock off early :-(
										end
									end
									break
								end
							end
						end
					end
					--look for objects around avatar
					for c, obj in pairs(getObjectFromGUID(mapArea).getObjects()) do
						local monsterPos=obj.getPosition()
						local avatarToObjDist=math.sqrt(((monsterPos[1]-avPos[1])^2)+((monsterPos[3]-avPos[3])^2))
						--record if shield is found
						if obj.getName()=="Shield" and avatarToObjDist<1 then
							mageShield[details.mage]=obj.getDescription()
						end
						--record if Marker is found
						if obj.getName():sub(string.len(obj.getName())-5, string.len(obj.getName()))=="Marker" and avatarToObjDist<1 then
							mageMarker[details.mage]=obj.getName():sub(1, string.len(obj.getName())-7)
						end
						--see if a rampaging token is Nearby and give it a button
						if b==gStates.turnNumber then
							if gStates.rampagingMonsters[obj.guid]==true then
								if player.combatIconHide~="Both" and getObjectFromGUID(player.turnOrderTokenGUID).is_face_down==false
									and (avatarToObjDist<3.1 or (avatarToObjDist<5.1 and gStates.ambushing[obj.guid]~=nil)) then
									getObjectFromGUID(obj.guid).UI.setXmlTable({{tag="Button", attributes={id=obj.guid..details.mage,
										onClick="global/attackLocation",
										height=70/0.9, width=70/0.9,
										position="0 "..tostring(120/0.9).." "..tostring(-20/0.9), rotation="0 0 180",
										color="rgba(0,0,0,0.0)"},
										children={{tag="Image", attributes={image="Attack Button"}}}}})
								else
									getObjectFromGUID(obj.guid).UI.setXmlTable({{}})
								end
							end
						end
					end
					--Marker can be dropped
					if mageMarker[details.mage]~=details.mage then
						avatarButton[#avatarButton+1]={tag="Button", attributes={id=details.marrkerContainer.."MarkerDrop",
							onClick="global/shieldDrop",
							height=70/scale, width=70/scale,
							position=tostring(-70/scale).." "..tostring(100/scale).." "..tostring(-25/scale), rotation="0 0 180",
							color="rgba(0,0,0,0.0)"},
							children={{tag="Image", attributes={image="Marker Button "..details.mage}}}}
					end
					--Shield can be dropped
					if player.avatarLocation~=nil and ((mageShield[details.mage]==nil and (player.avatarLocation=="keep" or player.avatarLocation=="mage tower"
							or player.avatarLocation=="monastery" or player.avatarLocation=="ruin"
							or player.avatarLocation=="dungeon" or player.avatarLocation=="tomb"
							or player.avatarLocation=="monster den" or player.avatarLocation=="spawning grounds"
							or (player.avatarLocation=="glade" and gStates.gameScenario=="Life and Death") or player.avatarLocation=="graveyard"
							or (player.avatarLocation:sub(1, 4)=="mine" and gStates.gameScenario=="Mines Liberation")
							or (player.avatarLocation=="city" and gStates.gameScenario=="The Lost Relic Blitz")))
						or ((player.avatarLocation=="maze" or player.avatarLocation=="labyrinth") and mageShield[details.mage]~=details.mage)
						or ((player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp") and cityHasShields==false and scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]~=0)) then
						avatarButton[#avatarButton+1]={tag="Button", attributes={id=details.shieldContainer.."ShieldDrop",
						onClick="global/shieldDrop",
						height=70/scale, width=70/scale,
						position=tostring(62/scale).." "..tostring(100/scale).." "..tostring(-25/scale), rotation="0 0 180",
						color="rgba(0,0,0,0.0)"},
						children={{tag="Image", attributes={image="Shield Button "..details.mage}}}}
					end
					--monster can be fought at avatar location
					if player.avatarLocation~=nil and b==gStates.turnNumber and player.combatIconHide=="None" and getObjectFromGUID(player.turnOrderTokenGUID).is_face_down==false
						and ((mageShield[details.mage]==nil and (player.avatarLocation=="mage tower"
							or player.avatarLocation=="monster den" or player.avatarLocation=="spawning grounds"
							or (player.avatarLocation=="glade" and gStates.gameScenario=="Life and Death") or player.avatarLocation=="graveyard"
							or (player.avatarLocation:sub(1, 4)=="mine" and gStates.gameScenario=="Mines Liberation")
							or (player.avatarLocation=="city" and gStates.gameScenario=="The Lost Relic Blitz")
							or player.avatarLocation=="monastery" or player.avatarLocation=="ruin"))
						or (player.avatarLocation=="dungeon" or player.avatarLocation=="tomb"
							or (player.avatarLocation=="keep" and ((mageShield[details.mage]~=details.mage and gStates.coop==0) or (mageShield[details.mage]==nil and gStates.coop==1)))
							or ((player.avatarLocation=="maze" or player.avatarLocation=="labyrinth") and mageShield[details.mage]~=details.mage)
							or (player.avatarLocation=="hidden valley" or player.avatarLocation=="necropolis")
							or ((player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp") and cityHasMonsters==true and scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]~=0))) then
						avatarButton[#avatarButton+1]={tag="Button", attributes={id="Attack"..details.mage,
							onClick="global/attackLocation",
							height=70/scale, width=70/scale,
							position="0 "..tostring(100/scale).." "..tostring(-25/scale), rotation="0 0 180",
							color="rgba(0,0,0,0.0)"},
							children={{tag="Image", attributes={image="Attack Button"}}}}
					end
				end
			end
			if #avatarButton==0 then avatarButton={{}} end
			if getObjectFromGUID(details.model)~=nil then getObjectFromGUID(details.model).UI.setXmlTable(avatarButton) end
			if getObjectFromGUID(details.token)~=nil then getObjectFromGUID(details.token).UI.setXmlTable(avatarButton) end
			if getObjectFromGUID(details.standee)~=nil then getObjectFromGUID(details.standee).UI.setXmlTable(avatarButton) end
		end
	end
end

--drop a shield or marker on avatar location
function shieldDrop(player, mouseButton, id)
	if mouseButton=="-1" then
		for a, details in pairs(mageKnights) do
			local tempPos={}
			if getObjectFromGUID(details.model)~=nil then tempPos=getObjectFromGUID(details.model).getPosition() end
			if getObjectFromGUID(details.token)~=nil then tempPos=getObjectFromGUID(details.token).getPosition() end
			if getObjectFromGUID(details.standee)~=nil then tempPos=getObjectFromGUID(details.standee).getPosition() end
			if details.shieldContainer==id:sub(1, 6) then
				getObjectFromGUID(details.shieldContainer).takeObject({position={tempPos[1], 5, tempPos[3]}})
				break
			end
			if details.marrkerContainer==id:sub(1, 6) then
				getObjectFromGUID(details.marrkerContainer).takeObject({position={tempPos[1], 5, tempPos[3]}})
				Wait.frames(function() addAvatarButtons() end, 180)
				break
			end
		end
	end
end

--move monster tokens to player board
function attackLocation(player, mouseButton, id)
	if mouseButton=="-1" then
		for a, player in pairs(turnOrder) do
			if player.mage==id:sub(7, string.len(id)) then
				--Work out clicking avatar location
				local avPos={}
				for b, details in pairs(mageKnights) do
					if details.mage==id:sub(7, string.len(id)) then
						if getObjectFromGUID(details.model)~=nil then avPos=getObjectFromGUID(details.model).getPosition() end
						if getObjectFromGUID(details.token)~=nil then avPos=getObjectFromGUID(details.token).getPosition() end
						if getObjectFromGUID(details.standee)~=nil then avPos=getObjectFromGUID(details.standee).getPosition() end
					end
				end
				--move any monster token with the same co-ordinate as the avatar
				local offsetX=0
				local ruinGUID=""
				if getObjectFromGUID(id:sub(1,6))==nil or (getObjectFromGUID(id:sub(1,6))~=nil and (player.avatarLocation=="keep" or player.avatarLocation=="mage tower" or player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp")) then
					for b, monster in pairs(getObjectFromGUID(mapArea).getObjects()) do
						if monsterPugs[monster.guid]~=nil then
							if math.sqrt(((monster.getPosition()[1]-avPos[1])^2)+((monster.getPosition()[3]-avPos[3])^2))<1 then
								monster.setPositionSmooth({(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ})
								monster.setRotation({0.00, 180.00, 0.00})
								offsetX=offsetX+2
								if monsterPugs[monster.guid].monsters~=nil and monsterPugs[monster.guid].name=="Ruin" then ruinGUID=monster.guid end
							end
						end
					end
				end
				--draw monsters for ruin token if undefeated tokens don't exist.
				if ruinGUID~="" and offsetX==2 then
					broadcastToAll("Monster Drawn to Player Board", positionToColor(gStates.turnNumber))
					for b, monsterColor in pairs(monsterPugs[ruinGUID].monsters) do
						tokenRefill()
						getObjectFromGUID(monsterPiles[monsterColor]).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})--brown
						offsetX=offsetX+2
					end
				end
				--draw all monsters left on city card
				if player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp" or player.avatarLocation=="hidden valley" or player.avatarLocation=="necropolis" then
					local citGUID=nil
					local inCityZone=nil
					--figure out which city avatar is in
					if player.avatarLocation=="city" or player.avatarLocation=="Volkare's Camp" then
						for zone, citySearch in pairs(cityScriptZones) do
							for obj, detail in pairs(getObjectFromGUID(zone).getObjects()) do
								if detail.getName()==player.mage then
									cityGUID=citySearch.cityGUID
									inCityZone=zone
									break
								end
							end
						end
					end
					if player.avatarLocation=="hidden valley" then cityGUID=elementalist.terrainHex end
					if player.avatarLocation=="necropolis" then cityGUID=darkCrusader.terrainHex end
					--move the card's monsters
					if gStates.cityMonsterQty[cityGUID]~=nil then
						for monsterGUID, monster in pairs(gStates.cityMonsterQty[cityGUID]) do
							if monsterGUID~="shieldsNeeded" and monsterGUID~="shieldsThere" and getObjectFromGUID(monsterGUID)~=nil then
								getObjectFromGUID(monsterGUID).setPositionSmooth({(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ})
								getObjectFromGUID(monsterGUID).setRotation({0.00, 180.00, 0.00})
								offsetX=offsetX+2
							end
						end
					end
					if offsetX>0 and inCityZone~=nil then
						getObjectFromGUID(cityScriptZones[inCityZone].cityReminder).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, smooth=false})
						offsetX=offsetX+2
					end
				end
				--Work out if avatar or rampage was clicked
				player.combatIconHide="Avatar"
				if getObjectFromGUID(id:sub(1,6))==nil then
					--use avatar location to draw Monsters if none exist
					if offsetX==0 then
						broadcastToAll("Monster Drawn to Player Board", positionToColor(gStates.turnNumber))
						if player.avatarLocation=="dungeon" or player.avatarLocation=="monster den" or player.avatarLocation=="maze"--brown
							or player.avatarLocation=="spawning grounds" then--two browns
							tokenRefill()
							getObjectFromGUID(monsterPiles.tan).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})--brown
							offsetX=offsetX+2
							if player.avatarLocation=="spawning grounds" then
								tokenRefill()
								getObjectFromGUID(monsterPiles.tan).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})--brown
								offsetX=offsetX+2
							end
						end
						if player.avatarLocation=="monastery" then--Purple
							tokenRefill()
							getObjectFromGUID(monsterPiles.purple).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})
							offsetX=offsetX+2
						end
						if player.avatarLocation=="tomb" or player.avatarLocation=="labyrinth" then--Red
							tokenRefill()
							getObjectFromGUID(monsterPiles.red).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})
							offsetX=offsetX+2
						end
						if player.avatarLocation=="keep" then--Gray
							tokenRefill()
							getObjectFromGUID(monsterPiles.gray).takeObject({position={(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ}, rotation={0.00, 180.00, 0.00}})
							offsetX=offsetX+2
						end
					end
					--Hide button
					if player.avatarLocation~="keep" and player.avatarLocation~="mage tower" and player.avatarLocation~="city" and player.avatarLocation~="Volkare's Camp" and player.avatarLocation~="hidden valley" and player.avatarLocation~="necropolis" then player.combatIconHide="Both" end
				else
					--rampaging token clicked
					getObjectFromGUID(id:sub(1,6)).setPositionSmooth({(player.seatPos*40)-96+offsetX, 2.5, -39-gStates.monsterOffsetZ})
					getObjectFromGUID(id:sub(1,6)).setRotation({0.00, 180.00, 0.00})
					Wait.frames(function() getObjectFromGUID(id:sub(1,6)).UI.setXmlTable({{}}) end, 10)
				end
				addAvatarButtons()
				gStates.monsterOffsetZ=gStates.monsterOffsetZ+2
				break
			end
		end
	end
end

--summun monsters to the left of a summoner.
function summonMonster(player, mouseButton, id)
	if mouseButton=="-1" then
		--draw tokens to the left of summoners token
		broadcastToAll("Monster Summoned some support", positionToColor(gStates.turnNumber))
		local location=getObjectFromGUID(id).getPosition()
		local search=monsterPugs[id].monsters
		if id==darkCrusader.token then search=monsterPugs[id].monsters[gStates.darkCrusaderLevel] end
		for b, monsterColor in pairs(search) do
			tokenRefill()
			local MCol=monsterColor
			if (id=="565ecd" or id==darkCrusader.token) and getObjectFromGUID(monsterPiles[monsterColor.."Dark"])~=nil and getObjectFromGUID(monsterPiles[monsterColor.."Dark"]).getQuantity()>0 then MCol=monsterColor.."Dark" end
			if getObjectFromGUID(monsterPiles[MCol]).getQuantity()>0 then
				local summonedMonster=getObjectFromGUID(monsterPiles[MCol]).takeObject({position={location[1]-(2*b), 2.5, location[3]}, rotation={0.00, 180.00, 0.00}})
				gStates.summonStates[summonedMonster.guid]="summoned"
			else
				broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
			end
		end
		--turn off button
		if id==darkCrusader.token then
			getObjectFromGUID(id).UI.setXmlTable({
				{tag="Button", attributes={id=id.."OverkillUp",	onClick="global/adjustOverkill", height=50/0.9, width=50/0.9,
					color="rgba(0,0,0,0.0)", position="-62 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Image", attributes={image="Overkill Up"}}}},
				{tag="Image", attributes={image="Overkill Text", height=50/0.9, width=55/0.9, position="0 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Text", attributes={id=id.."Overkill",	color="rgb(0,0,0)", fontSize="45", fontStyle="Bold", alignment="MiddleCenter", text=gStates.leaderOverkill}}}},
				{tag="Button", attributes={id=id.."OverkillDown", onClick="global/adjustOverkill", height=50/0.9, width=50/0.9,
					color="rgba(0,0,0,0.0)", position="62 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Image", attributes={image="Overkill Down"}}}}})
		else
			gStates.summonStates[id]="SummonDone"
			getObjectFromGUID(id).UI.setXmlTable({{}})
		end
	end
end

--Leader overkill adjust
function adjustOverkill(player, mouseButton, id)
	if mouseButton=="-1" then
		local level=gStates.elementalistLevel-gStates.leaderReduction
		if id:sub(1,6)==darkCrusader.token then level=gStates.darkCrusaderLevel-gStates.leaderReduction end
		if id:sub(7,16)=="OverkillUp" and gStates.leaderOverkill<level then
			gStates.leaderOverkill=gStates.leaderOverkill+1
		end
		if id:sub(7,18)=="OverkillDown" and gStates.leaderOverkill>1 then
			gStates.leaderOverkill=gStates.leaderOverkill-1
		end
		getObjectFromGUID(id:sub(1,6)).UI.setAttribute(id:sub(1,14), "Text", gStates.leaderOverkill)
		mainUIUpdate("Leader Overkilled")
	end
end

--Moves all rampaging tokens when Pursuit Variant Used
function pursuingRampagers(player, mouseButton, id)
	if mouseButton=="-1" then
		gStates.pursuitTwoOption=false
		--loop through all recorded pursuing monsters
		if gStates.pursuing[turnOrder[gStates.turnNumber].mage]~=nil then
			--delete the help arrows
			for guid, _ in pairs(gStates.arrowDelete) do
				if getObjectFromGUID(guid)~=nil then getObjectFromGUID(guid).destroy() end
			end
			gStates.arrowDelete={}
			local height=0.2
			local playerBoardDisplace=0
			for monsterGUID, monsterDetails in pairs(gStates.pursuing[turnOrder[gStates.turnNumber].mage]) do
				if monsterDetails.state=="Pursuing" then
					--find initial vector to move closer to the player
					local playerPos={}
					for b, details in pairs(mageKnights) do
						if details.mage==turnOrder[gStates.turnNumber].mage then
							if getObjectFromGUID(details.model)~=nil then playerPos=getObjectFromGUID(details.model).getPosition() end
							if getObjectFromGUID(details.token)~=nil then playerPos=getObjectFromGUID(details.token).getPosition() end
							if getObjectFromGUID(details.standee)~=nil then playerPos=getObjectFromGUID(details.standee).getPosition() end
						end
					end
					local realBearing=(math.floor((math.deg(math.atan2(monsterDetails.location[3]-playerPos[3], monsterDetails.location[1]-playerPos[1]))/2)+0.5)*2)+2
					local playerBearing=math.floor((realBearing/60)+0.5)*60
					local inline=false
					if realBearing>=360 then playerBearing=playerBearing-360 realBearing=realBearing-360 end
					if realBearing<0 then playerBearing=playerBearing+360 realBearing=realBearing+360 end
					if realBearing<playerBearing+10 and realBearing>playerBearing-10 then inline=true end
					local clockwise=1
					if realBearing<playerBearing then clockwise=-1 end
					local canAttack=false
					local protection="none"
					local rampageNewPos={}
					function hexCheck()
						local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
						local terrainFound=false
						for _, terTile in pairs(objectsInPlay) do
							local tilePos=terTile.getPosition()
							--make sure there is a terain tile
							if terrainTiles[terTile.guid]~=nil then
								local tileToObjDist=math.sqrt(((rampageNewPos[1]-tilePos[1])^2)+((rampageNewPos[3]-tilePos[3])^2))
								if tileToObjDist<3.1 then
									--make sure the hex isn't a fortified site
									local hexBearing="center"
									if tileToObjDist>1 then
										hexBearing=math.floor(((math.deg(math.atan2(tilePos[3]-rampageNewPos[3], tilePos[1]-rampageNewPos[1])))/60)+0.5)*60
										hexBearing=(math.floor(((terTile.getRotation()[2]-180)/60)+0.5)*60)+hexBearing--compensate for terrain tile rotation
										if hexBearing>=360 then hexBearing=hexBearing-360 end
										if hexBearing<0 then hexBearing=hexBearing+360 end
									end
									if terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]~="keep" and
										terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]~="mage tower" and
										terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]:sub(1, 4)~="city" then
										terrainFound=true
										if terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]=="village" or
											terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]=="camp" or
											terrainTiles[terTile.guid].hexFeature[tostring(hexBearing)]=="monastery" then
											protection="Interaction"
										end
										if terrainTiles[terTile.guid].wallList~=nil and terrainTiles[terTile.guid].wallList[tostring(hexBearing)]~=nil then
										local tileToObjStartDist=math.sqrt(((monsterDetails.location[1]-tilePos[1])^2)+((monsterDetails.location[3]-tilePos[3])^2))
											if tileToObjStartDist<3.1 then
												local hexOroginBearing="center"
												if tileToObjStartDist>1 then
													hexOroginBearing=math.floor(((math.deg(math.atan2(tilePos[3]-monsterDetails.location[3], tilePos[1]-monsterDetails.location[1])))/60)+0.5)*60
													hexOroginBearing=(math.floor(((terTile.getRotation()[2]-180)/60)+0.5)*60)+hexOroginBearing
													if hexOroginBearing>=360 then hexOroginBearing=hexOroginBearing-360 end
													if hexOroginBearing<0 then hexOroginBearing=hexOroginBearing+360 end
												end
												if terrainTiles[terTile.guid].wallList[tostring(hexBearing)][tostring(hexOroginBearing)]~=nil then
													protection="Wall"
												end
											end
										end
									else
										protection="Fortified"
									end
									break
								end
							end
						end
						local avatarToRampageDist=math.sqrt(((rampageNewPos[1]-playerPos[1])^2)+((rampageNewPos[3]-playerPos[3])^2))
						if terrainFound==true then
							--make sure there isnt an other player
							local magefound=false
							local test={Arythea=1, Braevalar=1, Goldyx=1, Krang=1, Norowas=1, Tovak=1, Wolfhawk=1, Ymirgh=1, Volkare=1}
							for _, obj in pairs(objectsInPlay) do
								if obj.getName()~=turnOrder[gStates.turnNumber].mage and test[obj.getName()]==1 then
									if math.sqrt(((rampageNewPos[1]-obj.getPosition()[1])^2)+((rampageNewPos[3]-obj.getPosition()[3])^2))<1 then
										magefound=true
										break
									end
								end
							end
							if magefound==false then
								--see if it moves on to player boards
								if avatarToRampageDist<0.5 and protection=="none" then canAttack=true end
								return "Good"
							end
						end
						if terrainFound==false and protection~="none" and avatarToRampageDist<0.5 then return "Good" end--need to check if the site has a shield or not to determin if he attacks or stays
						return "Bad"
					end

					--check he won't move out of bounds and alter his course
					local hexIncrement={60, -120, 180, -240, 300}
					local hexFound=false
					local count=0
					while hexFound==false do
						rampageNewPos={monsterDetails.location[1]-(2.39*math.cos(math.rad(playerBearing))), monsterDetails.location[2], monsterDetails.location[3]-(2.39*math.sin(math.rad(playerBearing)))}
						if hexCheck()=="Bad" and count<5 then
							count=count+1
							playerBearing=playerBearing+(hexIncrement[count]*clockwise)
						else
							hexFound=true
						end
					end

					--check for scondary option
					local otherBearing=math.floor((math.deg(math.atan2(monsterDetails.location[3]-playerPos[3], monsterDetails.location[1]-playerPos[1]))/2)+0.5)*2
					if otherBearing>=360 then otherBearing=otherBearing-360 end
					if otherBearing<0 then otherBearing=otherBearing+360 end
					local twoOptions=1
					if (inline==true and count>0 and count<4) or (inline==false and (count==0 or count==2)) then
						if inline==false and count==0 then otherBearing=playerBearing+(hexIncrement[count+1]*clockwise) end
						if inline==false and count==2 and (clockwise==1 or (otherBearing~=30 and otherBearing~=90 and otherBearing~=150 and otherBearing~=210 and otherBearing~=270 and otherBearing~=330)) then
							otherBearing=playerBearing+(hexIncrement[count-1]*clockwise) end
						if inline==false and count==2 and clockwise==-1 and (otherBearing==30 or otherBearing==90 or otherBearing==150 or otherBearing==210 or otherBearing==270 or otherBearing==330) then
							otherBearing=playerBearing+(hexIncrement[count+1]*clockwise) end
						if inline==true and (count==1 or count==3) then otherBearing=playerBearing+(hexIncrement[count+1]*clockwise) end
						if otherBearing>=360 then otherBearing=otherBearing-360 end
						if otherBearing<0 then otherBearing=otherBearing+360 end
						rampageNewPos={monsterDetails.location[1]-(2.39*math.cos(math.rad(otherBearing))), monsterDetails.location[2], monsterDetails.location[3]-(2.39*math.sin(math.rad(otherBearing)))}
						if hexCheck()=="Good" then
							twoOptions=2
							gStates.pursuitTwoOption=true
						end
					end

					--move rampage monster one hex in a closer direction
					local noMove=false
					local rampageNewPos={monsterDetails.location[1]-(2.39*math.cos(math.rad(playerBearing))), monsterDetails.location[2]+height, monsterDetails.location[3]-(2.39*math.sin(math.rad(playerBearing)))}
					if math.sqrt(((turnOrder[gStates.turnNumber].turnStartLoc.x-playerPos[1])^2)+((turnOrder[gStates.turnNumber].turnStartLoc.z-playerPos[3])^2))<1 and id==nil then
						rampageNewPos=monsterDetails.location
						noMove=true
						gStates.pursuitTwoOption=false
					else
						if id~=nil then gStates.skippedMove=true else gStates.skippedMove=false end
						if math.sqrt(((rampageNewPos[1]-playerPos[1])^2)+((rampageNewPos[3]-playerPos[3])^2))<0.5 or count>3 then
							rampageNewPos=monsterDetails.location
							noMove=true
							if count<4 and canAttack==false then
								if protection=="Interaction" then broadcastToAll(turnOrder[gStates.turnNumber].mage.." avoids pursuit at an Interaction site.", positionToColor(gStates.turnNumber)) end
								if protection=="Wall" then broadcastToAll(turnOrder[gStates.turnNumber].mage.." avoids pursuit behind the wall.", positionToColor(gStates.turnNumber)) end
								if protection=="Fortified" then broadcastToAll(turnOrder[gStates.turnNumber].mage.." avoids pursuit at a Fortified site.", positionToColor(gStates.turnNumber)) end
							end
						end
						if canAttack==true then
							rampageNewPos={(turnOrder[gStates.turnNumber].seatPos*40)-98+playerBoardDisplace, 2.5, -39}
							playerBoardDisplace=playerBoardDisplace+2
							noMove=false
							 gStates.monsterPlayLocation[monsterGUID]=monsterDetails.location
							getObjectFromGUID(monsterGUID).UI.setXmlTable({{}})
							broadcastToAll("Pursuing Monster Attacked "..turnOrder[gStates.turnNumber].mage, positionToColor(gStates.turnNumber))
						end
					end
					getObjectFromGUID(monsterGUID).setPositionSmooth(rampageNewPos)

					if canAttack==false then gStates.monsterPlayLocation[monsterGUID]=rampageNewPos end
					height=height+0.2

					--Add an arrow to help find which tokens moved
					if noMove==false then
						for i=1, twoOptions, 1 do
							local arrow=getObjectFromGUID("6647eb").clone({position={monsterDetails.location[1]-(1.1*math.cos(math.rad(playerBearing))), 1.11, monsterDetails.location[3]-(1.1*math.sin(math.rad(playerBearing)))}})
							local convert={[0]=270, [30]=240, [60]=210, [90]=180, [120]=150, [150]=120, [180]=90, [210]=60, [240]=30, [270]=0, [300]=330, [330]=300, [360]=270}
							if playerBearing>=360 then playerBearing=playerBearing-360 end
							if playerBearing<0 then playerBearing=playerBearing+360 end
							arrow.setRotation({90.00, convert[playerBearing], 0.00})
							arrow.setColorTint("Orange")
							Wait.frames(function()
								arrow.lock()
								gStates.arrowDelete[arrow.guid]="Del"
							end, 50)
							playerBearing=otherBearing
						end
					end
					mainUIUpdate("pursuit")
				end
			end
			Wait.frames(function() addAvatarButtons() end, 60)
		end
	end
end

--Adjust the offer size
OfferPause=false
function offerAdjust(player, mouseButton, id)
	if mouseButton=="-1" and OfferPause==false then
		OfferPause=true
		--update Offer size expected.
		if id=="OfferUp" then gStates.offerSize=gStates.offerSize+1 else gStates.offerSize=gStates.offerSize-1 end
		--move both decks and their detecting Zones, drop the decks onto existing cards.
		getObjectFromGUID("e4372a").setPositionSmooth({(4.8*(gStates.offerSize+1))+21.6, 2.5, -22.2})
		getObjectFromGUID("e926ba").setPositionSmooth({(4.8*(gStates.offerSize+1))+21.6, 2.5, -16.2})
		getObjectFromGUID("f752bb").setPosition({(4.8*(gStates.offerSize+1))+21.6, 2.05, -22.2})
		getObjectFromGUID("7ce69e").setPosition({(4.8*(gStates.offerSize+1))+21.6, 2.05, -16.2})
		--change size of offer Zone
		getObjectFromGUID("45cc44").setScale({4.8*gStates.offerSize, 0.3, 9.57})
		getObjectFromGUID("45cc44").setPosition({(2.4*(gStates.offerSize-1))+26.4, 1.13, -19.2})
		if id=="OfferUp" then
			--run fill slide after a wait frame.
			Wait.frames(function() fillSlide() end, 10)
		else
			--flip existing cards if shrinking the offer.
			for _, card in pairs(getObjectFromGUID("45cc44").getObjects()) do
				if math.floor(((card.getPosition()[1]-21.6)/4.8)+0.5)==gStates.offerSize+1 and card.tag=="Card" then card.setRotation({0.00, 180.00, 180.00}) end
			end
		end
		Wait.frames(function()
			OfferPause=false
			getObjectFromGUID("e4372a").UI.setXmlTable({	{tag="Button", attributes={id="OfferUp", onClick="global/offerAdjust", height=50, width=80, position="60 190 -10", rotation="0 180 180"},
															children={	{tag="Image", attributes={id="OfferUpImage", image="Button Active Short"}},
																		{tag="Text", attributes={id="OfferUpText", fontSize="30", fontStyle="Bold", alignment="MiddleCenter", text=">"}}}},
															{tag="Button", attributes={id="OfferDown", onClick="global/offerAdjust", height=50, width=80, position="-60 190 -10", rotation="0 180 180"},
															children={	{tag="Image", attributes={id="OfferDownImage", image="Button Active Short"}},
																		{tag="Text", attributes={id="OfferDownText", fontSize="30", fontStyle="Bold", alignment="MiddleCenter", text="<"}}}}})
		end, 60)
	end
end

---------------
-- Event Handling functions
---------------
--Save and load settings
function onLoad(saved_data)
	local megaFreeze=  {"3d4319", "519f96",			 --Table
						"43fa2e", "a02b0f",	 --Night and Day Mat
						"fd75c3", "69fd31", "bc3d57", "0a5c86", "1ad977", "84acf0", "b91e53", "bd69e1", dummyBoard}--player mats
						--"5c9b8c", "9a207c"}--Fame Reputation Mat Normal and Blitz
	for i=1, #megaFreeze, 1 do
		local obj=getObjectFromGUID(megaFreeze[i])
		if obj~=nil then obj.interactable=false end --some boards may be missing depending on their states
	end

	--fix hand positions
	for a=1, #Player.getAvailableColors(), 1 do
		local seat=Player.getAvailableColors()[a]
		Player[seat].setHandTransform({position={Player[seat].getHandTransform().position[1], 3.1, -48.4}, scale={18, 3.1, 1}}, 1)
	end

	--load saved data
	if saved_data~="" then
		local loaded_data=JSON.decode(saved_data)
		turnOrder=loaded_data.turnOrder
		gStates=loaded_data.gStates
	end
	--Updated already saved variable by putting a copy here, delete after saving one time.

	-----------
	UI.hide("welcome")
	if gStates.firstStarted==0 then
		UI.show("Setup")
	else
		UI.show("HelpButton")
		UI.show("AutoFlipButton")
		if gStates.preEndTurn==true then UI.show("EndGameButton") end
		UI.setAttribute("helpButtonRealText", "Text", "Help")
		if gStates.gameScenario~="One to Return" then UI.show("ScoreButton") end
		if gStates.tacticShown==true then
			claimButtonRefresh()
		 	UI.show("NoticeBoard")
		 	UI.setAttribute("DrawOne", "interactable", "False")
			UI.setAttribute("DrawOneImage", "image", "Button Deactive")
			UI.setAttribute("ScoreButtonActual", "interactable", "False")
			UI.setAttribute("ScoreButtonActualImage", "image", "Button Deactive")
		 	UI.setAttribute("EndTurnButton", "interactable", "False")
			UI.setAttribute("EndTurnButtonImage", "image", "Button Deactive")
		else
			UI.setAttribute("ScoreButtonActual", "interactable", "True")
			UI.setAttribute("ScoreButtonActualImage", "image", "Button Active")
		 	UI.setAttribute("DummyButton", "interactable", "True")
			UI.setAttribute("DummyButtonImage", "image", "Button Active")
		 	UI.setAttribute("DummyButtonText", "Text", "Dummy Processed")
		 	UI.setAttribute("DummyButton", "onClick", "dummyTurn")
		end
		for terrainGUID, hexOveride in pairs(gStates.hexOverideSave) do
			for location, hexFeature in pairs(hexOveride) do
				terrainTiles[terrainGUID].hexFeature[location]=hexFeature
			end
		end
		mainUIUpdate("Save Loaded")
		addAvatarButtons()
	end
end
function onSave()
	local data_to_save={
		turnOrder=turnOrder,
		gStates=gStates}
	saved_data=JSON.encode(data_to_save)
	return saved_data
end

--city pickup warning.
function onObjectPickUp(player_color, picked_up_object)
	if picked_up_object.guid=="6079bc" or picked_up_object.guid=="d0acb2" or picked_up_object.guid=="34e3e4" or picked_up_object.guid=="156b6a" or picked_up_object.guid==darkCrusader.terrainHex or picked_up_object.guid==elementalist.terrainHex then
		broadcastToAll("City Models are placed by the script. There is realy no reason for a player to be manipualing them.\nInteract with the cities by using the city cards", {1,1,0.5})
	end
end

--Update skill Locations, Update Players Location details, and Update the UI and trigger a Level up if a mage shield was moved manually
function onObjectDrop(player_color, dropped_object)
	--Update skill Locations
	if skillTokens[dropped_object.guid]~=nil then
		Wait.frames(function()
			if getObjectFromGUID(dropped_object.guid)~=nil then
				local objPos=dropped_object.getPosition()
				if 	(objPos[3]>-25 or
					(objPos[3]<-35 and objPos[1]>-68 and objPos[1]<-66) or
					(objPos[3]<-35 and objPos[1]>-28 and objPos[1]<-26) or
					(objPos[3]<-35 and objPos[1]>12 and objPos[1]<14) or
					(objPos[3]<-35 and objPos[1]>52 and objPos[1]<54)) then
					if gStates.mageSkills[dropped_object.guid]~=nil then
						if objPos[3]<-35 then
							gStates.skillButtons=0
							if gStates.motivationSkill[dropped_object.guid]~=nil then gStates.motivationSkill[dropped_object.guid].state="active" end
						end
					else
						gStates.mageSkills[dropped_object.guid]={}
					end
					gStates.mageSkills[dropped_object.guid]={objPos[1], objPos[2], objPos[3]}
					for skillGUID, x in pairs(gStates.mageSkills) do
						getObjectFromGUID(skillGUID).UI.setXmlTable({{}})
					end
					skillButtonActivate()
				end
			end
		end, 5)
	end

	--Update Players Location details
	Wait.frames(function()
		local avatarAdjust={{-2.39, 0}, {1.2, -2.05}, {2.39, 0}, {1.2, 2.05}, {-1.2, 2.05}, {-2.39, 0}, {0, 0}}
		local keepShieldMatch={	{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false},
								{keep=false, keepShield=false, city=false, cityShield=false}}
		local keepFound=false
		local cityFound="False"
		for a, avatar in pairs(mageKnights) do
			if (dropped_object.guid==avatar.model or dropped_object.guid==avatar.standee or dropped_object.guid==avatar.token) and avatar.mage~="Volkare" then
				for b, playerDetails in pairs(turnOrder) do
					if playerDetails.mage==avatar.mage then
						playerDetails.avatarLocation=""
						local avatarPos={dropped_object.getPosition()[1], 1.5, dropped_object.getPosition()[3]}--done this way so math can be done to the values
						--check if avatar dropped on city card, then use the city model as the avatar location
						for zone, citySearch in pairs(cityScriptZones) do
							for obj, detail in pairs(getObjectFromGUID(zone).getObjects()) do
								if detail.guid==dropped_object.guid then
									avatarPos={getObjectFromGUID(citySearch.cityGUID).getPosition()[1], 1.5, getObjectFromGUID(citySearch.cityGUID).getPosition()[3]}--done this way so math can be done to the values
									break
								end
							end
						end
						--Use the avatar location to work out the hex.
						for keepSearch=1, 7, 1 do
							for d, terrain in pairs(getObjectFromGUID(mapArea).getObjects()) do--Main map area objects
								--work with terrain tiles
								local tilePos={terrain.getPosition()[1], 1.17, terrain.getPosition()[3]}--done this way so math can be done to the values
								local avatarToTileDist=math.sqrt(((avatarPos[1]-tilePos[1])^2)+((avatarPos[3]-tilePos[3])^2))
								if terrainTiles[terrain.guid]~=nil then
									if avatarToTileDist<3.1 then
										local bearing="center"
										if avatarToTileDist>1 then
											bearing=(60*(math.floor((math.deg(math.atan2(avatarPos[3]-tilePos[3], avatarPos[1]-tilePos[1]))+terrain.getRotation()[2]+30)/60)))
											if bearing>=360 then bearing=bearing-360 end
											if bearing<0 then bearing=bearing+360 end
										end
										for hexLocation, hexFeature in pairs(terrainTiles[terrain.guid].hexFeature) do
											if hexLocation==tostring(bearing) then
												if keepSearch==1 then
													playerDetails.avatarLocation=hexFeature
													if playerDetails.avatarLocation:sub(1, 4)=="city" then playerDetails.avatarLocation="city" end
												end
												if hexFeature=="keep" or hexFeature=="Volkare's Camp" or (gStates.cityVolkareTile==terrain.guid and bearing=="center") then
													keepShieldMatch[keepSearch]["keep"]=true
													if keepShieldMatch[keepSearch]["keepShield"]==true then keepFound=true end
												end
												if hexFeature:sub(1, 4)=="city" or hexFeature=="Volkare's Camp" then
													keepShieldMatch[keepSearch]["city"]=true
													if keepShieldMatch[keepSearch]["cityShield"]==true then CityFound=terrain.getName() end
												end
												break
											end
										end
									end
								end
								if avatarToTileDist<1 then
									--work with Shields
									if terrain.getName()=="Shield" and ((terrain.getDescription()==playerDetails.mage and gStates.coop==0) or gStates.coop==1) then
										keepShieldMatch[keepSearch]["keepShield"]=true
										if keepShieldMatch[keepSearch]["keep"]==true then keepFound=true end
									end

									--work with Cities
									local temp=terrain.guid
									if terrain.guid=="938cd3" or terrain.guid=="a0d7b3" then temp=volkare.model end
									if terrain.guid=="156b6a" or terrain.guid=="6079bc" or terrain.guid=="d0acb2" or terrain.guid=="34e3e4" or terrain.guid==volkare.terrainHex or temp==volkare.model then
										--flip garrisons during the day
										if gStates.dayRound==true and turnOrder[gStates.turnNumber].mage==avatar.mage and gStates.preEndTurn==false and gStates.cityMonsterQty[temp]~=nil and gStates.autoFlip==true then
											local broadcast=false
											for monsterGUID, monster in pairs(gStates.cityMonsterQty[temp]) do
												if monsterGUID~="shieldsNeeded" and monsterGUID~="shieldsThere" and getObjectFromGUID(monsterGUID)~=nil then
													if getObjectFromGUID(monsterGUID).is_face_down==true then getObjectFromGUID(monsterGUID).flip() broadcast=true end
												end
											end
											if broadcast==true then
												if temp==volkare.model then
													broadcastToAll("Volkare's Army Revealed", {1,1,0.5})
												else
													broadcastToAll("Site Garrison Revealed", {1,1,0.5})
												end
											end
										end
										cityBeatCheck()
										if terrain.getName()~="Volkare's Camp" then
											if playerDetails.defeatedCities[terrain.guid]~=nil then
												keepShieldMatch[keepSearch]["cityShield"]=true
												if keepShieldMatch[keepSearch]["city"]==true then cityFound=terrain.getName() end
											end
										else
											for z, playerDetails2 in pairs(turnOrder) do
												if playerDetails2.defeatedCities[terrain.guid]~=nil then
													keepShieldMatch[keepSearch]["keepShield"]=true
													if keepShieldMatch[keepSearch]["keep"]==true then keepFound=true end
												end
											end
										end
										if gStates.gameScenario=="The Gauntlet" or gStates.gameScenario=="The Hidden Valley Blitz"
										or gStates.gameScenario=="The Hidden Valley Blitz" or gStates.gameScenario=="The Realm of the Dead Blitz"
										or gStates.gameScenario=="Life and Death" or gStates.gameScenario=="Dungeon Lords"
										or gStates.gameScenario=="Druid Nights" or gStates.gameScenario=="Mines Liberation" then
											keepShieldMatch[keepSearch]["cityShield"]=true
											if keepShieldMatch[keepSearch]["city"]==true then cityFound=terrain.getName() end
											playerDetails.defeatedCities[terrain.guid]="Assist"
										end
									end
									--flip garrisons during the day
									if gStates.autoFlip==true and gStates.dayRound==true and turnOrder[gStates.turnNumber].mage==avatar.mage and gStates.preEndTurn==false and terrain.getRotationValues()[2]~=nil and (terrain.getRotationValues()[2].value=="Mage Tower Garrison" or terrain.getRotationValues()[2].value=="Keep Garrison") then
										if terrain.is_face_down==true then terrain.flip() broadcastToAll("Site Garrison Revealed", {1,1,0.5}) end
									end
								end
							end
							avatarPos[1]=avatarPos[1]+avatarAdjust[keepSearch][1]
							avatarPos[3]=avatarPos[3]+avatarAdjust[keepSearch][2]
							if cityFound=="False" then playerDetails.nearCity=false
							else playerDetails.nearCity=true end
							if keepFound==true then	playerDetails.nearKeep=true
							else playerDetails.nearKeep=false end
						end
						if avatarPos[3]<-20 then playerDetails.avatarLocation="portal" end
						break
					end
				end
				local cityConversion={["White City"]="d2d65e", ["Blue City"]="8a7266", ["Red City"]="648da8", ["Green City"]="213d78"}
				if turnOrder[gStates.turnNumber].nearKeep==true or turnOrder[gStates.turnNumber].nearCity==true then
					if turnOrder[gStates.turnNumber].nearCity==true and cityFound~="False" then
						if turnOrder[gStates.turnNumber].defeatedCities[cityScriptZones[cityConversion[cityFound]].cityGUID]=="Lead" then turnOrder[gStates.turnNumber].hand=turnOrder[gStates.turnNumber].baseHand+2 end
						if turnOrder[gStates.turnNumber].defeatedCities[cityScriptZones[cityConversion[cityFound]].cityGUID]=="Assist" then turnOrder[gStates.turnNumber].hand=turnOrder[gStates.turnNumber].baseHand+1 end
						broadcastToAll("Hand size increased from proximity to feature", {1,1,0.5})
					end
					if (turnOrder[gStates.turnNumber].nearKeep==true and turnOrder[gStates.turnNumber].nearCity==false) or
						(turnOrder[gStates.turnNumber].nearKeep==true and turnOrder[gStates.turnNumber].nearCity==true and turnOrder[gStates.turnNumber].keepsBeat>1) then
						turnOrder[gStates.turnNumber].hand=turnOrder[gStates.turnNumber].baseHand+turnOrder[gStates.turnNumber].keepsBeat
						if turnOrder[gStates.turnNumber].keepsBeat>0 then broadcastToAll("Hand size increased from proximity to feature", {1,1,0.5}) end
					end
				else
					turnOrder[gStates.turnNumber].hand=turnOrder[gStates.turnNumber].baseHand
				end
				mainUIUpdate("Updated player location Details")
				addAvatarButtons()
				if gStates.rampagePursuit==true then pursuingRampagers(nil, "-1", nil) end
				break
			end
		end
	end, 5)

	--Update the UI and trigger a Level up if a mage shield was moved manually
	if gStates.firstStarted==1 then
		--Check if it's a shield belonging to the current turns player dropped after clicking the end turn button
		for a=1, #turnOrder, 1 do
			if dropped_object.guid==turnOrder[a].fameGUID then
				mainUIUpdate("Fame Shield Dropped")
				if gStates.preEndTurn==true then Wait.frames(function() LevelUp(gStates.turnNumber) end, 15) end
				break
			end
		end
	end
end

--fix for new objects getting existing GUID, and update competative skill location
function onObjectSpawn(spawn_object)
	--code stops objects getting a GUID of a registered object.
	if spawn_object.getName()=="Wound" or spawn_object.tag=="Figurine" or spawn_object.tag=="Deck" or spawn_object.getName()=="White Defender Bonus Reminder" or spawn_object.getName()=="Blue Defender Bonus Reminder" or spawn_object.getName()=="Red Defender Bonus Reminder" or spawn_object.getName()=="Green Defender Bonus Reminder" then
		if gameCards[spawn_object.guid]~=nil or terrainTiles[spawn_object.guid]~=nil or monsterPugs[spawn_object.guid]~=nil or skillTokens[spawn_object.guid]~=nil then --or spawn_object.guid=="5c38e4
			Wait.frames(function()
				if getObjectFromGUID(spawn_object.guid)~=nil then
					local replaceObject=spawn_object.clone({position=spawn_object.getPosition()})
					Wait.frames(function() spawn_object.destruct() end, 5)
				end
			end, 100)
		end
	end

	--Update icons on state changing Avatar
	if gStates.firstStarted==1 then
		for a, details in pairs(mageKnights) do
			if details.model==spawn_object.guid or details.token==spawn_object.guid or details.standee==spawn_object.guid then
				addAvatarButtons()
				break
			end
		end
	end

	--add volkare's arrows and update GUID used in script
	if spawn_object.guid==mageKnights[9].model or spawn_object.guid==mageKnights[9].token or spawn_object.guid==mageKnights[9].standee then
		gStates.volkareModel=spawn_object.guid
		local scale=spawn_object.getScale()
		if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" then
			Wait.frames(function() getObjectFromGUID(spawn_object.guid).addDecal({name="Volkare's Return Guide", url="http://cloud-3.steamusercontent.com/ugc/1617311764022517379/17F0D137572FE6672A880B1865AF9D7B66D8061F/",
				position={-1.7, 0.05, 0.0}, rotation={90, 180, 0}, scale={3.24/scale[1], 5.508/scale[3], 1}}) end, 20)
		end
		if gStates.gameScenario=="Volkare's Quest" then
			Wait.frames(function() getObjectFromGUID(spawn_object.guid).addDecal({name="Volkare's Quest Guide", url="http://cloud-3.steamusercontent.com/ugc/1617311764022517042/4160839B27C5F84E3D4D860408AE19780E48AEC4/",
				position={1.6, 0.05, 1.4}, rotation={90, 180, 0}, scale={3.6/scale[1], 3.5/scale[3], 1}}) end, 20)
		end
	end

	--update Competitive skills
	if (spawn_object.guid=="d90de4" or spawn_object.guid=="19daf9" or spawn_object.guid=="3bd08e" or spawn_object.guid=="958209" or
		spawn_object.guid=="676855" or spawn_object.guid=="c4546c" or spawn_object.guid=="a92d73" or spawn_object.guid=="335290") then
		gStates.mageSkills[spawn_object.guid]={spawn_object.getPosition()[1], spawn_object.getPosition()[2], spawn_object.getPosition()[3]}
		skillButtonActivate()
	end
end

--Alter Fame board Values, Skill register, and Add icons when changing avatar **This script runs when exiting the game**
function onObjectDestroy(destroyedObj)
	--Alter Fame board stats when changing states
	if destroyedObj.guid=="5c9b8c" or destroyedObj.guid=="6b74c8" then
		Wait.frames(function()
			if getObjectFromGUID("7a497d")~=nil then
				gStates.rowLengthGainPerLevel=1.59
				gStates.normalRowLength=14.23
				gStates.rowsOnBoard=12
				gStates.scoreIfLooped=168
			end
		end, 5)
	end
	if destroyedObj.guid=="7a497d" then
		gStates.rowLengthGainPerLevel=1.82
		gStates.normalRowLength=15.7
		gStates.rowsOnBoard=10
		gStates.scoreIfLooped=120
	end

	--Remove a skill from register if returned to the bag
	for skillGUID, skillDetails in pairs(skillTokens) do
		if skillGUID==destroyedObj.guid then
			gStates.mageSkills[skillGUID]=nil
			break
		end
	end
end

--Plays pugs for terrain tiles, Disables end turn button, Reduces monastery offer
local zoneEntered=false--used to check if an object hasn't just pased through a zone.
function onObjectEnterScriptingZone(zone, obj)
	if gStates.firstStarted==1 then
		--Check if a turn marker has been flipped
		if zone.guid=="e6e3f8" then
			for c, d in pairs(turnOrder) do
				if obj.guid==d.turnOrderTokenGUID then
					Wait.frames(function()
						local turnOrderTokens=getObjectFromGUID("e6e3f8").getObjects()
						table.sort(turnOrderTokens, function (k1, k2) return k1.getPosition()[3]>k2.getPosition()[3] end)
						--check if all turn order tokens are present
						if #turnOrderTokens==gStates.playerCount+gStates.coop then
							local posOne=-19.4
							local inOrder=true
							--check turn order tokens fill from 1st to last position
							for a, b in pairs(turnOrderTokens) do
								if b.getPosition()[3]>posOne-0.5 and b.getPosition()[3]<posOne+0.6 then
									posOne=posOne-1.4
									for c, d in pairs(turnOrder) do
										if b.guid==d.turnOrderTokenGUID then turnOrder[c].cutomSort=a break end
									end
								else
									inOrder=false break
								end
							end
							--update turnorder sequence to match token order
							if inOrder==true then
								if getObjectFromGUID("0934f2")~=nil then table.sort(turnOrder, function (k1, k2) return k1.cutomSort < k2.cutomSort end) end
								broadcastToAll("Turn order updated", {1,1,0.5})
								mainUIUpdate("Turn marker entered it's zone")
							end
						end
					end , 1)
					break
				end
			end
		end

		--Check if a terrain tile has entered the play area
		if zone.guid==mapArea and terrainTiles[obj.guid]~=nil then
			Wait.frames(function() addAvatarButtons() end, 100)
			local played=0
			local core=0
			local faceUp=	{0.0, 180.0,   0.0}
			local faceDown=	{0.0, 180.0, 180.0}
			local y=2
			local fail=false
			--figure out which angle is the north south line
			local northBearing=40
			local startTileGUID="5d0bac"
			local startBearing=0
			if getObjectFromGUID(startTileGUID)==nil then startTileGUID="722590" northBearing=70 end
			if gStates.gameScenario~="Ladyhawke" then startBearing=math.deg(math.atan2(obj.getPosition()[3]-getObjectFromGUID(startTileGUID).getPosition()[3], obj.getPosition()[1]-getObjectFromGUID(startTileGUID).getPosition()[1])) end

			--Check if a core tile is on the coast of a wedge map
			if terrainTiles[obj.guid].tileType=="core" and northBearing==70 and (startBearing<=41 or startBearing>=99) and gStates.gameScenario~="Ladyhawke" and gStates.gameScenario~="Fast Forwarded Conquest" then broadcastToAll("Core Terrain Tiles arn't aloud on the coast", {1,0,0}) fail=true end

			--Check if tile is on the 4th or 5th column of a limited open map
			local edgeCoordinates={	{-38.43, 0.54}, {-33.63, 4.70}, {-28.83, 8.86}, {-24.03, 13.02}, {-19.23, 17.17},--Left Column Coordinates
									{-24.03, -16.08}, {-19.23, -11.93}, {-14.43, -7.77}, {-9.63, -3.61}, {-4.82, 0.55}, {-0.02, 4.71}, {4.78, 8.87}}--Right Column Coordinates
			if gStates.mapShape:sub(1,1)=="O" then --Open Limited to ? Columns
				local checkUpTo=5
				if gStates.mapShape:sub(17, 17)=="3" then checkUpTo=12 end
				local pos=obj.getPosition()
				for b=1, checkUpTo, 1 do
					if math.sqrt(((pos[1]-edgeCoordinates[b][1])^2)+((pos[3]-edgeCoordinates[b][2])^2))<1 then
						found=true broadcastToAll("You are playing an "..gStates.mapShape.." Game", {1,0,0}) fail=true break
					end
				end
			end

			--Check if Core tile has at least two neighbor Tiles
			--Check if Country tile has at least one neighbor that has two neighbor Tiles
			if gStates.gameScenario~="The Gauntlet" then
				local startAngle=41
				local radius=6.35
				local neighboursFound=0
				local neighbourTile=nil
				local playAreaObjects=getObjectFromGUID(mapArea).getObjects()
				for a, b in pairs(playAreaObjects) do
					if terrainTiles[b.guid]~=nil then
						local tested=b.getPosition()
						for c=1, 6, 1 do --chech the 6 positions
							local AngleTORadian=math.rad(startAngle+(60*(c-1)))
							local toCheck={obj.getPosition()[1]+(math.cos(AngleTORadian)*radius), 0, obj.getPosition()[3]+(math.sin(AngleTORadian)*radius)}
							if math.sqrt(((tested[1]-toCheck[1])^2)+((tested[3]-toCheck[3])^2))<1 then neighboursFound=neighboursFound+1 neighbourTile=b break end
						end
					end
				end
				if terrainTiles[obj.guid].tileType=="core" and neighboursFound<2 then broadcastToAll("Core Terrain Tiles need two or more neighbours", {1,0,0}) fail=true end
				if terrainTiles[obj.guid].tileType~="core" and neighboursFound<2 then
					neighboursFound=0
					if neighbourTile~=nil then
						for a, b in pairs(playAreaObjects) do
							if terrainTiles[b.guid]~=nil then
								local tested=b.getPosition()
								for b=1, 6, 1 do --chech the 6 positions
									local AngleTORadian=math.rad(startAngle+(60*(b-1)))
									local toCheck={neighbourTile.getPosition()[1]+(math.cos(AngleTORadian)*radius), 0, neighbourTile.getPosition()[3]+(math.sin(AngleTORadian)*radius)}
									if math.sqrt(((tested[1]-toCheck[1])^2)+((tested[3]-toCheck[3])^2))<1 then neighboursFound=neighboursFound+1 break end
								end
							end
						end
						if neighboursFound<2 then broadcastToAll("Country Terrain Tiles can't be strung out that far", {1,0,0}) fail=true end
					end
				end
			end

			--Check if a terrain tile is face up
			if obj.is_face_down==true then fail=true end

			--Check if a City tile is played to wrong side in Life and Death
			if gStates.gameScenario=="Life and Death" then
				if obj.guid=="53d847" and startBearing<=northBearing then --red city
					broadcastToAll("Red City needs to be placed in the Northern section", {1,0,0})
					fail=true
				end
				if obj.guid=="314081" and startBearing>=northBearing then --green city
					broadcastToAll("Green City needs to be placed in the Southern section", {1,0,0})
					fail=true
				end
			end

			--deploy monster token if terrain tile is deployed correctly
			if fail==false then
				--Check if the object is a core tile and unlock elite units
				if terrainTiles[obj.guid].tileType=="core" and (obj.guid~="835c91" or (obj.guid=="835c91" and gStates.volkareCampAsCity==true)) and gStates.gameScenario~="First Reconnaissance" and gStates.gameScenario~="Conquer and Hold" then
					gStates.playedCoreTiles=gStates.playedCoreTiles+1
					gStates.eliteUnitsUsed=true
					if gStates.playedCoreTiles==1 then broadcastToAll("Elite Units are included in the next Offer", {1,1,0.5}) end
					core=1
				end

				--Play the correct pugs for the terrain tile
				for hexLocation, hexFeature in pairs(terrainTiles[obj.guid].hexFeature) do
					--refill empty token piles
					tokenRefill()

					local params={}
					--don't deploy token if megapolis is being played
					local free=true
					local tileRotation=math.floor(((180-(180-obj.getRotation()[2]))/60)+0.5)*60
					if tileRotation<0 then tileRotation=tileRotation+360 end
					if gStates.megapolis>gStates.cityTiles-#gStates.citiesPlayed
						and (obj.guid=="314081" or obj.guid=="63f201" or obj.guid=="a3ce11" or obj.guid=="53d847")
						and tonumber(hexLocation)==tileRotation then
						terrainTiles[obj.guid].hexFeature[hexLocation]="city"
						gStates.hexOverideSave[obj.guid]={[hexLocation]="city"}
						free=false
					end

					--deploy monster token if hex is free.
					if free==true then
						if gStates.gameScenario=="Dungeon Lords" and hexFeature=="monastery" and gStates.tacticShown==false then
							gStates.locationPlace[#gStates.locationPlace+1]="Secret Tomb"
							mainUIUpdate("Need Token")
						end

						if gStates.gameScenario=="Dungeon Lords" and hexFeature=="village" and gStates.tacticShown==false then
							gStates.locationPlace[#gStates.locationPlace+1]="Secret Dungeon"
							mainUIUpdate("Need Token")
						end

						--if a monastery tile is placed start dealing advanced actions
						if hexFeature=="monastery" and gStates.playedAllready[obj.guid]~=true then
							if gStates.monasteryCount>=0 then
								--Look for an empty spot in advanced action offer location
								local params={rotation ={0, 180, 0}}
								local monasteryOffer={"b7cb3b", "d925e4", "caf03e", "5c4c6d", "d51391", "7700a8"} --advanced action monastery offer zones
								local drawDecks={"4fa2f2","715b48","7ce69e"} --Zone covering Regular units draw deck, Elite Units Draw Deck, Advanced Actions Draw Deck
								for i=1, #monasteryOffer, 1 do
									local objCard=getObjectFromGUID(monasteryOffer[i]).getObjects()
									local found=false
									for j=1, #objCard, 1 do
										if objCard[j].tag=="Card" or objCard[j].tag=="Deck" then found=true break end
									end
									if found==false then params.position={40.8-i*4.8, 1.25, -10.2} break end
								end
								--Play an advanced action card
								local MonasteryDeck=getObjectFromGUID(drawDecks[3]).getObjects()
								while MonasteryDeck==nil do Wait.frames(function() MonasteryDeck=getObjectFromGUID(drawDecks[3]).getObjects() end, 10) end
								getObjectFromGUID(MonasteryDeck[1].guid).takeObject(params)
								broadcastToAll("Monastery is teaching a new Advanced Action", {1,1,0.5})
							end
							gStates.monasteryCount=gStates.monasteryCount+1
						end

						local tokenPileGreen=monsterPiles.green--Standard green Tokens
						local tokenPileBrown=monsterPiles.tan--Standard Brown Tokens
						local tokenPileRed=	 monsterPiles.red--Standard Red Tokens

						--Rampaging Orks & Draconum
						if (hexFeature=="rampaging" or hexFeature=="draconum") and gStates.playedAllready[obj.guid]~=true then
							playRampagingTokens(obj, startBearing, northBearing, hexLocation, hexFeature, true)
						end

						--Mine
						if hexFeature:sub(1, 4)=="mine" and gStates.playedAllready[obj.guid]~=true and gStates.gameScenario=="Mines Liberation" then
							if core==1 then tokenPileGreen=tokenPileRed end
							if getObjectFromGUID(tokenPileBrown).getQuantity()>0 and getObjectFromGUID(tokenPileGreen).getQuantity()>0 then
								if hexLocation=="center" then
									local pos={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									local token=getObjectFromGUID(tokenPileBrown).takeObject({rotation=faceDown, position=pos})
									gStates.monsterPlayLocation[token.guid]=pos
									gStates.mineMonsterQty[obj.guid]={[token.guid]="alive"}
									local pos={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
									local token=getObjectFromGUID(tokenPileGreen).takeObject({rotation=faceUp, position=pos})
									gStates.monsterPlayLocation[token.guid]=pos
									gStates.mineMonsterQty[obj.guid][token.guid]="alive"
								else
									local pos={angleToXY(obj, hexLocation)[1]-0.1, y, angleToXY(obj, hexLocation)[2]-0.1}
									local token=getObjectFromGUID(tokenPileBrown).takeObject({rotation=faceDown, position=pos})
									gStates.monsterPlayLocation[token.guid]=pos
									gStates.mineMonsterQty[obj.guid]={[token.guid]="alive"}
									local pos={angleToXY(obj,hexLocation)[1]+0.1, y+0.5, angleToXY(obj,hexLocation)[2]+0.1}
									local token=getObjectFromGUID(tokenPileGreen).takeObject({rotation=faceUp, position=pos})
									gStates.monsterPlayLocation[token.guid]=pos
									gStates.mineMonsterQty[obj.guid][token.guid]="alive"
								end
							else
								broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
							end
							tokenPileGreen=monsterPiles.green
						end

						--glade
						if hexFeature=="glade" and obj.guid~="314081" and gStates.playedAllready[obj.guid]~=true then
							if gStates.gameScenario=="Life and Death" and core==0 then
								if startBearing<=northBearing then
									if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then tokenPileGreen=monsterPiles.greenElem end
									if getObjectFromGUID(monsterPiles.tanElem).getQuantity()>0 then tokenPileBrown=monsterPiles.tanElem end--elementalist Tokens
								else
									if (startBearing<=northBearing+1 and gStates.coop==1) or (gStates.coop==0 and obj.getPosition()[3]<-7 and obj.getPosition()[3]>-8 and obj.getPosition()[1]<-31 and obj.getPosition()[1]>-32) then
										if math.random(1,2)==1 then--Random Shades Token
											if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then tokenPileGreen=monsterPiles.greenElem end
											if getObjectFromGUID(monsterPiles.tanElem).getQuantity()>0 then tokenPileBrown=monsterPiles.tanElem end--elementalist Tokens
										else
											if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then tokenPileGreen=monsterPiles.greenDark end
											if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then tokenPileBrown=monsterPiles.tanDark end---Dark Crusader Tokens
											if hexLocation=="center" then
												local cemetary=getObjectFromGUID("651583").takeObject({rotation=faceUp, position={obj.getPosition()[1], 1.17, obj.getPosition()[3]}})
												cemetary.lock()
											else
												local cemetary=getObjectFromGUID("651583").takeObject({rotation=faceUp, position={angleToXY(obj,hexLocation)[1], 1.17, angleToXY(obj,hexLocation)[2]}})
												cemetary.lock()
											end
											terrainTiles[obj.guid].hexFeature[hexLocation]="graveyard"
											gStates.hexOverideSave[obj.guid]={[hexLocation]="graveyard"}
										end
									else
										if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then tokenPileGreen=monsterPiles.greenDark end
										if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then tokenPileBrown=monsterPiles.tanDark end---Dark Crusader Tokens
										if hexLocation=="center" then
											local cemetary=getObjectFromGUID("651583").takeObject({rotation=faceUp, position={obj.getPosition()[1], 1.17, obj.getPosition()[3]}})
											cemetary.lock()
										else
											local cemetary=getObjectFromGUID("651583").takeObject({rotation=faceUp, position={angleToXY(obj,hexLocation)[1], 1.17, angleToXY(obj,hexLocation)[2]}})
											cemetary.lock()
										end
										terrainTiles[obj.guid].hexFeature[hexLocation]="graveyard"
										gStates.hexOverideSave[obj.guid]={[hexLocation]="graveyard"}
									end
								end
								if getObjectFromGUID(tokenPileBrown).getQuantity()>0 and getObjectFromGUID(tokenPileGreen).getQuantity()>0 then
									if hexLocation=="center" then
										local pos={obj.getPosition()[1]+0.1, y, obj.getPosition()[3]-0.1}
										local token=getObjectFromGUID(tokenPileBrown).takeObject({rotation=faceUp, position=pos})
										gStates.monsterPlayLocation[token.guid]=pos
										local pos={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
										local token=getObjectFromGUID(tokenPileGreen).takeObject({rotation=faceUp, position=pos})
										gStates.monsterPlayLocation[token.guid]=pos
									else
										local pos={angleToXY(obj,hexLocation)[1]-0.1, y, angleToXY(obj,hexLocation)[2]-0.1}
										local token=getObjectFromGUID(tokenPileBrown).takeObject({rotation=faceUp, position=pos})
										gStates.monsterPlayLocation[token.guid]=pos
										local pos={angleToXY(obj,hexLocation)[1]+0.1, y+0.5, angleToXY(obj,hexLocation)[2]+0.1}
										local token=getObjectFromGUID(tokenPileGreen).takeObject({rotation=faceUp, position=pos})
										gStates.monsterPlayLocation[token.guid]=pos
									end
								else
									broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
								end
							end
							if gStates.gameScenario=="The Realm of the Dead Blitz" then
								if hexLocation=="center" then params.position={obj.getPosition()[1], 1.17, obj.getPosition()[3]}
								else params.position={angleToXY(obj,hexLocation)[1], 1.17, angleToXY(obj,hexLocation)[2]} end
								params.rotation=faceDown
								local cemetary=getObjectFromGUID("651583").takeObject(params)
								cemetary.lock()
								terrainTiles[obj.guid].hexFeature[hexLocation]="graveyard"
								gStates.hexOverideSave[obj.guid]={[hexLocation]="graveyard"}
								local token={}
								if gStates.playedGladeTiles==0 then
									if hexLocation=="center" then params.position={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1]-0.1, y ,angleToXY(obj,hexLocation)[2]-0.1} end
									if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
									else params.position={angleToXY(obj,hexLocation)[1]+0.1, y+0.5, angleToXY(obj,hexLocation)[2]+0.1} end
									if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								if gStates.playedGladeTiles==1 then
									if hexLocation=="center" then params.position={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1]-0.1, y ,angleToXY(obj,hexLocation)[2]-0.1} end
									if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.tanDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.tan).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
									else params.position={angleToXY(obj,hexLocation)[1]+0.1, y+0.5 ,angleToXY(obj,hexLocation)[2]+0.1} end
									if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								if gStates.playedGladeTiles==2 then
									if hexLocation=="center" then params.position={obj.getPosition()[1], y, obj.getPosition()[3]}
									else params.position={angleToXY(obj,hexLocation)[1], y ,angleToXY(obj,hexLocation)[2]} end
									if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.redDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.red).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								if gStates.playedGladeTiles==3 then
									if hexLocation=="center" then params.position={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1]-0.1, y, angleToXY(obj,hexLocation)[2]-0.1} end
									if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.redDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.red).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
									else params.position={angleToXY(obj,hexLocation)[1]+0.1, y+0.5, angleToXY(obj,hexLocation)[2]+0.1} end
									if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								if gStates.playedGladeTiles==4 then
									if hexLocation=="center" then params.position={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1]-0.1, y, angleToXY(obj,hexLocation)[2]-0.1} end
									if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.redDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.red).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1]+0.1, y+0.5, obj.getPosition()[3]+0.1}
									else params.position={angleToXY(obj,hexLocation)[1]+0.1, y+0.5, angleToXY(obj,hexLocation)[2]+0.1} end
									if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.tanDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.tan).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								--this is for five player games, which is currently imposible
								if gStates.playedGladeTiles==5 then
									if hexLocation=="center" then params.position={obj.getPosition()[1]-0.1, y, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1]-0.1, y ,angleToXY(obj,hexLocation)[2]-0.1} end
									if getObjectFromGUID(monsterPiles.greenDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1], y+0.5, obj.getPosition()[3]-0.1}
									else params.position={angleToXY(obj,hexLocation)[1], y+0.5, angleToXY(obj,hexLocation)[2]} end
									if getObjectFromGUID(monsterPiles.redDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.redDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.red).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									if hexLocation=="center" then params.position={obj.getPosition()[1]+0.1, y+1, obj.getPosition()[3]+0.1}
									else params.position={angleToXY(obj,hexLocation)[1]+0.1, y+1, angleToXY(obj,hexLocation)[2]+0.1} end
									if getObjectFromGUID(monsterPiles.tanDark).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.tanDark).takeObject(params) else token=getObjectFromGUID(monsterPiles.tan).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								end
								gStates.playedGladeTiles=gStates.playedGladeTiles+1
							end
						end

						--Mage Tower
						if hexFeature=="mage tower" and gStates.playedAllready[obj.guid]~=true then
							if hexLocation=="center" then params.position={obj.getPosition()[1], y, obj.getPosition()[3]}
								else params.position={angleToXY(obj, hexLocation)[1], y, angleToXY(obj,hexLocation)[2]} end
							params.rotation=faceDown
							if getObjectFromGUID(monsterPiles.purple).getQuantity()>0 then
								local token=getObjectFromGUID(monsterPiles.purple).takeObject(params)
								gStates.monsterPlayLocation[token.guid]=params.position
							else
								broadcastToAll("Sorry, There are no Purple tokens left to deploy", {1,0,0})
							end
						end

						--Keep
						if hexFeature=="keep" and gStates.playedAllready[obj.guid]~=true then
							local token={}
							if hexLocation=="center" then params.position={obj.getPosition()[1], y, obj.getPosition()[3]}
								else params.position={angleToXY(obj,hexLocation)[1], y, angleToXY(obj, hexLocation)[2]} end
							params.rotation=faceDown
							if gStates.gameScenario=="The Hidden Valley Blitz" and obj.guid=="a3ce11" then
								if getObjectFromGUID(monsterPiles.green).getQuantity()>1 then
									local token={}
									params.position={angleToXY(obj,hexLocation)[1]-0.1, y, angleToXY(obj, hexLocation)[2]-0.1}
									if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenElem).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
									params.position={angleToXY(obj,hexLocation)[1]+0.1, y, angleToXY(obj, hexLocation)[2]+0.1}
									if getObjectFromGUID(monsterPiles.greenElem).getQuantity()>0 then token=getObjectFromGUID(monsterPiles.greenElem).takeObject(params) else token=getObjectFromGUID(monsterPiles.green).takeObject(params) end
									gStates.monsterPlayLocation[token.guid]=params.position
								else
									broadcastToAll("Sorry, There are not enough Green tokens left to deploy", {1,0,0})
								end
							else
								if getObjectFromGUID(monsterPiles.gray).getQuantity()>0 then
									local token=getObjectFromGUID(monsterPiles.gray).takeObject(params)
									gStates.monsterPlayLocation[token.guid]=params.position
								else
									broadcastToAll("Sorry, There are no Gray tokens left to deploy", {1,0,0})
								end
							end
						end

						--Ruins
						if hexFeature=="ruin" and gStates.playedAllready[obj.guid]~=true then
							if gStates.dayRound==false then faceUp=faceDown end
							if hexLocation=="center" then params.position={obj.getPosition()[1], y, obj.getPosition()[3]}
								else params.position={angleToXY(obj, hexLocation)[1], y, angleToXY(obj, hexLocation)[2]} end
							params.rotation=faceUp
							local token=getObjectFromGUID(monsterPiles.yellow).takeObject(params)
							gStates.monsterPlayLocation[token.guid]=params.position
							faceUp={0.0, 180.0, 0.0}
						end

						--City
						if (hexFeature:sub(1, 4)=="city" or hexFeature=="Volkare's Camp") and gStates.playedAllready[obj.guid]~=true
							and (obj.guid~="835c91" or (obj.guid=="835c91" and gStates.volkareCampAsCity==true))
							or (hexLocation=="center" and gStates.shadesOfTezlaPugs==true and gStates.gameScenario=="Mega Conquest" and (obj.guid=="be86ec" or obj.guid=="de7fad")) then
							local randomCity=""
							local cityGUID=""
							if gStates.gameScenario~="Life and Death" and hexFeature:sub(6, 8)=="red" then cityGUID="d0acb2" end
							if gStates.gameScenario~="Life and Death" and hexFeature:sub(6, 10)=="green" then cityGUID="34e3e4" end
							if gStates.gameScenario~="The Realm of the Dead Blitz" and hexFeature:sub(6, 9)=="blue" then cityGUID="6079bc" end
							if gStates.gameScenario~="The Hidden Valley Blitz" and hexFeature:sub(6, 10)=="white" then cityGUID="156b6a" end
							if hexFeature=="Volkare's Camp" then cityGUID=volkare.terrainHex end --Volkare

							--Random City
							for a=1, #gStates.citiesPlayed, 1 do
								if gStates.citiesPlayed[a]==cityGUID then gStates.randomCities=true end
							end
							if gStates.randomCities==true and ((#gStates.citiesPlayed<4 and gStates.volkareCampAsCity==false) or (#gStates.citiesPlayed<5 and gStates.volkareCampAsCity==true)) then
								local CityList={"34e3e4", "6079bc", "156b6a", "d0acb2", volkare.terrainHex}
								local duplicate=true
								math.randomseed(os.time())
								local choice=4
								if gStates.volkareCampAsCity==true then choice=5 end
								if gStates.gameScenario=="The Gauntlet" then choice=3 end
								local count=0
								while duplicate==true do
									duplicate=false
									cityGUID=CityList[math.random(1,choice)]
									for i=1, #gStates.citiesPlayed, 1 do
										if cityGUID==gStates.citiesPlayed[i] then duplicate=true end
									end
									count=count+1 if count==200 then duplicate=true end
								end
							end
							if gStates.gameScenario=="The Gauntlet" and hexFeature:sub(6, 8)=="red" then cityGUID="d0acb2" end
							if gStates.gameScenario=="Life and Death" and hexFeature:sub(6, 8)=="red" then cityGUID=darkCrusader.terrainHex end--Necropolis
							if gStates.gameScenario=="Life and Death" and hexFeature:sub(6, 10)=="green" then cityGUID=elementalist.terrainHex end--Hidden Valley
							if gStates.gameScenario=="The Realm of the Dead Blitz" and hexFeature:sub(6, 9)=="blue" then cityGUID=darkCrusader.terrainHex end--Necropolis
							if gStates.gameScenario=="The Hidden Valley Blitz" and hexFeature:sub(6, 10)=="white" then cityGUID=elementalist.terrainHex end--Hidden Valley
							if gStates.gameScenario=="Mega Conquest" and obj.guid=="be86ec" then cityGUID=darkCrusader.terrainHex end--Necropolis
							if gStates.gameScenario=="Mega Conquest" and obj.guid=="de7fad" then cityGUID=elementalist.terrainHex end--Hidden Valley
							gStates.cityRevealed={model=cityGUID, terrain=obj.guid}

							--Place City Monster Tokens
							function cityArmyPlace(CityGUID, CityLevel)
								local cityArmy={}
								cityArmy["d0acb2"]={{1,0,0,0,0,0},{0,1,1,0,0,0},{1,0,1,0,0,0},{0,2,1,0,0,0},{1,1,1,0,0,0},{0,2,2,0,0,0},{1,2,1,0,0,0},{2,1,1,0,0,0},{1,2,2,0,0,0},{2,1,2,0,0,0},{3,1,1,0,0,0},deployLocation=-22.0}--Red City
								cityArmy["34e3e4"]={{0,0,1,1,0,0},{0,0,2,0,0,0},{0,0,1,2,0,0},{1,0,1,1,0,0},{1,0,2,0,0,0},{1,0,1,2,0,0},{1,0,2,1,0,0},{2,0,2,0,0,0},{1,0,3,1,0,0},{2,0,2,1,0,0},{3,0,2,0,0,0},deployLocation=-25.5}--Green City
								cityArmy["6079bc"]={{0,1,0,1,0,0},{0,2,0,0,0,0},{1,1,0,0,0,0},{1,1,0,1,0,0},{1,2,0,0,0,0},{2,1,0,0,0,0},{1,2,0,1,0,0},{2,2,0,0,0,0},{3,1,0,0,0,0},{2,2,0,1,0,0},{3,2,0,0,0,0},deployLocation=-18.5}--Blue City
								cityArmy["156b6a"]={{1,0,0,0,0,0},{1,0,0,1,0,0},{2,0,0,0,0,0},{1,0,0,2,0,0},{2,0,0,1,0,0},{1,0,0,3,0,0},{2,0,0,2,0,0},{3,0,0,1,0,0},{2,0,0,3,0,0},{3,0,0,2,0,0},{4,0,0,1,0,0},deployLocation=-15.0}--White City
								cityArmy[volkare.terrainHex]={{0,0,0,0,0,1},{0,0,0,0,0,2},{0,0,0,0,1,2},{0,0,0,1,1,2},{1,0,0,0,1,2},{1,0,0,0,1,3},{1,0,0,0,2,2},{1,0,0,1,2,2},{1,0,0,1,2,3},{1,0,0,1,2,5},{2,0,0,0,2,5},deployLocation=-9.0}--Volkare's Camp
								cityArmy[darkCrusader.terrainHex]={{0,0,1,0,0,0},{0,0,0,0,1,0},{0,0,0,0,1,1},{0,0,1,0,1,0},{0,0,1,0,1,1},{0,0,1,0,1,2},{0,0,2,0,1,1},{0,0,1,0,2,1},{0,0,1,0,2,2},{0,0,2,0,2,1},{0,0,2,0,2,2},{0,0,2,0,2,3},deployLocation=1.5}--Necropolis
								cityArmy[elementalist.terrainHex]={{0,0,0,0,0,2},{0,0,1,0,0,1},{0,0,1,0,0,2},{0,0,0,0,1,2},{0,0,1,0,1,1},{0,0,1,0,1,2},{0,0,1,0,1,3},{0,0,2,0,1,2},{0,0,1,0,2,2},{0,0,1,0,2,3},{0,0,2,0,2,2},{0,0,2,0,2,3},deployLocation=10.2}--Hidden Valley
								--{{no. White Units, No. Purple Units, No. Tan Units, No. Gray Units, No. Red Units, No. Green Units}}
								local pugDraw=		{monsterPiles.white, monsterPiles.purple, monsterPiles.tan, monsterPiles.gray, monsterPiles.red, monsterPiles.green}
								local pugDrawDark=	{"",	   "",		 monsterPiles.tanDark, "",		 monsterPiles.redDark, monsterPiles.greenDark}
								local pugDrawElem=	{"",	   "",		 monsterPiles.tanElem, "",		 monsterPiles.redElem, monsterPiles.greenElem}
								--{White Unit Pile, Purple Unit Pile, Tan Unit Pile, Gray Unit Pile, Red Unit Pile, Green Unit Pile}
								local count=1
								local monster=0
								local params={position={-49, 1.2, 0}, rotation={0, 180, 180}, smooth=true}
								if CityGUID==volkare.terrainHex then params.position={-68.5, 1.2, 0} end--volkare's Camp
								if CityGUID==darkCrusader.terrainHex or CityGUID==elementalist.terrainHex then params.position={-57.5, 1.2, 0} params.rotation={0, 180, 0} end--Tezla Leaders
								for a=1, 6, 1 do
									for b=1, cityArmy[CityGUID][CityLevel][a], 1 do
										params.position[2]=1+(0.4*count)
										params.position[3]=cityArmy[CityGUID].deployLocation+(0.4*count)
										local token={guid="1111"..a..b}
										if CityGUID~=elementalist.terrainHex and CityGUID~=darkCrusader.terrainHex then
											if getObjectFromGUID(pugDraw[a]).getQuantity()>0 then
												token=getObjectFromGUID(pugDraw[a]).takeObject(params)
												gStates.monsterPlayLocation[token.guid]={params.position[1], params.position[2], params.position[3]}
											else
												broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
											end
										end
										if CityGUID==elementalist.terrainHex then
											local pugCheckQty=0
											if getObjectFromGUID(pugDrawElem[a])~=nil then pugCheckQty=getObjectFromGUID(pugDrawElem[a]).getQuantity() end
											if pugCheckQty>0 then
												token=getObjectFromGUID(pugDrawElem[a]).takeObject(params)
												gStates.monsterPlayLocation[token.guid]={params.position[1], params.position[2], params.position[3]}
											else
												if getObjectFromGUID(pugDraw[a]).getQuantity()>0 then
													token=getObjectFromGUID(pugDraw[a]).takeObject(params)
													gStates.monsterPlayLocation[token.guid]={params.position[1], params.position[2], params.position[3]}
												else
													broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
												end
											end
										end
										if CityGUID==darkCrusader.terrainHex then
											local pugCheckQty=0
											if getObjectFromGUID(pugDrawDark[a])~=nil then pugCheckQty=getObjectFromGUID(pugDrawDark[a]).getQuantity() end
											if pugCheckQty>0 then
												token=getObjectFromGUID(pugDrawDark[a]).takeObject(params)
												gStates.monsterPlayLocation[token.guid]={params.position[1], params.position[2], params.position[3]}
											else
												if getObjectFromGUID(pugDraw[a]).getQuantity()>0 then
													token=getObjectFromGUID(pugDraw[a]).takeObject(params)
													gStates.monsterPlayLocation[token.guid]={params.position[1], params.position[2], params.position[3]}
												else
													broadcastToAll("Sorry, There are no tokens left to deploy", {1,0,0})
												end
											end
										end
										count=count+1
										if CityGUID~=darkCrusader.terrainHex and CityGUID~=elementalist.terrainHex then--not the leaders
											if gStates.cityMonsterQty[CityGUID]==nil then gStates.cityMonsterQty[CityGUID]={shieldsNeeded=0} end
											if not (CityGUID==volkare.terrainHex and (a==4 or a==6)) then--Volkare Green and and gray tokens are worth half so can't be used to determin victory
												gStates.cityMonsterQty[CityGUID].shieldsNeeded=gStates.cityMonsterQty[CityGUID].shieldsNeeded+1
											end
										end
										gStates.cityMonsterQty[CityGUID].shieldsThere=0
										gStates.cityMonsterQty[CityGUID][token.guid]="alive"
									end
								end
							end

							--play the city token
							if getObjectFromGUID(cityGUID)~=nil and gStates.gameScenario~="The Lost Relic Blitz" then
								getObjectFromGUID(cityGUID).setPositionSmooth({obj.getPosition()[1], 1.09, obj.getPosition()[3]})
								if cityGUID==volkare.terrainHex then
									gStates.cityVolkareTile=obj.guid
									getObjectFromGUID(gStates.volkareModel).setPositionSmooth({obj.getPosition()[1], 1.11, obj.getPosition()[3]})
								end
								if cityGUID~=elementalist.terrainHex and cityGUID~=darkCrusader.terrainHex then table.insert(gStates.citiesPlayed, cityGUID) end
								local currenLeader=elementalist
								if cityGUID==darkCrusader.terrainHex then currenLeader=darkCrusader end
								if (cityGUID==darkCrusader.terrainHex or cityGUID==elementalist.terrainHex) then--and gStates.gameScenario=="Mega Conquest" and gStates.cityMonsterQty[cityGUID]==nil then
									local x=gStates.cityLevels[#gStates.citiesPlayed]
									if x==nil or gStates.gameScenario~="Mega Conquest" then x=gStates.cityLevels[1] end
									gStates.cityMonsterQty[cityGUID]={shieldsNeeded=x}
									cityArmyPlace(cityGUID, x)
									getObjectFromGUID(currenLeader.disc).setCustomObject({image=leaderData[currenLeader.terrainHex][x].discImg})
									getObjectFromGUID(currenLeader.disc).reload()
									getObjectFromGUID(currenLeader.token).setCustomObject({image=leaderData[currenLeader.terrainHex][x].tokenImg})
									getObjectFromGUID(currenLeader.token).setName("Elementalist Leader Level "..x)
									getObjectFromGUID(currenLeader.token).reload()

									gStates.cityMonsterQty[cityGUID][currenLeader.token]="alive"
									if currenLeader==elementalist then
										gStates.elementalistLevel=x
										terrainTiles[obj.guid].hexFeature.center="hidden valley"
										gStates.hexOverideSave[obj.guid]={center="hidden valley"}
										gStates.monsterPlayLocation[elementalist.token]={-55.3, 1.5, 15.3}
									else
										gStates.darkCrusaderLevel=x
										terrainTiles[obj.guid].hexFeature.center="necropolis"
										gStates.hexOverideSave[obj.guid]={center="necropolis"}
										gStates.monsterPlayLocation[darkCrusader.token]={-55.3, 1.5, 6.7}
									end
								end
								if gStates.megapolis>gStates.cityTiles-#gStates.citiesPlayed then
									local cityList={"d0acb2", "34e3e4", "6079bc", "156b6a"}
									local duplicate=true
									math.randomseed(os.time())
									while duplicate==true do
										duplicate=false
										randomCity=cityList[math.random(1,4)]
										for i=1, #gStates.citiesPlayed, 1 do
											if randomCity==gStates.citiesPlayed[i] then duplicate=true end
										end
									end
									getObjectFromGUID(randomCity).setPositionSmooth({obj.getPosition()[1]+2.38, 1.1, obj.getPosition()[3]})
									table.insert(gStates.citiesPlayed, randomCity)
								end
							end

							--set the city token level and deploy monster tokens
							local playedCities=#gStates.citiesPlayed
							if gStates.megapolis==1 and gStates.cityTiles-playedCities<1 then playedCities=playedCities-1 end
							if gStates.megapolis==2 then playedCities=playedCities-(playedCities/2) end
							if gStates.cityLevels~=nil and gStates.cityLevels[playedCities]~=nil then
								if gStates.cityLevels[playedCities]>0
									and gStates.gameScenario~="The Lost Relic Blitz" and gStates.gameScenario~="The Realm of the Dead Blitz" and gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Hidden Valley Blitz" and not (gStates.gameScenario=="Mega Conquest"
									and (cityGUID==darkCrusader.terrainHex or cityGUID==elementalist.terrainHex)) then
									Wait.frames(function()
										if gStates.megapolis>gStates.cityTiles-playedCities then
											local citylevel=math.ceil(gStates.cityLevels[playedCities]/2)
											getObjectFromGUID(cityGUID).setCustomObject({diffuse=cityLevelImage[cityGUID][citylevel]})
											cityArmyPlace(cityGUID, citylevel)
											local citylevel=math.floor(gStates.cityLevels[playedCities]/2)
											getObjectFromGUID(randomCity).setCustomObject({diffuse=cityLevelImage[randomCity][citylevel]})
											cityArmyPlace(randomCity, citylevel)
											getObjectFromGUID(randomCity).reload()
										else
											local citylevel=gStates.cityLevels[playedCities]
											if cityGUID~=volkare.terrainHex then getObjectFromGUID(cityGUID).setCustomObject({diffuse=cityLevelImage[cityGUID][citylevel]}) end
											cityArmyPlace(cityGUID, citylevel)
										end
										getObjectFromGUID(cityGUID).reload()
									end, 100)
								else
									--put friendly shields on city
									for bb=1, 4 ,1 do
										for aa=1, #mageKnights, 1 do
											local cityCard={["6079bc"]="79a723", ["d0acb2"]="bd6ab1", ["34e3e4"]="8de450", ["156b6a"]="a37b57"}
											if gStates.positionMageKnight[bb]==mageKnights[aa].mage and gStates.positionMageKnight[bb]~="nobody" and cityGUID~=darkCrusader.terrainHex and cityGUID~=elementalist.terrainHex then
												local tempPos=getObjectFromGUID(cityCard[cityGUID]).getPosition()
												getObjectFromGUID(mageKnights[aa].shieldContainer).takeObject({position={tempPos[1]-2.5+bb, 2, tempPos[3]}})
												break
											end
										end
									end
								end
							end

							--Red dragon on cities in Lost Legion Scenario
							if gStates.gameScenario=="The Lost Relic Blitz" then
								local pos={obj.getPosition()[1], y, obj.getPosition()[3]}
								local token=getObjectFromGUID(monsterPiles.red).takeObject({rotation=faceDown, position=pos})--red dragon
								gStates.monsterPlayLocation[token.guid]=pos
							end
						end
					end
				end
				--lock terrain tile if succesfuly deployed all tokens
				Wait.frames(function() obj.lock() end, 50)
				gStates.playedAllready[obj.guid]=true

				--fame gain for played tiles in First Reconnaissance and Lost Relic
				if (gStates.gameScenario=="First Reconnaissance"or gStates.gameScenario=="The Lost Relic Blitz") and gStates.tacticShown==false then
					turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+1
					if terrainTiles[obj.guid].hexFeature["center"]:sub(1,4)=="city" and gStates.gameScenario=="The Lost Relic Blitz" then
						turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+1
					end
					broadcastToAll("Exploring gives fame gain in this Scenario", {1,1,0.5})
					mainUIUpdate("Fame Gain from exploring")
				end
			end
		end

		--Check if a shield or avatar has been played to cities or board
		if zone.guid==mapArea or zone.guid=="8a7266" or zone.guid=="648da8" or zone.guid=="213d78" or zone.guid=="d2d65e" or zone.guid==volkare.discZone or zone.guid==darkCrusader.discZone or zone.guid==elementalist.discZone then
			if (obj.getName()=="Shield" or obj.getName()=="Burned Monastery" or obj.getName()=="Secret Dungeon" or obj.getName()=="Secret Tomb") and obj.getLock()==false then
				Wait.frames(function() shieldLocation(obj, zone, "enter") end, 2)
			else
				if zone.guid=="8a7266" or zone.guid=="648da8" or zone.guid=="213d78" or zone.guid=="d2d65e" or zone.guid==volkare.discZone then
					--Record if avatar is dropped on city card
					for b, mageSearch in pairs(turnOrder) do
						if mageSearch.mage==obj.getName() then
							local found=false
							if gStates.cityMonsterQty[cityScriptZones[zone.guid].cityGUID]~=nil then
								for cityguid, monsters in pairs(gStates.cityMonsterQty[cityScriptZones[zone.guid].cityGUID]) do
									if monsters=="alive" then found=true end
								end
							end
							if found==false then
								if zone.guid~=volkare.discZone then
									broadcastToAll(mageSearch.mage.." has entered the City.", positionToColor(b))
								else
									broadcastToAll(mageSearch.mage.." has entered the Camp.", positionToColor(b))
								end
							else
								if zone.guid~=volkare.discZone then
									broadcastToAll(mageSearch.mage.." is Assaulting the City.", positionToColor(b))
								else
									broadcastToAll(mageSearch.mage.." is Assaulting the Camp.", positionToColor(b))
								end
							end
							break
						end
					end
				end
			end
		end

		--Add decals back to Pursuing and Ambushing tokens
		if zone.guid==mapArea and (gStates.rampageAmbush==true or gStates.rampagePursuit==true) then
			if gStates.ambushing[obj.guid]~=nil then
				obj.addDecal({name="Ambush Circle", url="http://cloud-3.steamusercontent.com/ugc/1617313257052487169/A0FE9D65A1E285BC563116914A5D6C36DF0B7B6E/",
				position={0, 0.05, 0}, rotation={90.0, 180.0, 0.0}, scale={11, 11, 11}})
			end
			for mage1, monsters in pairs(gStates.pursuing) do
				if monsters[obj.guid]~=nil then
					for _, mage2 in pairs(mageKnights) do
						if mage2.mage==mage1 then
							obj.addDecal({name="Pursue Shield", url=mage2.shieldImage,
							position={0, 0.15, 0}, rotation={90.0, 180.0, 0.0}, scale={1, 1, 1}})
						end
					end
				end
			end
		end

		--Record Cards in hand as part of a players deed deck
		if obj~=nil then
			if obj.tag=="Card" then
				for a=1, #turnOrder, 1 do
					if zone.guid==handZones[turnOrder[a].seatPos] and obj.getName()~="Regular Unit" and obj.getName()~="Elite Unit" then
						for b=1, #turnOrder, 1 do
							local found=false
							for c=1, #turnOrder[b].deadDeckInventory, 1 do
								if obj.guid==turnOrder[b].deadDeckInventory[c] then table.remove(turnOrder[b].deadDeckInventory, c) found=true break end
							end
							if found==true then break end
						end
						turnOrder[a].deadDeckInventory[#turnOrder[a].deadDeckInventory+1]=obj.guid
						mainUIUpdate("Card Entered Hand")
						break
					end
				end
			end
		end

		--Offer zone claim buttons and ownership removal
		for zoneGUID, cardSource in pairs(cardClaimingZones) do
			if zone.guid==zoneGUID then
				--Remove card ownership if returned to offer
				for b=1, #turnOrder, 1 do
					local found=false
					for c=1, #turnOrder[b].deadDeckInventory, 1 do
						if obj.guid==turnOrder[b].deadDeckInventory[c] then table.remove(turnOrder[b].deadDeckInventory, c) found=true break end
					end
					if found==true then break end
				end
				--add claim buttons
				if gStates.tacticShown==false and gStates.tacticRemove==false then
					obj.UI.setXmlTable({createClaimButton(obj.guid, cardSource)})
				end
			end
		end

		--protect skill zone from passing through objects
		if zone.guid=="d20c01" then
			zoneEntered=true
			Wait.frames(function() zoneEntered=false end, 50)
		end

		--tactic zone claim buttons
		for zoneGUID, cardSource in pairs(tacticClaimingZones) do
			if zone.guid==zoneGUID then
				claimButtonRefresh()
			end
		end

		--Updates Main UI buttons when anything is played to a mages play Area
		if gStates.turnNumber>0 then--makes sure end of round doesn't have errors
			for a=1, #turnOrder, 1 do
				if zone.guid==playerPlayAreas[turnOrder[a].seatPos]
				or zone.guid==deedDeckZones[turnOrder[a].seatPos]
				or zone.guid==deedDeckDiscardZones[turnOrder[a].seatPos] then
					mainUIUpdate("Object entered into play area, hand or discard")
					break
				end
			end
		end

		--Add icons to mocnster token in play areas.
		--if gStates.turnNumber>0 then--makes sure end of round doesn't have errors
		if zone.guid==playerPlayAreas[2] or zone.guid==playerPlayAreas[3] or zone.guid==playerPlayAreas[1] or zone.guid==playerPlayAreas[4] then
			--Add combat icon to summoner monsters
			local addedButtons={}
			if monsterPugs[obj.guid]~=nil
				and ((monsterPugs[obj.guid].monsters~=nil and monsterPugs[obj.guid].pugType~="yellow" and obj.guid~=darkCrusader.token)
				or (obj.guid==darkCrusader.token and monsterPugs[obj.guid].monsters[gStates.darkCrusaderLevel]~=nil))
				and	gStates.summonStates[obj.guid]~="SummonDone" then
				addedButtons={{tag="Button", attributes={id=obj.guid,
					onClick="global/summonMonster",
					height=70/0.9, width=70/0.9,
					position=tostring(120/0.9).." 0 "..tostring(-15/0.9), rotation="0 0 180",
					color="rgba(0,0,0,0.0)"},
					children={{tag="Image", attributes={image="Attack Button"}}}}}
			end
			--Add Leader Overkill buttons
			if obj.guid==darkCrusader.token or obj.guid==elementalist.token then
				addedButtons[#addedButtons+1]={tag="Button", attributes={id=obj.guid.."OverkillUp",	onClick="global/adjustOverkill", height=50/0.9, width=50/0.9,
					color="rgba(0,0,0,0.0)", position="-62 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Image", attributes={image="Overkill Up"}}}}
				addedButtons[#addedButtons+1]={tag="Image", attributes={image="Overkill Text", height=50/0.9, width=55/0.9, position="0 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Text", attributes={id=obj.guid.."Overkill",	color="rgb(0,0,0)", fontSize="45", fontStyle="Bold", alignment="MiddleCenter", text=gStates.leaderOverkill}}}}
				addedButtons[#addedButtons+1]={tag="Button", attributes={id=obj.guid.."OverkillDown", onClick="global/adjustOverkill", height=50/0.9, width=50/0.9,
					color="rgba(0,0,0,0.0)", position="62 "..tostring(-120/0.9).." "..tostring(-15/0.9), rotation="0 0 180"},
					children={{tag="Image", attributes={image="Overkill Down"}}}}
			end
			--Add fortified symbol if attacking over Walls
			-- obj.guid
			-- if terrainTiles[terTile.guid].wallList~=nil and terrainTiles[terTile.guid].wallList[tostring(hexBearing)]~=nil then
			--
			-- 	local tileToObjStartDist=math.sqrt(((monsterDetails.location[1]-tilePos[1])^2)+((monsterDetails.location[3]-tilePos[3])^2))
			-- 	if tileToObjStartDist<3.1 then
			-- 		local hexOroginBearing="center"
			-- 		if tileToObjStartDist>1 then
			-- 			hexOroginBearing=math.floor(((math.deg(math.atan2(tilePos[3]-monsterDetails.location[3], tilePos[1]-monsterDetails.location[1])))/60)+0.5)*60
			-- 			hexOroginBearing=(math.floor(((terTile.getRotation()[2]-180)/60)+0.5)*60)+hexOroginBearing
			-- 			if hexOroginBearing>=360 then hexOroginBearing=hexOroginBearing-360 end
			-- 			if hexOroginBearing<0 then hexOroginBearing=hexOroginBearing+360 end
			-- 		end
			-- 		if terrainTiles[terTile.guid].wallList[tostring(hexBearing)][tostring(hexOroginBearing)]~=nil then
			-- 			protection="Wall"
			-- 		end
			-- 	end
			-- end
			if #addedButtons>0 then obj.UI.setXmlTable(addedButtons) end
		--end
		end

		--Toggle half cards when droped under units in player area, and make crystals highlight.
		if zone.guid==playerPlayAreas[2] or zone.guid==playerPlayAreas[3] or zone.guid==playerPlayAreas[1] or zone.guid==playerPlayAreas[4] then
			local b=7
			for a=1, 6, 1 do
				if obj.guid==bannerCards[a] then
					if obj.getPosition()[3]>=-38.4 then
						local pass=obj.getPosition()[1]
						getObjectFromGUID(bannerCards[a]).setState(2)
						Wait.frames(function()
							if getObjectFromGUID(bannerCards[b])~=nil then
								getObjectFromGUID(bannerCards[b]).setScale({0.65, 1, 0.65})
								getObjectFromGUID(bannerCards[b]).setPosition({pass, 1.2, -38.12})
							end
						end, 2)
						break
					end
				end
				b=b+1
			end

			--if object is a crystal then highlight it
			local crystalGlow={["Red Mana"]={1, 0, 0}, ["Green Mana"]={0, 1, 0}, ["Blue Mana"]={0, 0, 1}, ["White Mana"]={1, 1, 1}, ["Black Mana"]={0.3, 0.0, 0.6}, ["Gold Mana"]={1, 0.9, 0}}
			if 	crystalGlow[obj.getName()]~=nil then
				--obj.highlightOn(crystalGlow[obj.getName()])
				Wait.time(function() obj.AssetBundle.playTriggerEffect(0) end, 0.1)
				Wait.time(function() obj.AssetBundle.playLoopingEffect(1) end, 1)
			end
		end
	else
		--Update Mage Level Boards before the game starts.
		if gStates.mageKnightLevels==true then
			local playerZones={	"004cca", "9ef3c1", "182df2", "813d11",--Play Area
								"98a462", "0d6195", "648671", "8d6d93",--Unit Area
								"13f39d", "5bb87a", "621d88", "2936ad"}--Crystal inventory

			for a, b in pairs(playerZones) do
				if zone.guid==b then
					mageLevelBoard()
					break
				end
			end
		end
	end
	--Start of rounds should have half or more standard color Mana Dice
	if zone.guid=="2cd825" then
		if gStates.dieRollPause==true then Wait.time(function()
			if gStates.tacticRemove==true or gStates.tacticShown==true or gStates.firstStarted==0 then
				local bad=0
				local manaDie=getObjectFromGUID("2cd825").getObjects()
				for a=1, #manaDie, 1 do
					if manaDie[a].tag=="Dice" then
						local b=manaDie[a].getRotationValue()
						if b=="Black Mana" or b=="Gold Mana" then bad=bad+1 end
					end
				end
				if bad>gStates.diceNeeded/2 or (gStates.startAtNight==true and gStates.currentRound==1) then
					for a=1, #manaDie, 1 do
						if manaDie[a].tag=="Dice" then
							local b=manaDie[a].getRotationValue()
							if b=="Black Mana" or b=="Gold Mana" then manaDie[a].randomize() end
						end
					end
				end
			end
			gStates.dieRollPause=true
		end, 2) end
		gStates.dieRollPause=false
	end
end

--Undo a monastary & re-enable end turn button
function onObjectLeaveScriptingZone(zone, obj)
	if gStates.firstStarted==1 then
		--Toggle half cards when picked up.
		if zone.guid==playerPlayAreas[2] or zone.guid==playerPlayAreas[3] or zone.guid==playerPlayAreas[1] or zone.guid==playerPlayAreas[4] then
			Wait.time(function()
				local b=1
				for a=7, 12, 1 do
					if obj.guid==bannerCards[a] and obj.getPosition()[2]>2 then
						getObjectFromGUID(bannerCards[a]).setState(1)
						Wait.frames(function() if getObjectFromGUID(bannerCards[b])~=nil then getObjectFromGUID(bannerCards[b]).setScale({1.5, 1, 1.5}) end end, 1)
						break
					end
					b=b+1
				end
			end, 0.22)
			--if object is a crystal then remove highlight.
			local crystalGlow={["Red Mana"]={1, 0, 0}, ["Green Mana"]={0, 1, 0}, ["Blue Mana"]={0, 0, 1}, ["White Mana"]={1, 1, 1}, ["Black Mana"]={0.3, 0.0, 0.6}, ["Gold Mana"]={1, 0.9, 0}}
			if crystalGlow[obj.getName()]~=nil then
				--obj.highlightOff(crystalGlow[obj.getName()])
				obj.AssetBundle.playLoopingEffect(0)
			end
			--remove icons from monsters
			obj.UI.setXmlTable({{}})
		end

		--Updates Main UI buttons when anything is removed from a mages play Area
		if gStates.turnNumber>0 then
			for a=1, #turnOrder, 1 do
				if zone.guid==playerPlayAreas[turnOrder[a].seatPos]
				or zone.guid==deedDeckDiscardZones[turnOrder[a].seatPos]
				or zone.guid==handZones[turnOrder[a].seatPos] then
					mainUIUpdate("Object removed into play area, hand or discard")
					break
				end
			end
		end

		--Remove offer claim buttons
		for zoneGUID, cardSource in pairs(cardClaimingZones) do
			if zone.guid==zoneGUID then
				obj.UI.setXmlTable({{}})
			end
		end

		--Remove tactic claim buttons
		for zoneGUID, cardSource in pairs(tacticClaimingZones) do
			if zone.guid==zoneGUID then
				obj.UI.setXmlTable({{}})
			end
		end

		--Remove Skill claim buttons
		if zone.guid=="d20c01" and zoneEntered==false then
			for skillGUID, x in pairs(gStates.mageSkills) do
				getObjectFromGUID(skillGUID).UI.setXmlTable({{}})
			end
		end

		--remove decals from anything lifted from the map.
		if zone.guid==mapArea then
			obj.setDecals({})
		end

		--Check if a shield has been removed
		if (zone.guid==mapArea)--or zone.guid=="8a7266" or zone.guid=="648da8" or zone.guid=="213d78" or zone.guid=="d2d65e" or zone.guid==volkare.discZone or zone.guid==darkCrusader.discZone or zone.guid==elementalist.discZone)
			and (obj.getName()=="Shield" or obj.getName()=="Burned Monastery" or obj.getName()=="Secret Dungeon" or obj.getName()=="Secret Tomb") and obj.getLock()==false then
			Wait.frames(function() shieldLocation(obj, zone, "remove") end, 2)
		end
	else
		--Update Mage Level Boards before the game starts.
		if gStates.mageKnightLevels==true then
			local playerZones={	"004cca", "9ef3c1", "182df2", "813d11",--Play Area
								"98a462", "0d6195", "648671", "8d6d93",--Unit Area
								"13f39d", "5bb87a", "621d88", "2936ad"}--Crystal inventory
			for a, b in pairs(playerZones) do
				if zone.guid==b then
					mageLevelBoard()
					break
				end
			end
		end
	end
end

--Container Shuffling, Image Updating and size changing
local discardFace={}--holder for passing variables to a sub function
local bagExit=false-- Used to check if a terrain tile has just been pulled and not error.
function onObjectEnterContainer(bag, obj)
	scaleBags(bag, obj, "enter")
	--Shuffles the contents of certain bags when items are dropped in
	local ToBeShuffled = {"96a66d","21cb81","41db58","f3e3b3","0f342d","86bf10","731696","fb1d20","8c8a04","46f93a","a0ba93","c87444","37d9b4","219c37"}
		--Arythea Skills, Goldyx Skills, Norowas Skills, Tovak Skills, Krang Skills, Braevalar Skills, Ymirgh Skills, Wolfhawk Skills, round order container, City Monster Shuffler, City Tiles, Core Tiles, Country Tiles, All Skill. terrain pile
	local found=false
	if gStates.firstStarted==1 then
		for a=1, #ToBeShuffled, 1 do
			if ToBeShuffled[a]==bag.guid then found=true getObjectFromGUID(ToBeShuffled[a]).shuffle() break end
		end
	end
	--removes location data from monster pugs
	if found==false then
		gStates.monsterPlayLocation[obj.guid]=nil
		gStates.rampagingMonsters[obj.guid]=nil
		for mage, monster in pairs(gStates.pursuing) do monster[obj.guid]=nil end
		gStates.ambushing[obj.guid]=nil
	end
	if gStates.firstStarted==1 then
		mainUIUpdate("Object entered container or formed Deck")
	end
end
function onObjectLeaveContainer(bag, obj)
	--swap coop skill state when drawn
	if (obj.guid=="3fba07" or obj.guid=="4ac9f6" or obj.guid=="3b3273" or obj.guid=="725de9" or
		obj.guid=="55e5e5" or obj.guid=="818aea" or obj.guid=="564392" or obj.guid=="ebbbfc") then
		if gStates.coop==0 then Wait.frames(function() obj.setState(2) end, 60) end
		if gStates.playerCount==1 then
			local soloDescription={	["3fba07"]="Once a round (Except during combat):\n\nThrow away up to two Wound cards from your hand. (Put this skill token in your Play Area to activated it).\n\nNext turn only:\n\nYou may play a Wound card sideways for +3.",
									["4ac9f6"]="Once a Round:\n\nReduce one attack of an enemy by 1. That enemy gains Cumbersome this turn. (Put this skill token in your Play Area to activated it).\n\nNext turn only:\n\nYou may reduce one attack of an enemy by 1. That enemy gains Cumbersome.",
									["3b3273"]="Once a Round:\n\nReroll a mana die in the source. (Put this skill token in your Play Area to activated it).\n\nNext turn only:\n\nYou may use an extra die from the source. Also gain a crystal of the same color. You may decide whether to reroll that die or not at the end of your turn.",
									["725de9"]="Once a Round:\n\nWhen you spend a mana of a basic color, gain a crystal of that color. (Put this skill token in your Play Area to activated it, and place another crystal of the same color on it).\n\nNext turn only:\n\nYou may gain the mana token on this skill.",
									["55e5e5"]="Once a Round:\n\nReduce the Move cost of all terrains by 2 (to a minimum of 1). (Put this skill token in your Play Area to activated it).\n\nNext turn only:\n\nYou may reduce the move cost of all terrains by 1 (to a minimum of 1).",
									["818aea"]="Once a Round:\n\nGain a mana token of any color except Gold. (Put this skill token in your Play Area to activated it, and place another crystal of the same color on it).\n\nNext turn only:\n\nYou may play the mana on this skill to power a deed card that gives Move, Influence, or any type of Attack or Block, and get +4 from that card.",
									["564392"]="Once a Round Except during Interactions): (Put this skill token in your Play Area to activated it).\n\nOne card played sideway is worth +4. For each command token without a Unit gain an extra +1.\n\nNext turn only:\n\nYou may reduce the armour of an enemy by 1, and one attack of the same or another enemy by 1",
									["ebbbfc"]="Once a Round:\n\nChoose one card from your discard pile and place it on top  of your deed deck.\n\nIf the dummy hasn't called end of round, place the top card from the Advanced Action Deck in his deck.",
									["3d8336"]="Once a Round (On any player's turn):\r\n\r\nFlip this to draw two cards, and gain a Red mana token.\r\n\r\nYou cannot use another Motivation Skill until the end of your next turn.",
									["171244"]="Once a Round (On any player's turn)\r\n\r\nFlip this to draw two cards, and gain a Green mana token.\r\n\r\nYou cannot use another Motivation Skill until the end of your next turn.",
									["14399f"]="Once a Round (On any player's turn)\r\n\r\nFlip this to draw two cards, and gain a White mana token.\r\n\r\nYou cannot use another Motivation Skill until the end of your next turn.",
									["527b47"]="Once a Round (On any player's turn)\r\n\r\nFlip this to draw two cards, and gain Fame 1.\r\n\r\nYou cannot use another Motivation Skill until the end of your next turn.",
									["ba4df5"]="Once a Round (On any player's turn)\r\n\r\nFlip this to draw two cards, and gain a Blue mana token.\r\n\r\nYou cannot use another Motivation Skill until the end of your next turn.",
									["adf8ab"]="Once a turn:\n\nPay a mana of any color and throw away a Wound from your hand. Also draw a card."}
			obj.setDescription(soloDescription[obj.guid])
		end
	end

	--protect play zone from passing through objects
	bagExit=true
	Wait.frames(function() bagExit=false end, 50)

	--randomizes Volker's Reminder Token
	if bag.guid=="758fb3" then
		local VolkareReminder={	[1]="http://cloud-3.steamusercontent.com/ugc/1617311203414015137/203E9CF64831CC5BBB43AAEC5CCBC9B450B2304E/",
								[2]="http://cloud-3.steamusercontent.com/ugc/1617311203413988434/BF2446CF89EF2F4398C38B32F5CAB104FCCE94AC/",
								[3]="http://cloud-3.steamusercontent.com/ugc/1617311203414024554/8541C7CC8BC88442619F8921DAA50CAE0BCD88E9/",
								[4]="http://cloud-3.steamusercontent.com/ugc/1617311203414009198/C52B548C26AC08BCE1237A114A47DC973D0CE7D9/",
								[5]="http://cloud-3.steamusercontent.com/ugc/1617311203414000318/7F26EE486FD34E0FD08E0653EF4DACCB69F38A87/",
								[6]="http://cloud-3.steamusercontent.com/ugc/1617311203413995197/64E0C4E59A98DAFB09633F31CA9D1279F0593CFD/",}
		Wait.condition(function()
		--Wait.frames(function()
			obj.setCustomObject({image=VolkareReminder[math.random(1, 6)]})
			obj.reload()
			broadcastToAll("Volkare's Attack randomly picked", {1,1,0.5})
		--end, 100)
		end, function() return obj.resting end)
	end

	scaleBags(bag, obj, "exit")
end
function onObjectRandomize(randomize_object, player_color)
	Wait.frames(function() scaleBags(randomize_object, "dud",  "shuffle") end, 5)
end
function scaleBags(bag, obj, state)
	local toBeScaled=  {"46f93a", monsterPiles.green, monsterPiles.gray, monsterPiles.purple, monsterPiles.tan, monsterPiles.white, monsterPiles.red, monsterPiles.yellow, "f469f4", "33de41",	--main pugs
						monsterPiles.greenDark, monsterPiles.tanDark, monsterPiles.redDark, monsterPiles.greenElem, monsterPiles.tanElem, monsterPiles.redElem,											--shades of tezla
						"89a23e", "88ff48", "bf4140", "77e1c6", "fe25be", "143108", "b65694",								--???
						"ed0ec9", "b336a7", "6ae8c3", "763c2d", "730898", "b23c77", "869a0f", "f9d3a4", "076ab9",			--main pugs discard
						"61ba30", "e9b18c", "9860ce", "4aecb4", "236555", "80c10d",											--shades of tezla discard
						"21cb81", "41db58", "96a66d", "86bf10", "0f342d", "f3e3b3", "731696", "fb1d20",						--Skill bags
						"927f52", "51a8a0",	"1de952", "855a00", "ab4b31", "b76529", "73e384", "453e1f",						--Command Tokens
						"651583",																							--Graveyards
						"37d9b4", "c87444", "a0ba93", "966e0e"}																--terrain
	for i=1, #toBeScaled, 1 do
		if toBeScaled[i]==bag.guid then
			local contents=#getObjectFromGUID(bag.guid).getObjects()
			local bagPosition=bag.getPosition()
			local bagScale=bag.getScale()
			if contents==0 then bag.setColorTint({r=0.4, g=0.4, b=0.4}) contents=1 else bag.setColorTint({r=1, g=1, b=1}) end
			if bag.guid=="37d9b4" or bag.guid=="c87444" or bag.guid=="a0ba93" or bag.guid=="966e0e" then
				if gStates.dayRound==false and gStates.firstStarted==1 then bag.setColorTint({r=0.6, g=0.6, b=0.6})
					if state=="exit" then obj.setColorTint({r=0.6, g=0.6, b=0.6}) end
				else
					if state=="exit" then obj.setColorTint({r=1.0, g=1.0, b=1.0}) end
				end
				bag.setScale({x=bagScale[1], y=contents*2.5, z=bagScale[3]})
				bag.setPosition({bagPosition[1], 0.97+(contents*0.125), bagPosition[3]})
				if state=="exit" then obj.setPosition({bagPosition[1], 2.00+(contents*0.125), bagPosition[3]}) end
			else
				if bag.guid=="21cb81" or bag.guid=="41db58" or bag.guid=="96a66d" or bag.guid=="86bf10" or bag.guid=="0f342d" or bag.guid=="f3e3b3" or bag.guid=="731696" or bag.guid=="fb1d20" then
					bag.setScale({x=bagScale[1], y=contents*0.55, z=bagScale[3]})
					bag.setPosition({bagPosition[1], 1.1+(contents*0.05), bagPosition[3]})
					if state=="exit" then obj.setPosition({bagPosition[1], 1.00+(contents*0.05), bagPosition[3]}) end
				else
					bag.setScale({x=bagScale[1], y=contents, z=bagScale[3]})
					if state=="exit" then obj.setPosition({bagPosition[1], 1.00+(contents*0.15), bagPosition[3]}) end
				end
			end
			break
		end
	end
	--Change the face of discard bags to simulate stacks
	local faceUpdateBags={}
		faceUpdateBags["ed0ec9"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383093/5C0B0863A2A684CC86F239B0AFC2B66CDB44281E/", last=""}--Orcs
		faceUpdateBags["763c2d"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383421/153D7EE40796F1C8E3F8AFB2826ECB37B1F9664F/", last=""}--Dungeon
		faceUpdateBags["b23c77"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383524/0C17A5F3DC9C998603EF2C1E7D70896EB5017E07/", last=""}--Dragon
		faceUpdateBags["b336a7"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383758/AD8ED63B3CB3794AD7010B20C8830F4B06A0BA90/", last=""}--Keep
		faceUpdateBags["6ae8c3"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384790/F0BE7FDB8D25735A8FE3C61734DE459E4BAF7B95/", last=""}--Mages
		faceUpdateBags["730898"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384652/5F42B8B0CE7061B9D56B69693C88441D97ADC874/", last=""}--City
		faceUpdateBags["869a0f"]={empty="http://cloud-3.steamusercontent.com/ugc/775101936467726708/78E1EAC6AA943CA3A7C4DCCB0EB53B0CC9DFE388/", last=""}--Ruins
		faceUpdateBags["f9d3a4"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383197/E0745EA1293600D6004CC8C56D11462620900FB9/", last=""}--Dark Crusader Rewards
		faceUpdateBags["076ab9"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383323/F1D0AFC443E37F19C882E713D8D9F468CFD8D574/", last=""}--Elementalist Rewards
		faceUpdateBags["61ba30"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384548/897B84DB16F2E5DDACA0AE9BF8E58B886EF141C5/", last=""}--Dark Crusader Green
		faceUpdateBags["e9b18c"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383876/E528C72E428DEFE259BD955FCC373621EBAAD48F/", last=""}--Dark Crusader Tan
		faceUpdateBags["9860ce"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900383994/ABEEDEDF72A20B81EFE4EE311487DF2F5F289DC8/", last=""}--Dark Crusader Red
		faceUpdateBags["4aecb4"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384265/78B5C431F9971565C76E9B928F20AB4848571576/", last=""}--Elementalist Green
		faceUpdateBags["236555"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384103/DC7990922E22DF1B5073D339B5CB3E5E7DC49474/", last=""}--Elementalist Tan
		faceUpdateBags["80c10d"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900384395/05232ABA62E2E5551BD4F40E8C2F22B852809240/", last=""}--Elementalist Red
		faceUpdateBags["927f52"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900401094/9FBBE51844977D018F8D8CCFDEFE13FA830C0E6B/", last=""}--Norowas Command
		faceUpdateBags["51a8a0"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900394203/4C5DA04F417A4F08F17FAC1DD168C02996D3A552/", last=""}--Goldyx Command
		faceUpdateBags["1de952"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900406826/27CF35147664A5859183C155FC376F8220743249/", last=""}--Tovak Command
		faceUpdateBags["855a00"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900430302/31A55B3C2148C5F68AE981232207E33ED5B3D2A7/", last=""}--Wolfhawk Command
		faceUpdateBags["ab4b31"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900419085/53B5F98D1EDBC51264A9415771D3A11B9473F049/", last=""}--Braevalar Command
		faceUpdateBags["b76529"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900412495/1DEF6C90304CD1C4BC58E577003175BDBC62DCFC/", last=""}--Krang Command
		faceUpdateBags["73e384"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900424528/69FAEA11901806CF60328566B7C961C25ABF648C/", last=""}--Ymirgh Command
		faceUpdateBags["453e1f"]={empty="http://cloud-3.steamusercontent.com/ugc/938341811900385827/D40A2B009343F87C125BDA0879E99759DDBD1721/", last=""}--Arythea Command
		faceUpdateBags["966e0e"]={empty="http://cloud-3.steamusercontent.com/ugc/775099536456561054/533E028DE9E5D64C1D05FA08BB007DB51CA0347C/", last=""}--Arythea Command
	for k, v in pairs (faceUpdateBags) do
		if k==bag.guid then
			if state~="shuffle" then if obj.getName()~="Command Token" and obj.getName()~="MapTile" then bag.setColorTint({r=0.5, g=0.5, b=0.5}) end end
			if state=="enter" then
				if obj.tag=="Tile" then discardFace[bag.guid]=obj.getCustomObject().image end
				if obj.tag=="Generic" then discardFace[bag.guid]=obj.getCustomObject().diffuse end
			end
			if #getObjectFromGUID(bag.guid).getObjects()==0 then discardFace[bag.guid]=faceUpdateBags[bag.guid].empty end

			function delayFaceChange_Enter()
				local discardFacex=delayPram.discardFacex
				local bagx=delayPram.bagx
				if (delayPram.statex=="exit" or delayPram.statex=="shuffle") and #getObjectFromGUID(bagx.guid).getObjects()>0 then
					local clone=bagx.clone({})
					local cloneObject=clone.takeObject({})
					clone.destruct()
					discardFacex[bagx.guid]=cloneObject.getCustomObject().image
					if cloneObject.tag=="Generic" then discardFacex[bagx.guid]=cloneObject.getCustomObject().diffuse end
					cloneObject.destruct()
				end
				for guid, image in pairs(discardFacex) do
			        local bag=getObjectFromGUID(guid)
		            bag.setCustomObject({diffuse=image})
		            bag.reload()
			    end
				Timer.destroy("Time_PugEnter")
				discardFace={}
			end

			delayPram={statex=state, bagx=bag, discardFacex=discardFace}
			Timer.destroy("Time_PugEnter")
			Timer.create({identifier="Time_PugEnter", delay=0.01, function_name="delayFaceChange_Enter", function_owner=self, parameters=delayPram})
			break
        end
	end
end

function onPlayerChangeColor(color)
	if gStates.firstStarted==1 then mainUIUpdate("Player Changed Colour") end
end

---------------
-- UI Functions
---------------
local scoreViewing={}
function ClosePanel(player, mouseButton, id)
	if mouseButton=="-1" then
		UI.hide("Setup")
		UI.show("HelpButton")
		local temp={}
		for a=1, #scoreViewing, 1 do
			if scoreViewing[a]~=player.color then temp[#temp+1]=scoreViewing[a] end
		end
		scoreViewing=temp
		if #scoreViewing<=1 then
			UI.hide("ScoreBoard")
			scoreViewing={}
		else
			local visibility=""
			for a=1, #scoreViewing, 1 do
				visibility=visibility..scoreViewing[a]
				if a<#scoreViewing then visibility=visibility.."|" end
			end
			UI.setAttribute("ScoreBoard", "visibility", visibility)
		end
	end
end

function randomSetup(player, value, id)
	local value=scenarioList[math.random(2, #scenarioList-1)][1]
	if value:reverse():sub(1, 5)=="ztilB" then ScenarioSelection(nil, value:sub(1, string.len(value)-6), nil) else ScenarioSelection(nil, value, nil) end
	if (value=="Conquest Blitz" or value=="Volkare's Return Blitz") then BlitzSelection(nil, "True", "BlitzSelection") end
	local randomOptions={"volkareCampAsCity", "randomTileOrientation", "randomCities", "shadesOfTezlaPugs",
			"startAtNight", "darknessComing", "includeYmirgh", "weatherMod", "questMod", "rampageAmbush", "rampagePursuit"}--"mageKnightLevels", "removeLostLegionExpansion"
	for a=1, #randomOptions, 1 do
		if UI.getAttribute(randomOptions[a], "interactable")=="True" then
			if math.random(1,10)>7 then optionsUpdate(nil, "True", randomOptions[a]) end
		end
	end
	if math.random(1,10)>7 then MoreRampageSelection(nil, "True", "MoreRampageSelection") end
	if math.random(1,10)>7 then RampageSelection(nil, "True", "RampageSelection") end
	ToolTipUpdate(id)
end

function ScenarioSelection(player, value, id)
	local ScenarioWas=gStates.gameScenario
	gStates.gameScenario=value
	UI.setAttribute("ScenarioSelection", "text", value)
	if value=="Ladyhawke" then gStates.coop=1 UI.setAttribute("StartButton", "text", "Start - Co-Operative") end
	--reset players
	local MKDropDownUI={"secondMKSelection", "thirdMKSelection", "fourthMKSelection", "firstMKSelection", "dummyMKSelection"}
	for a=1, 5, 1 do
		gStates.positionMageKnight[a]="nobody"
		UI.setAttribute(MKDropDownUI[a], "text", "nobody")
		UI.setAttribute(MKDropDownUI[a], "interactable", "true")
	end
	UI.setAttribute("StartButton", "interactable", "False")
	UI.setAttribute("StartButtonImage", "image", "Button Deactive Long")
	UI.setAttribute("StartButtonText", "text", "Start - Select Two Mage Knights First")
	updateDropDowns()

	gStates.megapolis=0
	gStates.playerCount=0
	gStates.coop=0
	--Dummy Menu Access
	if value=="Conquer and Hold" or value=="One to Return" or value=="Volkare's Return" or value=="Volkare's Quest" or value=="Ladyhawke" then
		UI.setAttribute("dummyMKSelection", "interactable", "false")
		if value=="First Reconnaissance" or value=="Conquer and Hold" or value=="One to Return" or value=="Ladyhawke" then
			UI.setAttribute("dummyMKSelection", "text", "nobody")
			UI.setAttribute("VolkareLevelSelectionRow", "active", "false")
			UI.setAttribute("VolkareRaceSelectionRow", "active", "false")
			gStates.positionMageKnight[5]="nobody"
			gStates.coop=0
		else
			UI.setAttribute("dummyMKSelection", "text", "Volkare")
			UI.setAttribute("VolkareLevelSelectionRow", "active", "true")
			UI.setAttribute("VolkareRaceSelectionRow", "active", "true")
			gStates.positionMageKnight[5]="Volkare"
			gStates.coop=1
		end
	else
		UI.setAttribute("dummyMKSelection", "interactable", "True")
		if ScenarioWas=="Volkare's Return" or ScenarioWas=="Volkare's Return Blitz" or ScenarioWas=="Volkare's Quest" then
			UI.setAttribute("dummyMKSelection", "text", "nobody")
			UI.setAttribute("VolkareLevelSelectionRow", "active", "false")
			UI.setAttribute("VolkareRaceSelectionRow", "active", "false")
			gStates.positionMageKnight[5]="nobody"
			gStates.coop=0
		end
	end
	--Blitz Menu Access
	UI.setAttribute("BlitzSelection", "textColor", "rgb(0.0,0.0,0.0)")
	UI.setAttribute("BlitzSelection", "interactable", "True")
	UI.setAttribute("BlitzSelection", "isOn", "false")
	gStates.blitz=0
	if value=="First Reconnaissance" then
		UI.setAttribute("BlitzSelection", "interactable", "False")
	else
		if value=="The Realm of the Dead" or value=="The Hidden Valley" or value=="The Lost Relic" then
		 	UI.setAttribute("BlitzSelection", "isOn", "true")
			gStates.blitz=1
		end
		for a=1, #scenarioList, 1 do
			if gStates.blitz==1 and gStates.gameScenario.." Blitz"==scenarioList[a][1] then gStates.gameScenario=gStates.gameScenario.." Blitz" break end
			if gStates.blitz==0 and gStates.gameScenario:sub(1, -7)==scenarioList[a][1] then gStates.gameScenario=gStates.gameScenario:sub(1, -7) break end
		end
	end
	--Volkare's Camp Menu Access
	UI.setAttribute("volkareCampAsCity", "interactable", "True")
	UI.setAttribute("volkareCampAsCity", "isOn", "false")
	gStates.questMod=false
	if value=="First Reconnaissance" then UI.setAttribute("volkareCampAsCity", "interactable", "False") end
	--Lost Legion Menu Access
	UI.setAttribute("removeLostLegionExpansion", "interactable", "True")
	UI.setAttribute("removeLostLegionExpansion", "isOn", "false")
	gStates.removeLostLegionExpansion=false
	if value=="First Reconnaissance" then
		UI.setAttribute("removeLostLegionExpansion", "interactable", "False")
		UI.setAttribute("removeLostLegionExpansion", "isOn", "true")
		gStates.removeLostLegionExpansion=true
	end
	--Rotated Terrain Menu access
	UI.setAttribute("randomTileOrientation", "interactable", "True")
	UI.setAttribute("randomTileOrientation", "isOn", "false")
	gStates.randomTileOrientation=false
	if value=="First Reconnaissance" then UI.setAttribute("randomTileOrientation", "interactable", "False") end
	--Random Cities Menu access - could be locked off for scenarios without city fighting
	UI.setAttribute("randomCities", "interactable", "True")
	UI.setAttribute("randomCities", "isOn", "false")
	gStates.randomCities=false
	if value=="First Reconnaissance" or value=="The Lost Relic" or value=="The Gauntlet" then UI.setAttribute("randomCities", "interactable", "False") end
	--Tezla monsters Menu Access
	UI.setAttribute("shadesOfTezlaPugs", "interactable", "True")
	UI.setAttribute("shadesOfTezlaPugs", "isOn", "false")
	gStates.shadesOfTezlaPugs=false
	if value~="First Reconnaissance" and value~="Life and Death" and value~="The Realm of the Dead" and value~="The Hidden Valley" then
		if value=="Mega Conquest" then UI.setAttribute("shadesOfTezlaPugs", "isOn", "true") gStates.shadesOfTezlaPugs=true end
	else
		UI.setAttribute("shadesOfTezlaPugs", "interactable", "False")
		if value~="First Reconnaissance" then
			UI.setAttribute("shadesOfTezlaPugs", "isOn", "true")
			gStates.shadesOfTezlaPugs=true
		end
	end
	--Rampage Menu Access
	UI.setAttribute("RampageSelection", "interactable", "True")
	UI.setAttribute("MoreRampageSelection", "interactable", "True")
	UI.setAttribute("RampageSelection", "isOn", "false")
	UI.setAttribute("MoreRampageSelection", "isOn", "false")
	gStates.rampage=0
	if value=="First Reconnaissance" then
		UI.setAttribute("RampageSelection", "interactable", "False")
		UI.setAttribute("MoreRampageSelection", "interactable", "False")
	end
	--Day Night Menu Access
	UI.setAttribute("startAtNight", "interactable", "True")
	UI.setAttribute("startAtNight", "isOn", "False")
	gStates.dayRound=false
	if value=="First Reconnaissance" or value=="Fast Forwarded Conquest" then
		UI.setAttribute("startAtNight", "interactable", "False")
		if value=="Fast Forwarded Conquest" then
			UI.setAttribute("startAtNight", "isOn", "True")
			gStates.dayRound=true
		end
	end
	--Ambush Menu Access
	UI.setAttribute("rampageAmbush", "interactable", "True")
	UI.setAttribute("rampageAmbush", "isOn", "False")
	gStates.rampageAmbush=false
	if value=="First Reconnaissance" then UI.setAttribute("rampageAmbush", "interactable", "False") end
	if value=="The Hidden Valley" then
		UI.setAttribute("rampageAmbush", "isOn", "True")
		gStates.rampageAmbush=true
	end
	--Pursuit Menu Access
	UI.setAttribute("rampagePursuit", "interactable", "True")
	UI.setAttribute("rampagePursuit", "isOn", "False")
	gStates.rampagePursuit=false
	if value=="First Reconnaissance" then UI.setAttribute("rampagePursuit", "interactable", "False") end
	if value=="The Realm of the Dead" then
		UI.setAttribute("rampagePursuit", "isOn", "True")
		gStates.rampagePursuit=true
	end
	--Darkness is Coming Menu Access
	UI.setAttribute("darknessComing", "interactable", "True")
	UI.setAttribute("darknessComing", "isOn", "false")
	gStates.darknessComing=false
	if value=="First Reconnaissance" then UI.setAttribute("darknessComing", "interactable", "False") end
	--Mage Knight Level Menu access
	UI.setAttribute("mageKnightLevels", "interactable", "True")
	UI.setAttribute("mageKnightLevels", "isOn", "False")
	gStates.mageKnightLevels=false
	if value=="First Reconnaissance" or value=="The Lost Relic" or value=="Quest for the Golden Grail" or value=="Fast Forwarded Conquest" then
		UI.setAttribute("mageKnightLevels", "interactable", "False")
		if value=="The Lost Relic" or value=="Fast Forwarded Conquest" then
			UI.setAttribute("mageKnightLevels", "isOn", "True")
			gStates.mageKnightLevels=true
		end
	end
	--Ymirgh Menu Access
	UI.setAttribute("includeYmirgh", "interactable", "True")
	UI.setAttribute("includeYmirgh", "isOn", "false")
	gStates.includeYmirgh=false
	if value=="First Reconnaissance" then UI.setAttribute("includeYmirgh", "interactable", "False") end
	--Weather Menu Access
	UI.setAttribute("weatherMod", "interactable", "True")
	UI.setAttribute("weatherMod", "isOn", "false")
	gStates.weatherMod=false
	if value=="First Reconnaissance" then UI.setAttribute("weatherMod", "interactable", "False") end
	--Quest Menu Access
	UI.setAttribute("questMod", "interactable", "True")
	UI.setAttribute("questMod", "isOn", "false")
	gStates.questMod=false
	if value=="First Reconnaissance" then UI.setAttribute("questMod", "interactable", "False") end
	--Volkare's Combat Level Menu Access
	if value=="Volkare's Return" or value=="Volkare's Quest" then
		UI.setAttribute("VolkareLevelSelection", "interactable", "True")
		UI.setAttribute("VolkareLevelSelection", "text", "Daring")
		gStates.volkareCombatLevel=1
	else
		UI.setAttribute("VolkareLevelSelection", "interactable", "False")
		UI.setAttribute("VolkareLevelSelection", "text", "Not Used")
	end
	--Volkare's Race Level Menu Access
	if value=="Volkare's Return" or value=="Volkare's Quest" then
		UI.setAttribute("VolkareRaceSelection", "interactable", "True")
		UI.setAttribute("VolkareRaceSelection", "text", "Fair")
		gStates.volkareRaceLevel=1
	else
		UI.setAttribute("VolkareRaceSelection", "interactable", "False")
		UI.setAttribute("VolkareRaceSelection", "text", "Not Used")
	end
	--Load and update advanced scenario tweaks.
	scenarioInfoUpdate()
end

function BlitzSelection(player, value, id)
	if value=="True" then
		UI.setAttribute("BlitzSelection", "isOn", "true")
		gStates.blitz=1
	else
		UI.setAttribute("BlitzSelection", "isOn", "false")
		gStates.blitz=0
	end
	for a=1, #scenarioList, 1 do
		if gStates.blitz==1 and gStates.gameScenario.." Blitz"==scenarioList[a][1] then gStates.gameScenario=gStates.gameScenario.." Blitz" break end
		if gStates.blitz==0 and gStates.gameScenario:sub(1, -7)==scenarioList[a][1] then gStates.gameScenario=gStates.gameScenario:sub(1, -7) break end
	end
	scenarioInfoUpdate()
	if scenarioList[gStates.scenarioRef].scenarioDetails.blitzPossible~="Yes" then
		if scenarioList[gStates.scenarioRef].scenarioDetails.blitzPossible=="On Only" then
			if gStates.blitz==0 then UI.setAttribute("BlitzSelection", "textColor", "rgb(1.0,0.0,0.0)") else UI.setAttribute("BlitzSelection", "textColor", "rgb(0.0,0.0,0.0)") end
		else
			if gStates.blitz==1 then UI.setAttribute("BlitzSelection", "textColor", "rgb(1.0,0.0,0.0)") else UI.setAttribute("BlitzSelection", "textColor", "rgb(0.0,0.0,0.0)") end
		end
	else
		UI.setAttribute("BlitzSelection", "textColor", "rgb(0.0,0.0,0.0)")
	end
	scenarioInfoUpdate()
	ToolTipUpdate(id)
end

function optionsUpdate(player, value, id)
	if value=="True" then
		UI.setAttribute(id, "isOn", "true")
		gStates[id]=true
		if id=="startAtNight" then UI.setAttribute("darknessComing", "text", "-:Daylight is Coming") end
	else
		UI.setAttribute(id, "isOn", "false")
		gStates[id]=false
		if id=="startAtNight" then UI.setAttribute("darknessComing", "text", "-:Darkness is Coming") end
	end
	ToolTipUpdate(id)
	scenarioInfoUpdate()
end

function RampageSelection(player, value, id)
	if value=="True" then
		gStates.rampage=1
		UI.setAttribute("MoreRampageSelection", "interactable", "False")
		UI.setAttribute("MoreRampageSelection", "isOn", "false")
		UI.setAttribute("RampageSelection", "interactable", "True")
		UI.setAttribute("RampageSelection", "isOn", "true")
	else
		gStates.rampage=0
		UI.setAttribute("MoreRampageSelection", "interactable", "True")
		UI.setAttribute("RampageSelection", "isOn", "false")
	end
	scenarioInfoUpdate()
	ToolTipUpdate(id)
end

function MoreRampageSelection(player, value, id)
	if value=="True" then
		gStates.rampage=2
		UI.setAttribute("RampageSelection", "interactable", "False")
		UI.setAttribute("RampageSelection", "isOn", "false")
		UI.setAttribute("MoreRampageSelection", "interactable", "True")
		UI.setAttribute("MoreRampageSelection", "isOn", "true")
	else
		gStates.rampage=0
		UI.setAttribute("RampageSelection", "interactable", "True")
		UI.setAttribute("MoreRampageSelection", "isOn", "false")
	end
	scenarioInfoUpdate()
	ToolTipUpdate(id)
end

function VolkareLevelSelection(player, value, id)
	if value=="Daring" then
		UI.setAttribute("VolkareLevelSelection", "text", "Daring")
		gStates.volkareCombatLevel=1
	end
	if value=="Heroic" then
		UI.setAttribute("VolkareLevelSelection", "text", "Heroic")
		gStates.volkareCombatLevel=2
	end
	if value=="Legendary" then
		UI.setAttribute("VolkareLevelSelection", "text", "Legendary")
		gStates.volkareCombatLevel=3
	end
	--adjust city levels of volkare scenarios
	local cityAdjust=	{{{{0}, {0}, {0}, {0}, {4}, {6}, {8}, {10}}, 	{{0}, {0}, {0}, {0}, {3}, {4}, {5}, {6}}, 	{{0}, {0}, {0}, {0}, {3, 3}, {4, 4}, {4, 4, 4}, {5, 5, 5}}}, --daring
						{{{0}, {0}, {0}, {0}, {6}, {9}, {12}, {16}}, 	{{0}, {0}, {0}, {0}, {4}, {6}, {8}, {10}}, 	{{0}, {0}, {0}, {0}, {4, 4}, {4, 4}, {5, 5, 5}, {5, 5, 5}}}, --Heroic
						{{{0}, {0}, {0}, {0}, {10}, {14}, {18}, {22}}, 	{{0}, {0}, {0}, {0}, {5}, {8}, {11}, {14}}, {{0}, {0}, {0}, {0}, {4, 4}, {5, 5}, {5, 5, 5}, {6, 6, 6}}}}--Legendary
						--Volkare's Return, 							Volkare's Return Blitz, 					Volkare's Quest.
	for a=5, 8, 1 do
		for b=1, #cityAdjust[gStates.volkareCombatLevel][gStates.scenarioRef-9][a], 1 do
			scenarioList[gStates.scenarioRef][a].cityLevels[b]=cityAdjust[gStates.volkareCombatLevel][gStates.scenarioRef-9][a][b]
		end
	end
	scenarioInfoUpdate()
	updateDropDowns()
	ToolTipUpdate(id)
end

function ToolTipUpdate(id)
	UI.show("toolTip")
	UI.setAttribute("toolTipTitle", "text", tooltip[id].title)
	UI.setAttribute("toolTipText", "text", tooltip[id].text)
	UI.setAttribute("toolTip", "height", tooltip[id].height)
end

function VolkareRaceSelection(player, value, id)
	if value=="Fair" then UI.setAttribute("VolkareRaceSelection", "text", "Fair") gStates.volkareRaceLevel=1 end
	if value=="Tight" then UI.setAttribute("VolkareRaceSelection", "text", "Tight") gStates.volkareRaceLevel=2 end
	if value=="Thrilling" then UI.setAttribute("VolkareRaceSelection", "text", "Thrilling") gStates.volkareRaceLevel=3 end
	scenarioInfoUpdate()
	updateDropDowns()
	ToolTipUpdate(id)
end

function PlayerChosen(player, value, id)
	UI.setAttribute(id, "text", value)
	--adjust number of players
	local MKDropDownUI={"firstMKSelection", "secondMKSelection", "thirdMKSelection", "fourthMKSelection", "dummyMKSelection"}
	if value=="nobody" then
		if id~="dummyMKSelection" and gStates.playerCount>0 then gStates.playerCount=gStates.playerCount-1 end
	else
		if id~="dummyMKSelection" then
			for i=1, 4, 1 do
				if id==MKDropDownUI[i] then
					if gStates.positionMageKnight[i]=="nobody" then	gStates.playerCount=gStates.playerCount+1 end
				end
			end
		end
	end
	--Record which color has which knight
	for i=1, 5, 1 do
		if id==MKDropDownUI[i] then
			gStates.positionMageKnight[i]=value
			--Locks player mage choice when scenario player cap reached
			if value~="nobody" and
			((id=="dummyMKSelection" and gStates.playerCount==1)
			or (id~="dummyMKSelection" and gStates.playerCount==1 and (gStates.positionMageKnight[5]~="nobody" or gStates.gameScenario=="First Conquest" or gStates.gameScenario=="Fast Forwarded Conquest" or gStates.gameScenario=="The Gauntlet" or gStates.gameScenario=="Quest for the Golden Grail"))
			or (id~="dummyMKSelection" and gStates.playerCount==2 and gStates.gameScenario=="Ladyhawke"))
			and (gStates.gameScenario=="First Reconnaissance" or gStates.gameScenario=="First Conquest" or gStates.gameScenario=="Fast Forwarded Conquest" or gStates.gameScenario=="Quest for the Golden Grail" or gStates.gameScenario=="The Gauntlet" or gStates.gameScenario=="Druid Nights" or gStates.gameScenario=="Dungeon Lords" or gStates.gameScenario=="Mines Liberation" or gStates.gameScenario=="Ladyhawke") then
				for a=1, 4, 1 do
					if gStates.positionMageKnight[a]=="nobody" then
						UI.setAttribute(MKDropDownUI[a], "interactable", "False")
						UI.setAttribute(MKDropDownUI[a], "text", "nobody")
					end
				end
			else
				for a=1, 4, 1 do UI.setAttribute(MKDropDownUI[a], "interactable", "True") end
			end
			--locks Dummy Mage choice for scenario setups that don't use him
			if (id~="dummyMKSelection" and ((gStates.playerCount>=2 and value~="nobody") or (gStates.playerCount>=2 and value=="nobody"))
			and (gStates.gameScenario=="First Reconnaissance" or gStates.gameScenario=="Quest for the Golden Grail" or gStates.gameScenario=="The Gauntlet" or gStates.gameScenario=="Druid Nights" or gStates.gameScenario=="Dungeon Lords" or gStates.gameScenario=="Mines Liberation"))
			or (gStates.gameScenario=="Conquer and Hold" or gStates.gameScenario=="One to Return" or gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" or gStates.gameScenario=="Volkare's Quest" or gStates.gameScenario=="Ladyhawke") then
				UI.setAttribute(MKDropDownUI[5], "interactable", "False")
			else
				UI.setAttribute(MKDropDownUI[5], "interactable", "True")
			end
		end
		ToolTipUpdate(value)
	end

	--Set Coop flag
	if gStates.positionMageKnight[5]=="nobody" then gStates.coop=0 UI.setAttribute("StartButtonText", "text", "Start - Competative") else gStates.coop=1 UI.setAttribute("StartButtonText", "text", "Start - Co-Operative") end
	if gStates.gameScenario=="Ladyhawke" then gStates.coop=1 UI.setAttribute("StartButtonText", "text", "Start - Co-Operative") end
	if gStates.playerCount==1 then UI.setAttribute("StartButtonText", "text", "Start - Solo") end

	--Only allow Start button if 2 or more knights are selected
	if gStates.playerCount>=2 or (gStates.playerCount>=1 and gStates.positionMageKnight[5]~="nobody") then
		UI.setAttribute("StartButton", "interactable", "True")
		UI.setAttribute("StartButtonImage", "image", "Button Active Long")
	else
		UI.setAttribute("StartButton", "interactable", "False")
		UI.setAttribute("StartButtonImage", "image", "Button Deactive Long")
		UI.setAttribute("StartButtonText", "text", "Start - Select Two Mage Knights First")
	end
	scenarioInfoUpdate()
	updateDropDowns()
end

function baseValueTweak(player, mouseButton, id)
	if mouseButton=="-1" then
		if gStates.gameScenario~="First Reconnaissance" then
			if id=="RoundsDown" or id=="RoundsUp" then
				if id=="RoundsDown" then
					if scenarioList[gStates.scenarioRef][gStates.playersRef].rounds>1 then
						scenarioList[gStates.scenarioRef][gStates.playersRef].rounds=scenarioList[gStates.scenarioRef][gStates.playersRef].rounds-1
					end
				else
					scenarioList[gStates.scenarioRef][gStates.playersRef].rounds=scenarioList[gStates.scenarioRef][gStates.playersRef].rounds+1
				end
				scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics=scenarioList[gStates.scenarioRef][gStates.playersRef].dTW
				if scenarioList[gStates.scenarioRef][gStates.playersRef].rounds>6 and scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics==2 then scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics=1 end
				if scenarioList[gStates.scenarioRef][gStates.playersRef].rounds>14-(2*(gStates.playerCount+gStates.coop)) and scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics==1 then scenarioList[gStates.scenarioRef][gStates.playersRef].discardTactics=0 end
			end

			if id=="MapDown" or id=="MapUp" then
				local mapShapes={"Wedge","Open Limited to 3 Columns","Open Limited to 4 Columns","Fully Open"}
				for a=1, #mapShapes, 1 do
					if scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape==mapShapes[a] then
						local b=nil
						if id=="MapDown" then
							b=a-1
							if b<1 then b=#mapShapes end
						else
							b=a+1
							if b>#mapShapes then b=1 end
						end
						scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape=mapShapes[b]
						if scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape~="Wedge" and scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles==2 then scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles=3 end
						break
					end
				end
			end

			if id=="CountryDown" or id=="CountryUp" then
				if id=="CountryDown" then
					countryMin=3
					if scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape=="Wedge" then countryMin=2 end
					if scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles>countryMin then
						scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles-1
					end
				else
					if scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles<14 then
						scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles+1
					end
				end
			end

			if id=="CoreDown" or id=="CoreUp" then
				if id=="CoreDown" then
					if scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles>0 then
						scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles-1
					end
				else
					local max=6
					--if gStates.gameScenario=="The Gauntlet" then max=4 end
					if scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles<max then
						scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles+1
					end
				end
			end

			if (id=="CityDown" or id=="CityUp") and gStates.gameScenario~="The Gauntlet" and gStates.gameScenario~="Ladyhawke" and gStates.gameScenario~="Volkare's Return" and gStates.gameScenario~="First Conquest" and gStates.gameScenario~="Conquer and Hold" then
				local cityTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles
				if id=="CityDown" then
					if cityTiles>1 then
						scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles=cityTiles-1
						table.remove(scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels)
						gStates.megapolis=0
					end
				else
					local max=5
					if gStates.gameScenario=="Volkare's Return" or gStates.gameScenario=="Volkare's Return Blitz" or gStates.gameScenario=="Volkare's Quest" then max=4 end
					if cityTiles<max then
						scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles=cityTiles+1
						if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]>11 then scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]=11 end
						table.insert(scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels, scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels])
						gStates.megapolis=0
					end
				end
			end
			if id=="MegapolisDown" or id=="MegapolisUp" then
				if id=="MegapolisDown" then
					if gStates.megapolis>0 then gStates.megapolis=gStates.megapolis-1 end
					if gStates.megapolis==0 and scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]>11 then scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels]=11 end
					if gStates.megapolis==1 and scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels-1]>11 then scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels-1]=11 end
				else
					if gStates.megapolis==1 and scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles==2 then gStates.megapolis=gStates.megapolis+1 end
					if gStates.megapolis<1 then gStates.megapolis=gStates.megapolis+1 end
				end
			end

			for a=1, 5, 1 do
				if id=="CityLevel"..a.."Down" or id=="CityLevel"..a.."Up" then
					if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]>0 then
						if id=="CityLevel"..a.."Down" then
							local min=1
							if gStates.megapolis==2 or (gStates.megapolis==1 and scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles==a) then min=2 end
							if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]>min then
								scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]-1
							else
								break
							end
						else
							local max=11
							if gStates.megapolis==2 or (gStates.megapolis==1 and scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles==a) then max=22 end
							if gStates.gameScenario=="Life and Death" or gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="The Hidden Valley Blitz" then max=12 end
							if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]<max then
								scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a]+1
							else
								break
							end
						end
						if gStates.gameScenario=="Life and Death" and (a==1 or a==2) then
							if a==1 then
								scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[2]=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[1]
							else
								scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[1]=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[2]
							end
						end
					end
				end
			end
		end
		scenarioInfoUpdate()
	end
end

function scenarioInfoUpdate()
	--convert player count to a reference
	gStates.playersRef=gStates.playerCount
	if gStates.coop==0 and gStates.playersRef<=1 then gStates.playersRef=2 end
	if gStates.coop==1 then gStates.playersRef=gStates.playersRef + 4 if gStates.playersRef==4 then gStates.playersRef=5 end end
	if gStates.gameScenario=="The Gauntlet" or gStates.gameScenario=="Quest for the Golden Grail" or gStates.gameScenario=="First Conquest" then gStates.playersRef=5 end
	if gStates.gameScenario=="Quest for the Golden Grail" then gStates.playersRef=5 end
	if gStates.gameScenario=="Ladyhawke" then gStates.playersRef=6 end
	--Convert Scenario to a reference then read the round count
	for i=1, #scenarioList, 1 do
		if gStates.gameScenario==scenarioList[i][1] then gStates.scenarioRef=i break end
	end
	--Update Scenario Infos
	UI.setAttribute("ScenarioDetails", "Active", "True")
	UI.setAttribute("IntroBoard", "Active", "False")
	UI.setAttribute("ScenarioName", "text", "3. "..gStates.gameScenario)
	UI.setAttribute("PlayerCount", "text", "<b>Players - </b>"..scenarioList[gStates.scenarioRef].scenarioDetails.playerDetails)
	UI.setAttribute("ScenarioLength", "text", "<b>Length - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].rounds.." Rounds")
	UI.setAttribute("ScenarioPurpose", "text", "<b>Purpose - </b>"..scenarioList[gStates.scenarioRef].scenarioDetails.scenarioPurpose)
	UI.setAttribute("ScenarioShape", "text", "<b>Map Shape - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape)
	--Display the amount of country tiles and any rules
	if scenarioList[gStates.scenarioRef].scenarioDetails.countryRules~=nil then
		if scenarioList[gStates.scenarioRef].scenarioDetails.countryRules[1]==nil then
			UI.setAttribute("ScenarioCountry", "text", "<b>Country Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles.." "..scenarioList[gStates.scenarioRef].scenarioDetails.countryRules)
		else
			UI.setAttribute("ScenarioCountry", "text", "<b>Country Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles.." "..scenarioList[gStates.scenarioRef].scenarioDetails.countryRules[gStates.playersRef])
		end
	else
		UI.setAttribute("ScenarioCountry", "text", "<b>Country Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles)
	end
	--Display the amount of core tiles and any rules
	if scenarioList[gStates.scenarioRef].scenarioDetails.coreRules~=nil then
		UI.setAttribute("ScenarioCore", "text", "<b>Core Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles.." "..scenarioList[gStates.scenarioRef].scenarioDetails.coreRules)
	else
		UI.setAttribute("ScenarioCore", "text", "<b>Core Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles)
	end
	--Display the amount of city tiles and any rules
	if scenarioList[gStates.scenarioRef].scenarioDetails.cityRules~=nil then
		UI.setAttribute("ScenarioCity", "text", "<b>City Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles.." "..scenarioList[gStates.scenarioRef].scenarioDetails.cityRules)
	else
		UI.setAttribute("ScenarioCity", "text", "<b>City Tiles - </b>"..scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles)
	end
	--Display's City Levels and activates megapolis with the right settings.
	if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[1]>0 then
		--if scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[1]>11 then gStates.megapolis=1 end
		UI.setAttribute("CityNote", "active", "false")
		UI.setAttribute("CityLevelschange", "active", "false")
		local b="<b>City Level(s) - </b>"
		local layout="30"
		if #scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels>3 or scenarioList[gStates.scenarioRef].scenarioDetails.megapolisPossible==false then layout="0" end
		for a=1, 5, 1 do
			if a<=#scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels then
				UI.setAttribute("CL"..a, "active", "true")
				layout=layout.." 0"
				if #scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels<=3 then
					if (gStates.megapolis==1 and a==scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles) or (gStates.megapolis==2) then
						UI.setAttribute("ScenarioCity"..a.."Level", "text", "Megapolis, Lvl "..scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a])
					else
						if (a==1 and (gStates.gameScenario=="Life and Death" or gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="The Hidden Valley Blitz")) or (a==2 and gStates.gameScenario=="Life and Death") then
							UI.setAttribute("ScenarioCity"..a.."Level", "text", "Leader, Level "..scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a])
						else
							UI.setAttribute("ScenarioCity"..a.."Level", "text", "City, Level "..scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a])
						end
					end
					if scenarioList[gStates.scenarioRef].scenarioDetails.megapolisPossible==true then
						UI.setAttribute("MegapolisLeft", "active", "true")
						UI.setAttribute("MegapolisRight", "active", "true")
					else
						UI.setAttribute("MegapolisLeft", "active", "false")
						UI.setAttribute("MegapolisRight", "active", "false")
					end
				else
					UI.setAttribute("ScenarioCity"..a.."Level", "text", "City, "..scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels[a])
					UI.setAttribute("MegapolisLeft", "active", "false")
					UI.setAttribute("MegapolisRight", "active", "false")
				end
			else
				UI.setAttribute("CL"..a, "active", "false")
			end
		end
		if #scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels<=3 then layout=layout.." 30" end
		UI.setAttribute("CityLevelschange", "columnWidths", layout)
		UI.setAttribute("CityLevelschange", "active", "true")
	else
		UI.setAttribute("CityLevelschange", "active", "false")
		UI.setAttribute("CityNote", "active", "true")
		local b="<b>Cities are "
		local c="Friendly, Every player puts a shield token on the city card.</b>"
		if gStates.gameScenario=="First Reconnaissance" then c="meant to be discovered only.</b>" end
		if gStates.gameScenario=="Conquer and Hold" then c="Barred, No players may enter.</b>" end
		if gStates.gameScenario=="The Lost Relic Blitz" then c="Ruined, find only dragons there.</b>" end
		b=b..c
		UI.setAttribute("CityNote", "text", b)
	end
	--Volkare's Camp as City Menu Access
	if #scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels==5 then
		UI.setAttribute("volkareCampAsCity", "interactable", "False")
		UI.setAttribute("volkareCampAsCity", "isOn", "true")
		gStates.volkareCampAsCity=true
	else
		--UI.setAttribute("volkareCampAsCity", "interactable", "True")
		if gStates.megapolis==0 and
			gStates.gameScenario~="Volkare's Return" and
			gStates.gameScenario~="Volkare's Return Blitz" and
			gStates.gameScenario~="Volkare's Quest" and
			gStates.gameScenario~="Conquer and Hold" and
			gStates.gameScenario~="First Reconnaissance" and
			gStates.gameScenario~="The Gauntlet" then
			UI.setAttribute("volkareCampAsCity", "interactable", "True")
		else
			UI.setAttribute("volkareCampAsCity", "interactable", "False")
			UI.setAttribute("volkareCampAsCity", "isOn", "false")
			gStates.volkareCampAsCity=false
		end
	end
	--Display the Scenario End rules
	UI.setAttribute("ScenarioEnd", "text", "<b>Scenario End - </b>"..scenarioList[gStates.scenarioRef].scenarioDetails.scenarioEnd)
end

function DisplayScore(player, mouseButton, id)
	if mouseButton=="-1" then
		local visibility=""
		if player~="all" then
			scoreViewing[#scoreViewing+1]=player.color
			local visibility=""
			for a=1, #scoreViewing, 1 do
				visibility=visibility..scoreViewing[a]
				if a<#scoreViewing then visibility=visibility.."|" end
			end
		end
		UI.setAttribute("ScoreBoard", "visibility", visibility)
		--Count all objects required for soring
		local seatRecord=5
		for a=1, #turnOrder, 1 do
			if turnOrder[a].mage==gStates.positionMageKnight[5] then
				seatRecord=turnOrder[a].seatPos
				turnOrder[a].seatPos=5
				break
			end
		end
		table.sort(turnOrder, function (k1, k2) return k1.seatPos<k2.seatPos end)
		for a=1, #turnOrder, 1 do
			if turnOrder[a].mage==gStates.positionMageKnight[5] then
				turnOrder[a].seatPos=seatRecord
				break
			end
		end
		local foundRelic=0--Not individually scored
		local coopGraveYard=0
		local objectsInPlay=getObjectFromGUID(mapArea).getObjects()
		table.sort(objectsInPlay, function (k1, k2) return k1.getPosition()[2]>k2.getPosition()[2] end)
		for a=1, #turnOrder, 1 do
			if turnOrder[a].mage~=gStates.positionMageKnight[5] then
				local obj={}
				for b, c in pairs(objectsInPlay) do obj[#obj+1]=c end
				--Look for Cards
				for b, c in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do obj[#obj+1]=c end
				for b, c in pairs(getObjectFromGUID(deedDeckDiscardZones[turnOrder[a].seatPos]).getObjects()) do obj[#obj+1]=c end
				for b, c in pairs(getObjectFromGUID(handZones[turnOrder[a].seatPos]).getObjects()) do obj[#obj+1]=c end
				for b, c in pairs(getObjectFromGUID(playerPlayAreas[turnOrder[a].seatPos]).getObjects()) do obj[#obj+1]=c end
				--look for Crystals and reward tokens
				for b, c in pairs(getObjectFromGUID(playerCrystalAreas[turnOrder[a].seatPos]).getObjects()) do obj[#obj+1]=c end
				--look for Units
				local playerUnits=getObjectFromGUID(playerUnitAreas[turnOrder[a].seatPos]).getObjects()
				for b, c in pairs(playerUnits) do obj[#obj+1]=c end
				--Zero out any existing scores
				local scoreVariable={"AdvanceAction", "Spell", "Artifact", "Wound", "Crystal", "Units", "UnitsLevel", "WoundedUnits", "WoundedUnitsLevel", "Keep", "Reward", "GraveYard", "Glade"
									, "MageTower", "Monastery", "VolkareCamp", "DungeonTomb", "SpawningDen", "Ruin", "Maze", "Relic", "CountryMine", "CoreMine"}
				for b, c in pairs(scoreVariable) do
					turnOrder[a].score[c]=0
				end
				--count found objects
				for b, c in pairs(obj) do
					--Count Card Types
					if c.tag=="Card" then
						if c.getName()=="Advanced Action" then turnOrder[a].score.AdvanceAction=turnOrder[a].score.AdvanceAction+1 end
						if c.getName()=="Spell" then turnOrder[a].score.Spell=turnOrder[a].score.Spell+1 end
						if c.getName()=="Artifact" then turnOrder[a].score.Artifact=turnOrder[a].score.Artifact+1 end
						if c.getName()=="Wound" then turnOrder[a].score.Wound=turnOrder[a].score.Wound+1 end
						if c.getName()=="Regular Unit" or c.getName()=="Elite Unit" then
							--look for wound
							local found=false
							local unitLocation=c.getPosition()[1]
							for e, woundToken in pairs(playerUnits) do
								if woundToken.getName()=="Unit Wound" then
									local woundLocation=woundToken.getPosition()[1]
									if woundLocation<=unitLocation+1.7 and woundLocation>=unitLocation-1.7 then
										turnOrder[a].score.WoundedUnits=turnOrder[a].score.WoundedUnits+1
										turnOrder[a].score.WoundedUnitsLevel=turnOrder[a].score.WoundedUnitsLevel+math.floor(gameCards[c.guid].level/2)
										found=true
										break
									end
								end
							end
							if found==false then
								turnOrder[a].score.Units=turnOrder[a].score.Units+1
								turnOrder[a].score.UnitsLevel=turnOrder[a].score.UnitsLevel+gameCards[c.guid].level
							end
						end
				 	end
					if c.tag=="Deck" then
						local temp=c.getObjects()
						for d, e in pairs(temp) do
							if e.nickname=="Advanced Action" then turnOrder[a].score.AdvanceAction=turnOrder[a].score.AdvanceAction+1 end
							if e.nickname=="Spell" then turnOrder[a].score.Spell=turnOrder[a].score.Spell+1 end
							if e.nickname=="Artifact" then turnOrder[a].score.Artifact=turnOrder[a].score.Artifact+1 end
							if e.nickname=="Wound" then turnOrder[a].score.Wound=turnOrder[a].score.Wound+1 end
						end
					end
					--count Crystals
					if c.tag=="Figurine" then
						if c.getPosition()[1]<turnOrder[a].seatPos*40-109.76 and c.getPosition()[3]<-31 then turnOrder[a].score.Crystal=turnOrder[a].score.Crystal+1 end
					end
					--count Faction Rewards
					if c.tag=="Tile" and monsterPugs[c.guid]==nil then
						if c.getPosition()[1]<turnOrder[a].seatPos*40-109.76 and c.getPosition()[3]<-31 then turnOrder[a].score.Reward=turnOrder[a].score.Reward+1 end
					end
					--Count Shield tokens
					if c.getName()=="Shield" and c.getDescription()==turnOrder[a].mage then
						local found=false
						local shieldPos=c.getPosition()
						for e, terTile in pairs(objectsInPlay) do
							local tilePos=terTile.getPosition()
							local shieldToTileDist=math.sqrt(((shieldPos[1]-tilePos[1])^2)+((shieldPos[3]-tilePos[3])^2))
							--Figure out which hex it is on
							if terrainTiles[terTile.guid]~=nil then
								if shieldToTileDist<3.1 then
									found=true
									if terTile.guid==gStates.cityVolkareTile then turnOrder[a].score.VolkareCamp=turnOrder[a].score.VolkareCamp+1 end
									local bearing="center"
									if shieldToTileDist>1 then
										bearing=(60*(math.floor((math.deg(math.atan2(shieldPos[3]-tilePos[3], shieldPos[1]-tilePos[1]))+terTile.getRotation()[2]+30)/60)))
										if bearing>=360 then bearing=bearing-360 end
										if bearing<0 then bearing=bearing+360 end
									end
									for hexLocation, hexFeature in pairs(terrainTiles[terTile.guid].hexFeature) do
										if hexLocation==tostring(bearing) or (bearing=="center" and hexFeature:sub(1, 4)=="city") then
											if hexFeature=="keep" then turnOrder[a].score.Keep=turnOrder[a].score.Keep+1 end
											if hexFeature=="mage tower" then turnOrder[a].score.MageTower=turnOrder[a].score.MageTower+1 end
											if hexFeature=="monastery" then turnOrder[a].score.Monastery=turnOrder[a].score.Monastery+1 end
											if hexFeature=="ruin" then turnOrder[a].score.Ruin=turnOrder[a].score.Ruin+1 end
											if hexFeature=="glade" then turnOrder[a].score.Glade=turnOrder[a].score.Glade+1 end
											if hexFeature=="dungeon" or hexFeature=="tomb" then turnOrder[a].score.DungeonTomb=turnOrder[a].score.DungeonTomb+1 end
											if hexFeature=="monster den" or hexFeature=="spawning grounds" then turnOrder[a].score.SpawningDen=turnOrder[a].score.SpawningDen+1 end
											if hexFeature=="maze" or hexFeature=="labyrinth"then turnOrder[a].score.Maze=turnOrder[a].score.Maze+1 end
											if hexFeature:sub(1,4)=="city" and gStates.gameScenario=="The Lost Relic Blitz" then turnOrder[a].score.Relic=turnOrder[a].score.Relic+1 foundRelic=foundRelic+1 end
											if hexFeature:sub(1,4)=="mine" and gStates.gameScenario=="Mines Liberation" then
												if terrainTiles[terTile.guid].tileType=="core" then
													turnOrder[a].score.CoreMine=turnOrder[a].score.CoreMine+1
												else
													turnOrder[a].score.CountryMine=turnOrder[a].score.CountryMine+1
												end
											end
											break
										end
									end
								end
							end
							if shieldToTileDist<1 then
								--dungeons for Dungeon Lords
								if terTile.getRotationValues()[2]~=nil and gStates.gameScenario=="Dungeon Lords" then
									if terTile.getRotationValues()[2].value=="Dungeon Monster" or terTile.getRotationValues()[2].value=="Draconum" then
										turnOrder[a].score.DungeonTomb=turnOrder[a].score.DungeonTomb+1
										found=true
									end
								end
								--GraveYards
								if terTile.getName()=="GraveYard" then
									turnOrder[a].score.GraveYard=turnOrder[a].score.GraveYard+1
									coopGraveYard=coopGraveYard+1
									found=true
								end
							end
							if found==true then break end
						end
					end
				end
			else
				--count the amount of cards left in the dummy or Volkare's deck
				turnOrder[a].score.CardsLeft=0
				for b, c in pairs(getObjectFromGUID(deedDeckZones[turnOrder[a].seatPos]).getObjects()) do
					if c.tag=="Card" then turnOrder[a].score.CardsLeft=1 break end
					if c.tag=="Deck" then turnOrder[a].score.CardsLeft=c.getQuantity() break end
				end
			end
		end
		--Figure out who leads and assisted in cities
		cityBeatCheck()
		--find the greatest in a category for competative games
		local coopScore=0
		local coopKey={}
		local scoreMax=0
		local scoreMin=999
		local key={}
		--Lowest fame
		if gStates.coop==1 then
			for a=1, #turnOrder, 1 do
				local currentLowScore=999
				if turnOrder[a].mage~=gStates.positionMageKnight[5] then currentLowScore=turnOrder[a].fame+turnOrder[a].score.Reward end
				if currentLowScore==scoreMin then key[#key+1]=a end
				if currentLowScore<scoreMin then scoreMin=currentLowScore key={a} end
			end
			coopScore=coopScore+turnOrder[key[1]].fame+turnOrder[key[1]].score.Reward coopKey.lFame=key[1]
		end
		--Find Greatest in all the categories
		local greatestTable={gKnowledge=	{function(z) return turnOrder[z].score.AdvanceAction+(turnOrder[z].score.Spell*2) end},
							 gLoot=			{function(z) return (turnOrder[z].score.Artifact*2)+math.floor(turnOrder[z].score.Crystal/2) end},
							 gLeader=		{function(z) return turnOrder[z].score.UnitsLevel+turnOrder[z].score.WoundedUnitsLevel end},
							 gAdventurer=	{function(z) return (turnOrder[z].score.DungeonTomb+turnOrder[z].score.SpawningDen+turnOrder[z].score.Ruin+turnOrder[z].score.Maze)*2 end,
											 function(z) return (turnOrder[z].score.DungeonTomb*4)+(turnOrder[z].score.SpawningDen+turnOrder[z].score.Ruin+turnOrder[z].score.Maze)*2 end},
							 gConqueror=	{function(z) return ((turnOrder[z].score.Keep+turnOrder[z].score.MageTower+turnOrder[z].score.Monastery)*2)+turnOrder[z].score.VolkareCamp end},
							 gLiberator=	{function(z) return (turnOrder[z].score.CoreMine*7)+(turnOrder[z].score.CountryMine*4) end,
							 				function(z) return (turnOrder[z].score.CoreMine*7)+(turnOrder[z].score.CountryMine*4) end},
							 gBeating=		{function(z) return turnOrder[z].score.Wound*2 end},
							 gCityLead=		{function(z) return turnOrder[z].score.CityLead*7 end, function(z) return turnOrder[z].score.CityLead*7 end},
							 gRelic=		{function(z) return turnOrder[z].score.Relic*5 end, nil ,
						 					 function(z) return turnOrder[z].score.Relic*4 end}}
		local greatestBonus={{3, 1}, {5, 2}, {4, 2}}
		for greatName, scoreMath in pairs(greatestTable) do
			local ref=1
			if gStates.gameScenario=="Mines Liberation" and greatName=="gLiberator" then ref=2 end
			if gStates.gameScenario=="Dungeon Lords" and greatName=="gAdventurer" then ref=2 end
			if (gStates.gameScenario=="Conquest" or gStates.gameScenario=="Conquest Blitz" or gStates.gameScenario=="Mega Conquest" or gStates.gameScenario=="Fast Forwarded Conquest") and greatName=="gCityLead" then ref=2 end
			if gStates.gameScenario=="The Lost Relic Blitz" and gStates.coop==0 and greatName=="gRelic" then ref=3 end
			scoreMax=0
			key={}
			for player=1, #turnOrder, 1 do
				turnOrder[player].score[greatName]=0
				local currentHighScore=-1
				if turnOrder[player].mage~=gStates.positionMageKnight[5] then currentHighScore=scoreMath[ref](player) end
				if currentHighScore==scoreMax then key[#key+1]=player end
				if currentHighScore>scoreMax then scoreMax=currentHighScore key={player} end
			end
			if #key==1 and scoreMax~=0 and gStates.coop==0 then turnOrder[key[1]].score[greatName]=greatestBonus[ref][1] end
			if #key>1 and scoreMax~=0 and gStates.coop==0 then for a=1, #key, 1 do turnOrder[key[a]].score[greatName]=greatestBonus[ref][2] end end
			if gStates.coop==1 and greatName~="gBeating" then coopScore=coopScore+scoreMath[ref](key[1]) coopKey[greatName]=key[1] end
			if gStates.coop==1 and greatName=="gBeating" then coopScore=coopScore-scoreMath[ref](key[1]) coopKey[greatName]=key[1] end
		end

		--Update Score Card
		local scoreCardSections={	"KnowledgeScoreHeading",	"KnowledgeScoreData",
									"LootScoreHeading",			"LootScoreData",
									"LeaderScoreHeading",		"LeaderScoreData",
									"ConquerorScoreHeading",	"ConquerorScoreData",
									"AdventurerScoreHeading",	"AdventurerScoreData",
									"LiberatorScoreHeading",	"LiberatorScoreData",
									"BeatingScoreHeading",		"BeatingScoreData",
									"RelicScoreHeading",		"RelicScoreData",
									"RewardScoreHeading",		"RewardScoreData",
									"CityScoreHeading",			"CityScoreData",
									"VolkareScoreHeading",		"VolkareScoreData",
									"TezlaScoreHeading",		"TezlaScoreData",
									"EfficiencyScoreHeading",	"EfficiencyScoreData"}
		for a, b in pairs(scoreCardSections) do
			UI.setAttribute(b, "active", "false")
		end
		local pannel=1
		local totalHeight=54+25+30+25
		local assembledText=""
		local lineFeed=0
		local heights={Knowledge=0, Loot=0, Leader=0, Conqueror=0, Adventurer=0, Liberator=0, Beating=0, Volkare=0, Efficiency=0, City=0, Relic=0, Tezla=0, Reward=0}

		--Display and add up score pannel heights
		function updateScorePannel(scoreName, lineFeed, assembledText)
			local pannelText=pannel
			local textCol="rgb(0, 0, 0)"
			if coopKey["g"..scoreName]~=pannel and coopKey["g"..scoreName]~=nil and gStates.coop==1 and scoreName~="Relic" then textCol="rgb(0.4, 0.4, 0.4)" end
			if scoreName=="City" and gStates.gameScenario=="The Gauntlet" then textCol="rgb(0.4, 0.0, 0.0)" end
			if scoreName=="Volkare" or scoreName=="Efficiency" then pannelText="" end
			UI.setAttribute(scoreName..pannelText.."ScoreText", "text", "")
			UI.setAttribute(scoreName..pannelText.."ScoreCell", "active", "true")
			local scoreHieght=0
			if lineFeed>0 then scoreHieght=(lineFeed*25)-((lineFeed-1)*8) end
			if scoreHieght>heights[scoreName] then
				if lineFeed>0 then totalHeight=totalHeight+scoreHieght-heights[scoreName] end
				heights[scoreName]=scoreHieght
				UI.setAttribute(scoreName.."ScoreData", "preferredHeight", heights[scoreName])
			end
			if lineFeed>0 then
				UI.setAttribute(scoreName.."ScoreHeading", "active", "true")
				UI.setAttribute(scoreName.."ScoreData", "active", "true")
				UI.setAttribute(scoreName..pannelText.."ScoreText", "Color", textCol)
				UI.setAttribute(scoreName..pannelText.."ScoreText", "text", assembledText)
			end
		end

		--Work out which scores to display
		for a=1, #turnOrder, 1 do
			local totalScore=0
			if turnOrder[a].mage~=gStates.positionMageKnight[5] then
				if gStates.gameScenario~="Conquer and Hold" and gStates.gameScenario~="One to Return" then
					--Base Score
					local textCol="rgb(0, 0, 0)"
					if coopKey.lFame~=a and gStates.coop==1 then textCol="rgb(0.4, 0.4, 0.4)" end
					UI.setAttribute("Mage"..pannel.."BaseScoreText", "Color", textCol)
					UI.setAttribute("Mage"..pannel.."BaseScoreCell", "active", "true")
					UI.setAttribute("Mage"..pannel.."BaseScoreText", "text", turnOrder[a].mage.."'s Base Fame: "..turnOrder[a].fame)
					totalScore=turnOrder[a].fame

					--Knowledge Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.AdvanceAction>0 then
						assembledText=turnOrder[a].score.AdvanceAction.." Advanced Action(s): +"..turnOrder[a].score.AdvanceAction
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.AdvanceAction
					end
					if turnOrder[a].score.Spell>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.Spell.." Spell(s): +"..(turnOrder[a].score.Spell*2)
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.Spell*2)
					end
					if turnOrder[a].score.gKnowledge>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Greatest Knowledge: +"..turnOrder[a].score.gKnowledge
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.gKnowledge
					end
					updateScorePannel("Knowledge", lineFeed, assembledText)

					--Loot Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.Artifact>0 then
						assembledText=turnOrder[a].score.Artifact.." Artifact(s): +"..(turnOrder[a].score.Artifact*2)
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.Artifact*2)
					end
					if turnOrder[a].score.Crystal>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.Crystal.." Mana Crystal(s): +"..math.floor(turnOrder[a].score.Crystal/2)
						lineFeed=lineFeed+1
						totalScore=totalScore+math.floor(turnOrder[a].score.Crystal/2)
					end
					if turnOrder[a].score.gLoot>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Greatest Loot: +"..turnOrder[a].score.gLoot
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.gLoot
					end
					updateScorePannel("Loot", lineFeed, assembledText)

					--Leader Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.Units>0 then
						assembledText=turnOrder[a].score.Units.." Healthy Unit(s): +"..turnOrder[a].score.UnitsLevel
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.UnitsLevel
					end
					if turnOrder[a].score.WoundedUnits>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.WoundedUnits.." Wounded Unit(s): +"..turnOrder[a].score.WoundedUnitsLevel
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.WoundedUnitsLevel
					end
					if turnOrder[a].score.gLeader>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Greatest Leader: +"..turnOrder[a].score.gLeader
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.gLeader
					end
					updateScorePannel("Leader", lineFeed, assembledText)

					--Adventurer Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.Ruin>0 then
						assembledText=turnOrder[a].score.Ruin.." Ruin(s): +"..turnOrder[a].score.Ruin*2
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.Ruin*2)
					end
					if turnOrder[a].score.DungeonTomb>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						local b=turnOrder[a].score.DungeonTomb*2
						if gStates.gameScenario=="Dungeon Lords" then
							b=turnOrder[a].score.DungeonTomb*4
						end
						assembledText=assembledText..turnOrder[a].score.DungeonTomb.." Dungeon or Tomb(s): +"..b
						lineFeed=lineFeed+1
						totalScore=totalScore+b
					end
					if turnOrder[a].score.SpawningDen>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.SpawningDen.." Den or Spawn Grnd(s): +"..turnOrder[a].score.SpawningDen*2
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.SpawningDen*2)
					end
					if turnOrder[a].score.Maze>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.Maze.." Maze or Labyrinth(s): +"..turnOrder[a].score.Maze*2
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.Maze*2)
					end
					if turnOrder[a].score.gAdventurer>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						local b="Greatest Adventurer: +"
						if gStates.gameScenario=="Dungeon Lords" then
							b="Great Dungeon Crawler: +"
						end
						assembledText=assembledText..b..turnOrder[a].score.gAdventurer
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.gAdventurer
					end
					updateScorePannel("Adventurer", lineFeed, assembledText)

					--Liberator Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.CountryMine>0 then
						assembledText=turnOrder[a].score.CountryMine.." Country Mine(s): +"..(turnOrder[a].score.CountryMine*4)
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.CountryMine*4)
					end
					if turnOrder[a].score.CoreMine>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.CoreMine.." Core Mine(s): +"..(turnOrder[a].score.CoreMine*7)
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.CoreMine*7)
					end
					if turnOrder[a].score.gLiberator>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Greatest Liberator: +"..turnOrder[a].score.gLiberator
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.gLiberator
					end
					updateScorePannel("Liberator", lineFeed, assembledText)

					--Relic Score
					if gStates.coop==0 then
						assembledText="" lineFeed=0
						if turnOrder[a].score.Relic>0 then
							assembledText=turnOrder[a].score.Relic.." Relic(s) Found: +"..(turnOrder[a].score.Relic*4)
							lineFeed=lineFeed+1
							totalScore=totalScore+(turnOrder[a].score.Relic*4)
						end
						if turnOrder[a].score.gRelic>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Greatest Relic Hunter: +"..turnOrder[a].score.gRelic
							lineFeed=lineFeed+1
							totalScore=totalScore+turnOrder[a].score.gRelic
						end
						updateScorePannel("Relic", lineFeed, assembledText)
					end

					--Reward Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.Reward>0 then
						assembledText=turnOrder[a].score.Reward.." Faction Reward(s): +"..turnOrder[a].score.Reward
						lineFeed=lineFeed+1
						totalScore=totalScore+turnOrder[a].score.Reward
					end
					updateScorePannel("Reward", lineFeed, assembledText)
					local textCol="rgb(0, 0, 0)"
					if coopKey.lFame~=a and gStates.coop==1 then textCol="rgb(0.4, 0.4, 0.4)" end
					UI.setAttribute("Reward"..pannel.."ScoreText", "Color", textCol)

					--Beating Score
					assembledText="" lineFeed=0
					if turnOrder[a].score.Wound>0 then
						assembledText=turnOrder[a].score.Wound.." Wound(s): -"..(turnOrder[a].score.Wound*2)
						lineFeed=lineFeed+1
						totalScore=totalScore-(turnOrder[a].score.Wound*2)
					end
					if turnOrder[a].score.gBeating>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Greatest Beating: -"..turnOrder[a].score.gBeating
						lineFeed=lineFeed+1
						totalScore=totalScore-turnOrder[a].score.gBeating
					end
					updateScorePannel("Beating", lineFeed, assembledText)

					if gStates.coop==0 then
						--Cities Competative
						assembledText="" lineFeed=0
						if turnOrder[a].score.CityLead>0 then
							assembledText=turnOrder[a].score.CityLead.." Conquered City(s): +"..(turnOrder[a].score.CityLead*7)
							lineFeed=lineFeed+1
							totalScore=totalScore+(turnOrder[a].score.CityLead*7)
						end
						if turnOrder[a].score.CityAssist>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText..turnOrder[a].score.CityAssist.." Assisted City(s): +"..(turnOrder[a].score.CityAssist*4)
							lineFeed=lineFeed+1
							totalScore=totalScore+(turnOrder[a].score.CityAssist*4)
						end
						if turnOrder[a].score.gCityLead>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Greatest City Leader +"..turnOrder[a].score.gCityLead
							lineFeed=lineFeed+1
							totalScore=totalScore+turnOrder[a].score.gCityLead
						end
						updateScorePannel("City", lineFeed, assembledText)

						--Tezla Faction Leaders
						assembledText="" lineFeed=0
						if (gStates.gameScenario=="Life and Death" or gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="The Hidden Valley Blitz" or gStates.gameScenario=="Mega Conquest") and turnOrder[a].score.DarkFactionLead>0 then
							assembledText="Dark Crusader Enemy: +5"
							lineFeed=lineFeed+1
							totalScore=totalScore+5
						end
						if (gStates.gameScenario=="Life and Death" or gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="The Hidden Valley Blitz" or gStates.gameScenario=="Mega Conquest") and turnOrder[a].score.ElemFactionLead>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Elementalist Enemy: +5"
							lineFeed=lineFeed+1
							totalScore=totalScore+5
						end
						updateScorePannel("Tezla", lineFeed, assembledText)
					end
				end

				--Conqueror Score
				if gStates.gameScenario~="One to Return" then
					assembledText="" lineFeed=0
					if turnOrder[a].score.Keep>0 then
						local b=2
						if gStates.gameScenario=="Conquer and Hold" then b=3 end
						assembledText=turnOrder[a].score.Keep.." Keep(s): +"..turnOrder[a].score.Keep*b
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.Keep*2)
						if gStates.gameScenario=="Conquer and Hold" then totalScore=turnOrder[a].score.Keep*3 end
					end
					if turnOrder[a].score.MageTower>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..turnOrder[a].score.MageTower.." Mage Tower(s): +"..turnOrder[a].score.MageTower*2
						lineFeed=lineFeed+1
						totalScore=totalScore+(turnOrder[a].score.MageTower*2)
					end
					if gStates.gameScenario~="Conquer and Hold" then
						if turnOrder[a].score.Monastery>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText..turnOrder[a].score.Monastery.." Monastery(s): +"..turnOrder[a].score.Monastery*2
							lineFeed=lineFeed+1
							totalScore=totalScore+(turnOrder[a].score.Monastery*2)
						end
						if turnOrder[a].score.VolkareCamp>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText..turnOrder[a].score.VolkareCamp.." Volkare Pursuits: +"..turnOrder[a].score.VolkareCamp
							lineFeed=lineFeed+1
							totalScore=totalScore+turnOrder[a].score.VolkareCamp
						end
						if turnOrder[a].score.gConqueror>0 then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Greatest Conqueror: +"..turnOrder[a].score.gConqueror
							lineFeed=lineFeed+1
							totalScore=totalScore+turnOrder[a].score.gConqueror
						end
					end
					updateScorePannel("Conqueror", lineFeed, assembledText)
				end

				--Total Score
				if gStates.coop==0 then
					UI.setAttribute("CompScoreData", "active", "true")
					UI.setAttribute("Total"..pannel.."ScoreCell", "active", "true")
					UI.setAttribute("Total"..pannel.."ScoreText", "text", turnOrder[a].mage.."'s Final Fame: "..totalScore)
					if gStates.gameScenario=="Conquer and Hold" then UI.setAttribute("Total"..pannel.."ScoreText", "text", turnOrder[a].mage.."'s Final VP: "..totalScore) end
				end
				pannel=pannel+1
			else
				assembledText="" lineFeed=0
				if gStates.positionMageKnight[5]~="Volkare" then
					--Efficiency
					if gStates.currentRound<gStates.rounds and gStates.gameScenario~="The Lost Relic Blitz" then
						local c=30
						if gStates.gameScenario=="The Gauntlet" then c=40 end
						assembledText=gStates.rounds-gStates.currentRound.." Round(s) still to go: +"..((gStates.rounds-gStates.currentRound)*c)
						lineFeed=lineFeed+1
						coopScore=coopScore+((gStates.rounds-gStates.currentRound)*c)
					end
					if turnOrder[a].score.CardsLeft>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						local c=1
						if gStates.gameScenario=="The Gauntlet" then c=2 end
						assembledText=assembledText..turnOrder[a].score.CardsLeft.." Dummy Card(s) Left: +"..turnOrder[a].score.CardsLeft*c
						lineFeed=lineFeed+1
						coopScore=coopScore+turnOrder[a].score.CardsLeft*c
					end
					if gStates.endRoundCalled==false then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Round End Not Called: +5"
						lineFeed=lineFeed+1
						coopScore=coopScore+5
					end
					updateScorePannel("Efficiency", lineFeed, assembledText)
				else
					--Volkare
					local volkareCombatLevel={"Daring", "Heroic", "Legendary"}
					local volkareRaceLevel={"Fair", "Tight", "Thrilling"}
					assembledText=volkareCombatLevel[gStates.volkareCombatLevel].." Volkare Combat Level: +(("..(gStates.volkareCombatLevel*10)+20
					lineFeed=lineFeed+1
					if lineFeed>0 then assembledText=assembledText.."\n" end
					assembledText=assembledText..turnOrder[a].score.CardsLeft.." Volkare Card(s) Left: +"..(turnOrder[a].score.CardsLeft*2)..")"
					lineFeed=lineFeed+1
					if lineFeed>0 then assembledText=assembledText.."\n" end
					assembledText=assembledText..volkareRaceLevel[gStates.volkareRaceLevel].." Volkare Race Level: x"..(((gStates.volkareRaceLevel-1)/2)+1)..")"
					lineFeed=lineFeed+1
					coopScore=coopScore+((((gStates.volkareCombatLevel*10)+20)+(turnOrder[a].score.CardsLeft*2))*(((gStates.volkareRaceLevel-1)/2)+1))
					updateScorePannel("Volkare", lineFeed, assembledText)
				end

				--Relic Score
				if gStates.gameScenario=="The Lost Relic Blitz" then
					assembledText="" lineFeed=0
					if foundRelic>0 then
						assembledText=foundRelic.." Relic(s) Found: +"..(foundRelic*5)
						lineFeed=lineFeed+1
					end
					if gStates.playersRef~=5 then
						local EveryRelic=true
						for b=1, #turnOrder, 1 do
							if turnOrder[b].mage~=gStates.positionMageKnight[5] then
								if turnOrder[b].score.Relic==0 then EveryRelic=false break end
							end
						end
						if EveryRelic==true then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Every player collected a Relic: +5"
							lineFeed=lineFeed+1
							coopScore=coopScore+5
						end
					end
					if foundRelic==gStates.cityTiles then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."All relics collected: +10"
						lineFeed=lineFeed+1
						coopScore=coopScore+10
					end
					local temp=pannel
					pannel=1
					UI.setAttribute("Relic1ScoreCell", "columnSpan", "4")
					UI.setAttribute("Relic1ScoreText", "alignment", "MiddleCenter")
					updateScorePannel("Relic", lineFeed, assembledText)
					pannel=temp
				end

				--City Coop Score
				if gStates.defeatedCities>0 or gStates.gameScenario=="The Gauntlet" then
					assembledText="" lineFeed=0
					local cityValue=10
					if gStates.gameScenario=="Volkare's Return" then cityValue=20 end
					if gStates.gameScenario=="Volkare's Quest" then cityValue=5 end
					assembledText=gStates.defeatedCities.." Conquered City(s): +"..(gStates.defeatedCities*cityValue)
					lineFeed=lineFeed+1
					coopScore=coopScore+(gStates.defeatedCities*cityValue)
					if gStates.gameScenario~="Volkare's Return" and gStates.gameScenario~="Volkare's Quest" then
						if gStates.playersRef~=5 and gStates.allLeaderCheck==true then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."Each Player is a Leader of a City: +10"
							lineFeed=lineFeed+1
							coopScore=coopScore+10
						end
						if gStates.defeatedCities==gStates.cityTiles+gStates.megapolis then
							if lineFeed>0 then assembledText=assembledText.."\n" end
							assembledText=assembledText.."All Cities are Conquered: +15"
							lineFeed=lineFeed+1
							coopScore=coopScore+15
						end
					end
					if gStates.gameScenario=="The Gauntlet" then
						assembledText="+10 for entering the Red City: +?\n+10 for buying the Relic: +?"
						lineFeed=2
					end

					local temp=pannel
					pannel=1
					UI.setAttribute("City1ScoreCell", "columnSpan", "4")
					UI.setAttribute("City1ScoreText", "alignment", "MiddleCenter")
					updateScorePannel("City", lineFeed, assembledText)
					pannel=temp
				end

				--Faction Leader Coop Score
				assembledText="" lineFeed=0
				if (gStates.gameScenario=="Life and Death" or gStates.gameScenario=="Mega Conquest") and gStates.coop==1 and gStates.defeatedFaction>0 then
					assembledText=gStates.defeatedFaction.." Leader(s) Defeated: +"..(gStates.defeatedFaction*10)
					lineFeed=lineFeed+1
					coopScore=coopScore+(gStates.defeatedFaction*10)
					if gStates.defeatedFaction==2 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Both Leaders are defeated: +15"
						lineFeed=lineFeed+1
						coopScore=coopScore+15
						if gStates.playersRef~=5 then
							if gStates.allPlayersFoughtAFactionLeaderCheck==true then
								if lineFeed>0 then assembledText=assembledText.."\n" end
								assembledText=assembledText.."Every player helped defeat a Leader: +10"
								lineFeed=lineFeed+1
								coopScore=coopScore+10
							end
							if gStates.allPlayersFoughtBothFactionLeaderCheck==true then
								if lineFeed>0 then assembledText=assembledText.."\n" end
								assembledText=assembledText.."Every player helped defeat Both Leaders: +15"
								lineFeed=lineFeed+1
								coopScore=coopScore+15
							end
						end
					end
				end
				if gStates.gameScenario=="The Realm of the Dead Blitz" and gStates.coop==1 then
					if gStates.defeatedFaction>0 then
						assembledText="Necromancer is Defeated: +10"
						lineFeed=lineFeed+1
						coopScore=coopScore+10
					end
					if coopGraveYard>0 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText..coopGraveYard.." Graveyard(s) sealed: +"..(coopGraveYard*5)
						lineFeed=lineFeed+1
						coopScore=coopScore+(coopGraveYard*5)
					end
					if gStates.defeatedFaction>0 and coopGraveYard>=gStates.playerCount+1 then
						if lineFeed>0 then assembledText=assembledText.."\n" end
						assembledText=assembledText.."Necromancer defeated & Graveyards sealed: +10"
						lineFeed=lineFeed+1
						coopScore=coopScore+10
					end
				end
				if (gStates.gameScenario=="The Realm of the Dead Blitz" or gStates.gameScenario=="The Hidden Valley Blitz") and gStates.coop==1 and gStates.playersRef~=5 and gStates.allPlayersFoughtAFactionLeaderCheck==true then
					if lineFeed>0 then assembledText=assembledText.."\n" end
					assembledText=assembledText.."Every player helped defeat the Leader: +20"
					lineFeed=lineFeed+1
					coopScore=coopScore+20
				end
				if gStates.gameScenario=="The Hidden Valley Blitz" and gStates.coop==1 and gStates.defeatedFaction>0 then
					if lineFeed>0 then assembledText=assembledText.."\n" end
					assembledText=assembledText.."Defeated the High Priestess: +20"
					lineFeed=lineFeed+1
					coopScore=coopScore+20
				end
				local temp=pannel
				pannel=1
				UI.setAttribute("TezlaScoreHeadingText", "text", "Faction Scoring")
				UI.setAttribute("Tezla1ScoreCell", "columnSpan", "4")
				UI.setAttribute("Tezla1ScoreText", "alignment", "MiddleCenter")
				updateScorePannel("Tezla", lineFeed, assembledText)
				pannel=temp

				--Total Score
				UI.setAttribute("CoopScoreData", "active", "true")
				UI.setAttribute("CoopScoreText", "text", "Final Fame: "..coopScore)
			end
		end

		--final scoreboard tweaks
		for a, b in pairs(heights) do
			if b>24 then totalHeight=totalHeight+30 end
		end
		UI.setAttribute("ScoreBoard", "height", totalHeight)
		UI.setAttribute("ScoreBoard", "width", (pannel-1)*220)
		if gStates.playersRef==5 then
			UI.setAttribute("ScoreBoard", "width", 400)
			UI.setAttribute("ScoreBoardTable", "columnWidths", "400")
			UI.setAttribute("VolkareScoreText", "alignment", "MiddleRight")
			UI.setAttribute("Tezla1ScoreText", "alignment", "MiddleRight")
			UI.setAttribute("City1ScoreText", "alignment", "MiddleRight")
			UI.setAttribute("EfficiencyScoreText", "alignment", "MiddleRight")
		end
		if #scoreViewing<=1 then UI.show("ScoreBoard") end
		table.sort(turnOrder, function (k1, k2) return k1.tactic<k2.tactic end)
	end
end

function cityBeatCheck()
	--Figure out who leads and assisted in cities
	local leadTest={}
	local factionAssistTest={}
	local bothTest=0

	gStates.allPlayersFoughtAFactionLeaderCheck=false
	gStates.allPlayersFoughtBothFactionLeaderCheck=false
	gStates.allLeaderCheck=false
	gStates.defeatedFaction=0
	gStates.defeatedCities=0
	gStates.defeatedFactionTest={}
	--Zero out any existing scores
	local scoreVariable={"CityLead", "CityAssist", "ElemFactionAssist", "DarkFactionAssist", "ElemFactionLead", "DarkFactionLead"}
	for a=1, #turnOrder, 1 do
		turnOrder[a].defeatedCities={}
		for b, c in pairs(scoreVariable) do
			turnOrder[a].score[c]=0
		end
	end
	--read each city
	for cityZone, cityStuff in pairs(cityScriptZones) do
		if getObjectFromGUID(cityZone)~=nil then
			local count=0
			local firstShield=true
			local objectsOnCity=getObjectFromGUID(cityZone).getObjects()
			--Sort objects in city zones
			if cityZone==darkCrusader.discZone or cityZone==elementalist.discZone then
				--counter clockwise from the top position
				local tilePos=getObjectFromGUID(cityZone).getPosition()
				table.sort(objectsOnCity, function(k1, k2)
					local rot=math.rad(90)
					local Var1=math.atan2(((k1.getPosition()[3]-tilePos[3])*math.cos(rot))+((k1.getPosition()[1]-tilePos[1])*math.sin(rot)), ((k1.getPosition()[1]-tilePos[1])*math.cos(rot))-((k1.getPosition()[3]-tilePos[3])*math.sin(rot)))
					local Var2=math.atan2(((k2.getPosition()[3]-tilePos[3])*math.cos(rot))+((k2.getPosition()[1]-tilePos[1])*math.sin(rot)), ((k2.getPosition()[1]-tilePos[1])*math.cos(rot))-((k2.getPosition()[3]-tilePos[3])*math.sin(rot)))
					return Var1 < Var2
				end)
			else
				--from left to right
				table.sort(objectsOnCity, function (k1, k2) return k1.getPosition()[1]<k2.getPosition()[1] end)
			end
			--count shields found in city zone
			local cityScoring={}
			for a, shield in pairs(objectsOnCity) do
				if shield.getName()=="Shield" then
					if cityScoring[shield.getDescription()]~=nil then
						cityScoring[shield.getDescription()]=cityScoring[shield.getDescription()]+1
					else
						if firstShield==true then cityScoring[shield.getDescription()]=1.5 firstShield=false else cityScoring[shield.getDescription()]=1 end
					end
					count=count+1
				end
			end
			--add grave yards and glades to Faction ammounts
			if (cityZone==darkCrusader.discZone or cityZone==elementalist.discZone) and gStates.coop==0 then
				for c=1, #turnOrder, 1 do
					if turnOrder[c].mage~=gStates.positionMageKnight[5] then
						if cityScoring[turnOrder[c].mage]==nil then cityScoring[turnOrder[c].mage]=0 end
						if cityZone==elementalist.discZone then cityScoring[turnOrder[c].mage]=cityScoring[turnOrder[c].mage]+turnOrder[c].score.Glade end
						if cityZone==darkCrusader.discZone then cityScoring[turnOrder[c].mage]=cityScoring[turnOrder[c].mage]+turnOrder[c].score.GraveYard end
					end
				end
			end
			--Work out Leader for City
			local highest={0, nil}
			if gStates.cityMonsterQty[cityStuff.cityGUID]~=nil then
				local beaten=true
				for _, state in pairs(gStates.cityMonsterQty[cityStuff.cityGUID]) do
					if state=="alive" then beaten=false break end
				end
				if beaten==true then--count>=gStates.cityMonsterQty[cityStuff.cityGUID].shieldsNeeded then
					if cityStuff.cityGUID~=darkCrusader.terrainHex and cityStuff.cityGUID~=elementalist.terrainHex then
						gStates.defeatedCities=gStates.defeatedCities+1
						--Assign lead and assist values to player scores
						for d, e in pairs(cityScoring) do
							for c=1, #turnOrder, 1 do
								if turnOrder[c].mage==d then
									turnOrder[c].score.CityAssist=turnOrder[c].score.CityAssist+1
									turnOrder[c].defeatedCities[cityStuff.cityGUID]="Assist"
									if highest[1]<e then highest[1]=e highest[2]=d end
									break
								end
							end
						end
						for c=1, #turnOrder, 1 do
							if turnOrder[c].mage==highest[2] then
								turnOrder[c].score.CityAssist=turnOrder[c].score.CityAssist-1
								turnOrder[c].score.CityLead=turnOrder[c].score.CityLead+1
								turnOrder[c].defeatedCities[cityStuff.cityGUID]="Lead"
								leadTest[c]=true
								break
							end
						end
					else
						gStates.defeatedFaction=gStates.defeatedFaction+1
						gStates.defeatedFactionTest[cityStuff.cityGUID]="Beat"
					end
				end
				--Faction Leader
				if cityZone==darkCrusader.discZone or cityZone==elementalist.discZone then
					local factionBothAssistTest={}
					for d, e in pairs(cityScoring) do
						for c=1, #turnOrder, 1 do
							if turnOrder[c].mage==d then
								if cityZone==elementalist.discZone then turnOrder[c].score.ElemFactionAssist=turnOrder[c].score.ElemFactionAssist+1 end
								if cityZone==darkCrusader.discZone then turnOrder[c].score.DarkFactionAssist=turnOrder[c].score.DarkFactionAssist+1 end
								if highest[1]<e then highest[1]=e highest[2]=d end
								factionAssistTest[turnOrder[c].mage]=true
								factionBothAssistTest[turnOrder[c].mage]=true
								break
							end
						end
					end
					for c=1, #turnOrder, 1 do
						if turnOrder[c].mage==highest[2] then
							if cityZone==darkCrusader.discZone then
								turnOrder[c].score.DarkFactionAssist=turnOrder[c].score.DarkFactionAssist-1
								turnOrder[c].score.DarkFactionLead=turnOrder[c].score.DarkFactionLead+1
							end
							if cityZone==elementalist.discZone then
								turnOrder[c].score.ElemFactionAssist=turnOrder[c].score.ElemFactionAssist-1
								turnOrder[c].score.ElemFactionLead=turnOrder[c].score.ElemFactionLead+1
							end
							break
						end
					end
					--All Players fought Both Leader Check
					local count=0
					--for a, b in pairs (factionBothAssistTest) do count=count+1 end
					if #factionBothAssistTest==#turnOrder-1 then bothTest=bothTest+1 end
				end
			end
		end
	end
	--All players are city Leaders Check
	if #leadTest==#turnOrder-1 then gStates.allLeaderCheck=true end
	--All players fought both leaders check
	if bothTest==2 then gStates.allPlayersFoughtBothFactionLeaderCheck=true end
	--All Players fought a Leader Check
	if #factionAssistTest==#turnOrder-1 then gStates.allPlayersFoughtAFactionLeaderCheck=true end
end

function SetupMenu(player, mouseButton, id)
	if mouseButton=="-1" then
		UI.show("Setup")
		UI.hide("HelpButton")
	end
end

function DisplayHelp(player, mouseButton, id)
	if mouseButton=="-1" then
		--update Game Reminder text
		local gameReminderText=gStates.gameScenario.." Scenario"
		local gameReminderHeight=50
		local lineFeed=16
		if gStates.gameScenario:reverse():sub(1, 5)=="ztilB" then gameReminderText=gStates.gameScenario:sub(1, string.len(gStates.gameScenario)-6).." Scenario" end
		if gStates.blitz==1 then gameReminderText=gameReminderText.."\nBlitz Rules" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.removeLostLegionExpansion==true then gameReminderText=gameReminderText.."\nLost Legion Monsters and Cards Removed" gameReminderHeight=gameReminderHeight+lineFeed else
			gameReminderText=gameReminderText.."\nLost Legion Monsters and Cards Included" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.shadesOfTezlaPugs==true then gameReminderText=gameReminderText.."\nShades of Tezla Monsters Included" gameReminderHeight=gameReminderHeight+lineFeed else
			gameReminderText=gameReminderText.."\nShades of Tezla Monsters Removed" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.rampage==1 then gameReminderText=gameReminderText.."\nRampage Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.rampage==2 then gameReminderText=gameReminderText.."\nMore Rampage Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.rampageAmbush==true then gameReminderText=gameReminderText.."\nAmbushing Rampagers Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.rampagePursuit==true then gameReminderText=gameReminderText.."\nPursuin Rampagers Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		gameReminderText=gameReminderText.."\n"..gStates.mapShape.." Map" gameReminderHeight=gameReminderHeight+lineFeed
		if gStates.randomTileOrientation==true then gameReminderText=gameReminderText.."\nRandom Terrain Tile Orientation Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.gameScenario~="Life and Death" and gStates.gameScenario~="The Realm of the Dead Blitz" and gStates.gameScenario~="The Hidden Valley Blitz" then
			if gStates.cityTiles-gStates.megapolis>0 then gameReminderText=gameReminderText.."\n"..gStates.cityTiles-gStates.megapolis.." City(s)" gameReminderHeight=gameReminderHeight+lineFeed end
			if gStates.cityTiles-gStates.megapolis==0 and gStates.megapolis>0 then gameReminderText=gameReminderText.."\n" gameReminderHeight=gameReminderHeight+lineFeed end
			if gStates.cityTiles-gStates.megapolis>0 and gStates.megapolis>0 then gameReminderText=gameReminderText.." & " end
			if gStates.megapolis>0 then gameReminderText=gameReminderText..gStates.megapolis.." Megapolis" end
		else
			gameReminderText=gameReminderText.."\n1 Friendly City(s)" gameReminderHeight=gameReminderHeight+lineFeed
			gameReminderText=gameReminderText.."\n"..(gStates.cityTiles-1).." Leader(s)"
		end
		if gStates.cityTiles>0 and gStates.cityLevels[1]>0 then
			gameReminderText=gameReminderText.." at Level(s): "
			for a, b in pairs(gStates.cityLevels) do
				if b~=0 then gameReminderText=gameReminderText..b..", " end
			end
			gameReminderHeight=gameReminderHeight+lineFeed
		end
		if gStates.cityLevels[1]==0 and gStates.gameScenario~="The Lost Relic Blitz" then gameReminderText=gameReminderText.." Friendly" end
		if gStates.cityLevels[1]==0 and gStates.gameScenario=="The Lost Relic Blitz" then gameReminderText=gameReminderText.." Destroyed" end
		if gStates.gameScenario=="Mega Conquest" and gStates.shadesOfTezlaPugs==true then gameReminderText=gameReminderText.."\n2 Leaders - Level of last City revealed" gameReminderHeight=gameReminderHeight+lineFeed end
		--need leader and frindly city notes
		if gStates.positionMageKnight[5]=="Volkare" then
			local volkareRaceLevel={"Fair", "Tight", "Thrilling"}
			gameReminderText=gameReminderText.."\n"..volkareRaceLevel[gStates.volkareRaceLevel].." Volkare Race Level" gameReminderHeight=gameReminderHeight+lineFeed
			local volkareCombatLevel={"Daring", "Heroic", "Legendary"}
			gameReminderText=gameReminderText.."\n"..volkareCombatLevel[gStates.volkareCombatLevel].." Volkare Combat Level" gameReminderHeight=gameReminderHeight+lineFeed
		end
		if gStates.volkareCampAsCity==true then gameReminderText=gameReminderText.."\nVolkare's Camp as a City Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.randomCities==true then gameReminderText=gameReminderText.."\nRandom Cities Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.startAtNight==true then gameReminderText=gameReminderText.."\nStart at Night Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.darknessComing==true then
			if gStates.dayRound==true then gameReminderText=gameReminderText.."\nDarkness is Comming Variant" gameReminderHeight=gameReminderHeight+lineFeed end
			if gStates.dayRound==false then gameReminderText=gameReminderText.."\nDaylight is Comming Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		end
		if gStates.questMod==true then gameReminderText=gameReminderText.."\nQuest Cards Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		if gStates.weatherMod==true then gameReminderText=gameReminderText.."\nAtlantean Weather Variant" gameReminderHeight=gameReminderHeight+lineFeed end
		UI.setAttribute("GameReminderText", "text", gameReminderText)
		UI.setAttribute("GameReminder", "height", gameReminderHeight)
		local height=0
		if gStates.help==false then
			UI.show("PlayerSeating")
			UI.show("ObjectRotating")
			UI.show("PlayAreaRules")
			UI.show("GameReminder")
			height=3
			gStates.help=true
		else
			UI.hide("PlayerSeating")
			UI.hide("ObjectRotating")
			UI.hide("PlayAreaRules")
			UI.hide("GameReminder")
			height=-2
			gStates.help=false
		end
		local helpNotes={	"0b2a31", "a3d667", --Fame and Reputaion
							playAreaGuideBackground[1], playAreaGuideText[1], --Player Area 1
							playAreaGuideBackground[2], playAreaGuideText[2], --Player Area 2
							playAreaGuideBackground[3], playAreaGuideText[3], --Player Area 3
							playAreaGuideBackground[4], playAreaGuideText[4]} --Player Area 4
		for a, b in pairs(helpNotes) do
			if getObjectFromGUID(b)~=nil then
				getObjectFromGUID(b).setPosition({getObjectFromGUID(b).getPosition()[1], height, getObjectFromGUID(b).getPosition()[3]})
			end
		end
	end
end

function ButtonClickDown(player, mouseButton, ButtonPressed)
	if mouseButton=="-1" then
		if ButtonPressed=="DrawOne" or ButtonPressed=="EndTurnButton" or ButtonPressed=="EndRoundButton" or ButtonPressed=="ExtraTurnTacticButton"
			or ButtonPressed=="PreEndTurn" or ButtonPressed=="DummyButton" or ButtonPressed=="EndTurnButtonAlt"
			or ButtonPressed=="RandomGame" or ButtonPressed=="NewUser" or ButtonPressed=="StartButton"
			or ButtonPressed=="Mage1CompleteImage" or ButtonPressed=="Mage2CompleteImage" or ButtonPressed=="Mage3CompleteImage" or ButtonPressed=="Mage4CompleteImage" then
			UI.setAttribute(ButtonPressed.."Image", "image", "Button Deactive")
		end
		if ButtonPressed=="ShrinkHand" or ButtonPressed=="GrowHand" or ButtonPressed=="ShrinkFame" or ButtonPressed=="GrowFame" or ButtonPressed=="ShrinkRep" or ButtonPressed=="GrowRep" then
			UI.setAttribute(ButtonPressed.."Image", "image", "Button Deactive Short")
		end
		if ButtonPressed=="RandomGame" or ButtonPressed=="NewUser" or ButtonPressed=="StartButton" then
			UI.setAttribute(ButtonPressed.."Image", "image", "Button Deactive Long")
		end
		if getObjectFromGUID(ButtonPressed:sub(1, 6))~=nil then
			getObjectFromGUID(ButtonPressed:sub(1, 6)).UI.setAttribute(ButtonPressed.."Image", "image", "Button Deactive")
		end
	end
end

function ButtonClickUp(player, b, ButtonPressed)
	if ButtonPressed=="DrawOne" or ButtonPressed=="EndTurnButton" or ButtonPressed=="EndRoundButton" or ButtonPressed=="ExtraTurnTacticButton"
		or ButtonPressed=="PreEndTurn" or ButtonPressed=="DummyButton" or ButtonPressed=="EndTurnButtonAlt"
		or ButtonPressed=="Mage1CardPoolImage" or ButtonPressed=="Mage2CardPoolImage" or ButtonPressed=="Mage3CardPoolImage" or ButtonPressed=="Mage4CardPoolImage"
		or ButtonPressed=="Mage1CompleteImage" or ButtonPressed=="Mage2CompleteImage" or ButtonPressed=="Mage3CompleteImage" or ButtonPressed=="Mage4CompleteImage" then
		UI.setAttribute(ButtonPressed.."Image", "image", "Button Active")
	end
	if ButtonPressed=="ShrinkHand" or ButtonPressed=="GrowHand" or ButtonPressed=="ShrinkFame" or ButtonPressed=="GrowFame" or ButtonPressed=="ShrinkRep" or ButtonPressed=="GrowRep" then
		UI.setAttribute(ButtonPressed.."Image", "image", "Button Active Short")
	end
	if ButtonPressed=="RandomGame" or ButtonPressed=="NewUser" or ButtonPressed=="StartButton" then
		UI.setAttribute(ButtonPressed.."Image", "image", "Button Active Long")
	end
	if getObjectFromGUID(ButtonPressed:sub(1, 6))~=nil then
		getObjectFromGUID(ButtonPressed:sub(1, 6)).UI.setAttribute(ButtonPressed.."Image", "image", "Button Active")
	end
end

function updateDropDowns()
	Wait.frames(function()--allows the evrything to settle
		local mainUI=self.UI.getXmlTable()
		--update Scenario List
		local chosenScenarioName=gStates.gameScenario
		if gStates.gameScenario:reverse():sub(1, 5)=="ztilB" then chosenScenarioName=gStates.gameScenario:sub(1, string.len(gStates.gameScenario)-6) end
		mainUI[14].children[3].children[1].children[2].children[2].children={{tag="Option", value=chosenScenarioName, attributes={selected="true"}}}
		local count=2
		for a, b in pairs(scenarioList) do
			if b[1]~="Conquest Blitz" and b[1]~="Volkare's Return Blitz" and b[1]~=gStates.gameScenario then
				local scenarioName=b[1]
				if b[1]:reverse():sub(1, 5)=="ztilB" then scenarioName=b[1]:sub(1, string.len(b[1])-6) end
				mainUI[14].children[3].children[1].children[2].children[2].children[count]={tag="Option", value=scenarioName}
				count=count+1
			end
		end
		--fix Darkness is comming text
		if gStates.dayRound==false then
			mainUI[14].children[3].children[1].children[13].children[1].value="-:Darkness is Coming"
		else
			mainUI[14].children[3].children[1].children[13].children[1].value="-:Daylight is Coming"
		end
		--update mageknight lists
		for a=19, 23, 1 do
			mainUI[14].children[3].children[1].children[a].children[2].children={{tag="Option", value=gStates.positionMageKnight[a-18], attributes={selected="true"}}}
			local count=2
			if gStates.positionMageKnight[a-18]~="nobody" then
				mainUI[14].children[3].children[1].children[a].children[2].children[count]={tag="Option", value="nobody"}
				count=count+1
			end
			if a==23 and gStates.positionMageKnight[5]~="All Skills" and gStates.playerCount==1 then
				mainUI[14].children[3].children[1].children[a].children[2].children[count]={tag="Option", value="All Skills"}
				count=count+1
			end
			if gStates.positionMageKnight[a-18]~="RANDOM" then
				mainUI[14].children[3].children[1].children[a].children[2].children[count]={tag="Option", value="RANDOM"}
				count=count+1
			end
			for b=1, 8, 1 do
				local found=false
				for d, e in pairs(gStates.positionMageKnight) do
					if mageKnights[b].mage==e then found=true break end
				end
				if found==false then
					mainUI[14].children[3].children[1].children[a].children[2].children[count]={tag="Option", value=mageKnights[b].mage}
					count=count+1
				end
			end
		end
		--update Volkare Drop Down List
		local volkareCombatLevel={"Daring", "Heroic", "Legendary"}
		mainUI[14].children[3].children[1].children[24].children[2].children={{tag="Option", value=volkareCombatLevel[gStates.volkareCombatLevel], attributes={selected="true"}}}
		local count=2
		for a, b in pairs(volkareCombatLevel) do
			if b~=volkareCombatLevel[gStates.volkareCombatLevel] then
				mainUI[14].children[3].children[1].children[24].children[2].children[count]={tag="Option", value=b}
				count=count+1
			end
		end
		local volkareRaceLevel={"Fair", "Tight", "Thrilling"}
		mainUI[14].children[3].children[1].children[25].children[2].children={{tag="Option", value=volkareRaceLevel[gStates.volkareRaceLevel], attributes={selected="true"}}}
		local count=2
		for a, b in pairs(volkareRaceLevel) do
			if b~=volkareRaceLevel[gStates.volkareRaceLevel] then
				mainUI[14].children[3].children[1].children[25].children[2].children[count]={tag="Option", value=b}
				count=count+1
			end
		end
		self.UI.setXmlTable(mainUI)
	end, 10)
end

--Increas or decrease the current Mages total hand size
function handAdjust(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
			if (turnOrder[gStates.turnNumber].hand+turnOrder[gStates.turnNumber].handBonus+gStates.tactic4HandBonus<20 and id=="GrowHand")
			or (turnOrder[gStates.turnNumber].hand+turnOrder[gStates.turnNumber].handBonus+gStates.tactic4HandBonus>turnOrder[gStates.turnNumber].baseHand and id=="ShrinkHand") then
				if id=="GrowHand" then turnOrder[gStates.turnNumber].handBonus=turnOrder[gStates.turnNumber].handBonus+1 end
				if id=="ShrinkHand" then turnOrder[gStates.turnNumber].handBonus=turnOrder[gStates.turnNumber].handBonus-1 end
				mainUIUpdate("hand Adjusted")
			end
		end
	end
end

function FameAdjust(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
			if (turnOrder[gStates.turnNumber].fameGain>0 and id=="ShrinkFame") or id=="GrowFame" then
				if id=="GrowFame" then turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain+1 end
				if id=="ShrinkFame" then turnOrder[gStates.turnNumber].fameGain=turnOrder[gStates.turnNumber].fameGain-1 end
				mainUIUpdate("Fame Adjusted")
			end
		end
	end
end

function RepAdjust(player, mouseButton, id)
	if mouseButton=="-1" then
		if legalPlayerCheck(player.color, turnOrder[gStates.turnNumber].seatPos)==true then
			if 	(turnOrder[gStates.turnNumber].repGain>(-7-turnOrder[gStates.turnNumber].reputation) and id=="ShrinkRep") or
				(turnOrder[gStates.turnNumber].repGain< (7-turnOrder[gStates.turnNumber].reputation) and id=="GrowRep") then
				if id=="GrowRep" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain+1 end
				if id=="ShrinkRep" then turnOrder[gStates.turnNumber].repGain=turnOrder[gStates.turnNumber].repGain-1 end
				mainUIUpdate("Rep Adjusted")
			end
		end
	end
end

function closeSplash()
	UI.hide("welcome")
end

--toggle autoflip
function autoflip()
	if gStates.autoFlip==true then
		gStates.autoFlip=false
		UI.setAttribute("AutoFlipButtonRealImage", "image", "Button Active")
	else
		gStates.autoFlip=true
		UI.setAttribute("AutoFlipButtonRealImage", "image", "Button Deactive")
	end
end

------------
-- Variables
------------
tacticZones=			{"9e319e", "32172f", "bc2046", "8363fc", "01ac7e", "582d2b"}
tacticCard=				{"3b6922", "a000a4", "fbd7fd", "6f7af6", "ea251c", "2404f1",     "650f6f", "f6ad01", "3bb84a", "db7aaa", "6c50ac", "e2af14"}--1-6 Day, 1-6 Night
deedDeckZones=			{"af0360", "22b532", "c10770", "aa1121", "b29524"}
deedDeckDiscardZones=	{"3ec23f", "07c9e2", "b3fe99", "2e1a7a", "88fb5d"}
colorBand=				{"bffe58", "f4958b", "1a3205", "7075da", "a1893c"}
playAreaGuideText=		{"b8311b", "15738f", "101268", "4a016b", ""}
playAreaGuideBackground={"e37cdf", "d65c04", "3124e4", "c97905", ""}
playerPlayAreas=		{"004cca", "9ef3c1", "182df2", "813d11", "c9a6dd"}--5th GUID stops errors with 5 player, but does nothing.
playerCrystalAreas=		{"13f39d", "5bb87a", "621d88", "2936ad", "0e5dfd"}
playerUnitAreas=		{"98a462", "0d6195", "648671", "8d6d93", "c9a6dd"}--5th GUID stops errors with 5 player, but does nothing
handZones=				{"069840", "6e984a", "6f04e0", "b5d1cf"}
dummyBoard=				"a0f229"
mapArea=				"ded4d3"
elementalist=			{disc="441bd8", token="3c71d3", terrainHex="a4c858", discZone="194de2"}
darkCrusader=			{disc="67e80f", token="4f7196", terrainHex="ffffff", discZone="897984"}
volkare=				{disc="5a616b", model="c62a53", terrainHex="a7d898", discZone="48f2f1"}

monsterPiles={	["white"]="baac01", ["purple"]="c03e08", ["tan"]="e4b016", ["gray"]="7a85f5", ["red"]="4537fa", ["green"]="c8e6e4", ["yellow"]="cf4631",
								["greenElem"]="0596bd", ["tanElem"]="30bbae", ["redElem"]="54c45b",
								["greenDark"]="cfef57", ["tanDark"]="0fde4d", ["redDark"]="bc9d0e"}

scenarioList={
	{"First Reconnaissance",
		{mapShape="Wedge with No Limitations",countryTiles=8,cityTiles=1,coreTiles=2,rounds=3,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge with No Limitations",countryTiles=9,cityTiles=1,coreTiles=2,rounds=3,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge with No Limitations",countryTiles=11,cityTiles=1,coreTiles=2,rounds=3,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge with No Limitations",countryTiles=8,cityTiles=1,coreTiles=2,rounds=4,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={18, 1, 1},

			playerDetails="1 to 4 - Slightly competitive(No PvP) and Solo",

			countryRules="(Sorted by terrain number)",

			scenarioPurpose="Training scenario. Strongly recommended whenever any player plays the game for the first time, as it provides a natural way to learn the game rules and get familiar with them.\n\n<i>On your first mission, you will be sent to an unknown part of the Atlantean kingdom, your task is to locate its Capital. That’s all. All the Fame, any knowledge and treasures you manage to get during your mission are yours to keep.</i>\n\nFor a detailed description of this scenario, see the Game Walkthrough",

			scenarioEnd="When a player reveals a city, all players (including themselves) have one last turn. If the Round ends during this, the game ends immediately."}},
	{"First Conquest", {},{},{},
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=2,rounds=5,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={5}},
		scenarioDetails={
			megapolisPossible=true, blitzPossible=="Off Only", ruleStates={1, 1, 1},

			playerDetails="1 - Solo Only",

			scenarioPurpose="First Conquest is a simple solo scenario aimed at bridging the gap between First Reconnaissance and Full Conquest.",

			scenarioEnd="When the single city is conquered, the player has one last turn, before scoring"}},
	{"Conquest",
		{mapShape="Wedge",		countryTiles= 8,cityTiles=2,coreTiles=1,rounds=6,discardTactics=0, dTW=0, cityLevels={4,4}},
		{mapShape="Wedge",		countryTiles= 9,cityTiles=3,coreTiles=2,rounds=6,discardTactics=0, dTW=0, cityLevels={4,4,4}},
		{mapShape="Fully Open",	countryTiles=11,cityTiles=4,coreTiles=3,rounds=6,discardTactics=0, dTW=0, cityLevels={4,4,4,4}},
		{mapShape="Wedge",		countryTiles= 7,cityTiles=2,coreTiles=2,rounds=6,discardTactics=2, dTW=2, cityLevels={5,8}, 		dummyTacticSelection="L"},
		{mapShape="Fully Open",	countryTiles= 8,cityTiles=3,coreTiles=2,rounds=6,discardTactics=1, dTW=1, cityLevels={5,5,8}, 		dummyTacticSelection="F"},
		{mapShape="Fully Open",	countryTiles=10,cityTiles=4,coreTiles=3,rounds=6,discardTactics=1, dTW=1, cityLevels={5,5,5,11}, 	dummyTacticSelection="F"},
		{mapShape="Fully Open",	countryTiles=13,cityTiles=5,coreTiles=3,rounds=6,discardTactics=0, dTW=0, cityLevels={5,5,5,5,11}, 	dummyTacticSelection="F"},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes",  ruleStates={19, 1, 1},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			scenarioPurpose="Standard game scenario, can be long.\n\n<i>Your task is to find and conquer all cities in three days and three nights. Each of you will be on your own, and as usual, you want to get as much Fame, knowledge, and loot as possible. Luckily for you, conquering cities is a great way to get Fame.</i>",

			scenarioEnd="When all cities are conquered, all players (including the one who conquered the last city) have one last turn, before Scoring"}},
	{"Conquest Blitz",
		{mapShape="Wedge",					   countryTiles= 6,cityTiles=2,coreTiles=1,rounds=4,discardTactics=0, dTW=0, cityLevels={3,3}},
		{mapShape="Wedge",					   countryTiles= 7,cityTiles=3,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={3,3,3}},
		{mapShape="Open Limited to 4 Columns", countryTiles= 9,cityTiles=4,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={3,3,3,3}},
		{mapShape="Wedge",					   countryTiles= 5,cityTiles=1,coreTiles=1,rounds=4,discardTactics=2, dTW=2, cityLevels={5}, dummyTacticSelection="L"},
		{mapShape="Fully Open",				   countryTiles= 7,cityTiles=2,coreTiles=1,rounds=4,discardTactics=1, dTW=1, cityLevels={5,8}, dummyTacticSelection="F"},
		{mapShape="Fully Open",				   countryTiles= 8,cityTiles=3,coreTiles=2,rounds=4,discardTactics=1, dTW=1, cityLevels={5,8,11}, dummyTacticSelection="F"},
		{mapShape="Fully Open",				   countryTiles=11,cityTiles=4,coreTiles=2,rounds=4,discardTactics=1, dTW=1, cityLevels={5,8,11,14}, dummyTacticSelection="F"},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes", ruleStates={18, 1, 1},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			scenarioPurpose="Standard game scenario, includes an extra manan die and Unit, plus start with Reputation +1 and Fame 1.\n\n<i>Again, your task is to conquer all cities. You have only two days and two nights this time, so you were imbued with extra power. And again, whoever scores most Fame is the winner.</i>",

			scenarioEnd="When all cities are conquered, all players (including the one who conquered the last city) have one last turn. Dummy player gets skipped"}},
	{"Mines Liberation",--5
		{mapShape="Wedge",countryTiles=8,cityTiles=1,coreTiles=1,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=9,cityTiles=1,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=11,cityTiles=1,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=1,rounds=4,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={20, 1, 2},

			playerDetails="1 to 4 - Competitive and Solo",

			countryRules="(will select Mine tiles [not Deep] first)",
			coreRules="(will pick Mine tiles [not Deep] first)",
			cityRules="(will pick the Red City first)",

			scenarioPurpose="A shorter scenario similar to the standard one, but with different goals.\n\n<i>Fight in the tunnels! Mines in this friendly kingdom are occupied by enemies! Without a supply of crystals, Mages cannot serve the land. Go there and regain them.</i>",

			scenarioEnd="When all map tiles are revealed and all mines are liberated, all players (including the one who conquered the last mine) have one last turn. If the Round ends during this, the game ends immediately"}},
	{"Druid Nights",
		{mapShape="Wedge",countryTiles=8,cityTiles=1,coreTiles=1,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=9,cityTiles=1,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=11,cityTiles=1,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=1,rounds=4,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={21, 1, 2},

			playerDetails="1 to 4 - Competitive and Solo",

			countryRules="(will pick Magical Glade tiles first)",
			cityRules="(will pick the Green City first)",

			scenarioPurpose="A shorter scenario similar to the standard one, but with different goals.\n\n<i>How big a challenge dare you encounter? Have you noticed the mysterious obelisks with engraved symbols on the magical glades around this kingdom? Go and investigate!</i>",

			scenarioEnd="When all players have performed the incantation during the second Night (in that case, each player has one more turn), or at the end of the second Night."}},
	{"Dungeon Lords",
		{mapShape="Wedge",countryTiles=8,cityTiles=1,coreTiles=1,rounds=5,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=9,cityTiles=1,coreTiles=2,rounds=5,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=11,cityTiles=1,coreTiles=3,rounds=5,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=1,rounds=5,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={21, 1, 3},

			playerDetails="1 to 4 - Competitive and Solo",

			countryRules="(will pick Dungeon tiles first)",
			coreRules="(will pick the Tomb tile first)",
			cityRules="(will pick the Blue city first)",

			scenarioPurpose="A shorter scenario similar to the standard one, but with different goals.\n\n<i>Let’s go underground. We thought we already controlled this land. We were wrong! There is a vast system of underground tunnels under the kingdom. We do not know who dug these tunnels and why, but we do not care. Go, and seize control of them!</i>",

			scenarioEnd="When all map tiles are revealed and all dungeons and tombs are conquered, all players (including the one who conquered last tomb or dungeon) have one last turn. If the Round ends during this, the game ends immediately."}},
	{"Conquer and Hold",
		{mapShape="Predefined",countryTiles=5,cityTiles=1,coreTiles=3,rounds=6,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Predefined",countryTiles=5,cityTiles=1,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		{mapShape="Predefined",countryTiles=5,cityTiles=1,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={22, 1, 3},

			playerDetails="2 or 4 - Competitive Only",

			countryRules="(will Pick Fort and Mage Tower tiles First)",
			coreRules="(will Pick Fort and Mage Tower tiles First)",
			cityRules="(will pick the White City first)",

			scenarioPurpose="A very competitive scenario full of opportunities for Heroes to fight each other.\n\n<i>Victory points for controlled sites instead of Fame! You are sent to this problematic province by the Council of the Void... well... to be exact... by the ... um... righteous members of the Council of the Void... to seize control over it. Just beware, there is another faction of treacherous Council members that wants to control the region. Do not allow them!</i>",

			scenarioEnd="The scenario is played until end of the Round limit, or until one side admits the other side has won. Each owned keep counts as 3 Victory points. Each owned mage tower counts as 2 Victory points. The player or team who has the most points wins the game. If tied (i.e. if some sites were left unconquered, as there are 25 points available in the game), no one is the winner."}},
	{"One to Return",
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=1,rounds=4,discardTactics=0, dTW=0, cityLevels={3}},
		{mapShape="Wedge",countryTiles=8,cityTiles=2,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={3,3}},
		{mapShape="Wedge",countryTiles=10,cityTiles=3,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={3,3,3}},
		scenarioDetails={
			megapolisPossible=true, blitzPossible="Off Only", ruleStates={22, 1, 4},

			playerDetails="2 to 4 - Competitive Only",

			scenarioPurpose="A competitive scenario suitable for those who prefer “last man standing” types of games over the end game scoring.\n\n<i>This is an ultimate test of your power. You are sent to an unknown part of the kingdom and the portal closes after you go through it. After two days and two nights, the portal opens again for a short while. Only the hero who is at the portal at that moment can return home.</i>",

			scenarioEnd="The scenario ends as soon as the second Night is over. Whoever stands on the portal space at that moment wins the game. If no-one stands there, there is no winner. There is no scoring, and Fame does not matter.\n\nNote: After End of the Night is announced, initiating Player vs. Player combat is not allowed. Thus, if the portal is occupied at the moment when end of the second Night is announced, the player occupying it wins."}},
	{"Volkare's Return", {},{},{},--10
		{mapShape="Open Limited to 4 Columns",countryTiles=7,cityTiles=1,coreTiles=1,rounds=6,discardTactics=1, dTW=1, dummyTacticSelection="L",cityLevels={4}},
		{mapShape="Open Limited to 4 Columns",countryTiles=8,cityTiles=1,coreTiles=2,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={6}},
		{mapShape="Open Limited to 4 Columns",countryTiles=10,cityTiles=1,coreTiles=3,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={8}},
		{mapShape="Open Limited to 4 Columns",countryTiles=12,cityTiles=1,coreTiles=4,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={10}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes", ruleStates={1, 12, 4},

			playerDetails="1 to 4 - Cooperative Only",

			scenarioPurpose="A challenging solo or coop game with epic city conquering and city defense battles. Time is measured by enemy progress instead of a dummy player.\n\n<i>It started as a normal mission – you entered the region, ready to find and conquer its  capital.  But soon you realized you are not the only ones. The dreaded General Volkare just disembarked close to you and prepares to march. Despite his huge army of orcs and draconum, Atlanteans welcome him and some even join his forces. Have they made some strange alliance? Whoever this Volkare is, and whatever allowed him to rise to such power, he has to be stopped at any cost. And it has to be done before he joins his forces with the garrison of the capital. Hurry to reach and conquer the city before Volkare – and at its gates, prepare one hell of a welcome for him. Get ready for the most epic battle the Land has ever seen!</i>",

			scenarioEnd="The scenario can end by one of these ways:\n• Volkare enters the city before players conquer it. The players lose.\n• Volkare attacks the conquered city twice unchallenged. The players lose.\n• The 6th Round ends & Volkare still has an army. The players lose.\n• The entirety of Volkare’s army is destroyed. The players win.\nIf you want to count your score,  every player may then play one more turn. Otherwise, just rejoice in the victory"}},
	{"Volkare's Return Blitz",{},{},{},
		{mapShape="Open Limited to 4 Columns",countryTiles=5,cityTiles=1,coreTiles=1,rounds=4,discardTactics=1, dTW=1, dummyTacticSelection="L",cityLevels={3}},
		{mapShape="Open Limited to 4 Columns",countryTiles=6,cityTiles=1,coreTiles=1,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={4}},
		{mapShape="Open Limited to 4 Columns",countryTiles=8,cityTiles=1,coreTiles=2,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={5}},
		{mapShape="Open Limited to 4 Columns",countryTiles=10,cityTiles=1,coreTiles=3,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={6}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes", ruleStates={1, 14, 5},

			playerDetails="1 to 4 - Cooperative Only",

			scenarioPurpose="A challenging solo or coop game with epic city conquering and city defense battles. Time is measured by enemy progress instead of a dummy player.\n\n<i>It started as a normal mission – you entered the region, ready to find and conquer its  capital.  But soon you realized you are not the only ones. The dreaded General Volkare just disembarked close to you and prepares to march. Despite his huge army of orcs and draconum, Atlanteans welcome him and some even join his forces. Have they made some strange alliance? Whoever this Volkare is, and whatever allowed him to rise to such power, he has to be stopped at any cost. And it has to be done before he joins his forces with the garrison of the capital. Hurry to reach and conquer the city before Volkare – and at its gates, prepare one hell of a welcome for him. Get ready for the most epic battle the Land has ever seen!</i>",

			scenarioEnd="The scenario can end by one of these ways:\n• Volkare enters the city before players conquer it. The players lose.\n• Volkare attacks the conquered city twice unchallenged. The players lose.\n• The 6th Round ends & Volkare still has an army. The players lose.\n• The entirety of Volkare’s army is destroyed. The players win.\nIf you want to count your score,  every player may then play one more turn. Otherwise, just rejoice in the victory"}},
	{"Volkare's Quest",{},{},{},
		{mapShape="Predefined",countryTiles=8,cityTiles=2,coreTiles=4,rounds=6,discardTactics=1, dTW=1, dummyTacticSelection="L",cityLevels={3,3}},
		{mapShape="Predefined",countryTiles=9,cityTiles=2,coreTiles=3,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={4,4}},
		{mapShape="Predefined",countryTiles=11,cityTiles=3,coreTiles=4,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={4,4,4}},
		{mapShape="Predefined",countryTiles=12,cityTiles=3,coreTiles=3,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={5,5,5}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Off Only", ruleStates={1, 15, 5},

			playerDetails="1 to 4 - Cooperative Only",

			scenarioPurpose="A challenging solo or coop game where you have to avoid Volkare at first, and then pursue and stop him before he enters the portal.\n\n<i>You were sent there with a clear task – to Find the mysterious General Volkare and eliminate him. But it seems Volkare was ready for your arrival – once the portal opened and you entered the land, his huge army started to march directly towards you. You are not ready for the confrontation yet! Oh, wait – it is not you who is his target. He is heading directly to the portal. It seems he was just waiting for someone to open it for him. What are his intentions? Does he want to enter the portal, or to destroy it? What happens if he succeeds? Your task is not to investigate that. Your task is to stop him. Destroy his army before he Finishes his quest, whatever it is.</i>",

			scenarioEnd="The scenario can end by one of these ways:-\n• Volkare enters the portal and then performs another move. The players lose.\n• The entire of Volkare’s army is destroyed. The players win.\n\nIf you want to count your score, every player then may play one more turn. Otherwise, just rejoice in the victory"}},
	{"Life and Death",
		{mapShape="Wedge",countryTiles=7,cityTiles=3,coreTiles=1,rounds=6,discardTactics=0, dTW=0, cityLevels={4,4,0}},
		{mapShape="Wedge",countryTiles=9,cityTiles=3,coreTiles=2,rounds=6,discardTactics=0, dTW=0, cityLevels={5,5,0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=11,cityTiles=3,coreTiles=3,rounds=6,discardTactics=0, dTW=0, cityLevels={6,6,0}},
		{mapShape="Wedge",countryTiles=6,cityTiles=3,coreTiles=2,rounds=6,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={6,6,0}},
		{mapShape="Fully Open",countryTiles=7,cityTiles=3,coreTiles=2,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={8,8,0}},
		{mapShape="Fully Open",countryTiles=9,cityTiles=3,coreTiles=3,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={10,10,0}},
		{mapShape="Fully Open",countryTiles=11,cityTiles=3,coreTiles=4,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={12,12,0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={1, 22, 6},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			countryRules={	"",
							"(three will be Magical Glade tiles)",
							"(Four will be Magical Glade tiles)",
							"(five will be Magical Glade tiles)",
							"(three will be Magical Glade tiles)",
							"(three will be Magical Glade tiles)",
							"(four will be Magical Glade tiles)",
							"(five will be Magical Glade tiles)"},
			cityRules="(will pick the Green and Red City first)",

			scenarioPurpose="The full scenario against the forces of life and death.\n\n<i>The Elementalists and the Dark Crusaders are at war. The Council of the Void wish you to take advantage of this opportunity, and fight your way into enemy territory to destroy the Avatars of Tezla; Tezla’s Spirit of the Elementalists and Dark Tezla of the Dark Crusader</i>",

			scenarioEnd="When both faction leaders are defeated, all players (except the Dummy player) have one last turn. If the Round ends during this, the game ends immediately"}},
	{"The Realm of the Dead Blitz",
		{mapShape="Wedge",countryTiles=5,cityTiles=2,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={5,0}},
		{mapShape="Wedge",countryTiles=7,cityTiles=2,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={6,0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=9,cityTiles=2,coreTiles=4,rounds=4,discardTactics=0, dTW=0, cityLevels={7,0}},
		{mapShape="Wedge",countryTiles=5,cityTiles=2,coreTiles=1,rounds=4,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={4,0}},
		{mapShape="Fully Open",countryTiles=6,cityTiles=2,coreTiles=2,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={8,0}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=2,coreTiles=3,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={10,0}},
		{mapShape="Fully Open",countryTiles=10,cityTiles=2,coreTiles=4,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={12,0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="On Only", ruleStates={1, 24, 6},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			countryRules={	"",
							"(two will be Magical Glade tiles)",
							"(three will be Magical Glade tiles)",
							"(four will be Magical Glade tiles)",
							"(two will be Magical Glade tiles)",
							"(three will be Magical Glade tiles)",
							"(four will be Magical Glade tiles)",
							"(five will be Magical Glade tiles)"},
			cityRules="(will pick the Blue and Green City first)",

			scenarioPurpose="Defeat the Necromancer Lord and cleanse the Realm of the Dead.\n\n<i>Many lands have been ravaged by war in the aftermath of the Breaking. In a province abandoned by the Lords of Atlantis, a powerful Necromancer has arisen, fueled by the victims of plague and famine. He wields powerful death magic to taint the land and raise legions of the fallen to serve him. Meanwhile he is working feverishly to complete the terrible Ritual of Lichdom and make himself immortal.\n\nThe hordes of undead and corrupted spirits have begun to spread from the lost realm, generating a growing wave of terror and panic. The Council, alarmed at the growing threat, has ordered you to hunt down and destroy this Necromancer, and to cleanse the land of his corruption before it is too late.</i>",

			scenarioEnd="When all Graveyards are sealed and the necromancer is defeated, all players (except the Dummy player) have one last turn. If the Round ends during this, the game ends immediately"}},
	{"The Hidden Valley Blitz",--15
		{mapShape="Wedge",countryTiles=5,cityTiles=2,coreTiles=2,rounds=4,discardTactics=0, dTW=0, cityLevels={5,0}},
		{mapShape="Wedge",countryTiles=7,cityTiles=2,coreTiles=3,rounds=4,discardTactics=0, dTW=0, cityLevels={6,0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=9,cityTiles=2,coreTiles=4,rounds=4,discardTactics=0, dTW=0, cityLevels={7,0}},
		{mapShape="Wedge",countryTiles=5,cityTiles=2,coreTiles=1,rounds=4,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={4,0}},
		{mapShape="Fully Open",countryTiles=6,cityTiles=2,coreTiles=2,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={8,0}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=2,coreTiles=3,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={10,0}},
		{mapShape="Fully Open",countryTiles=10,cityTiles=2,coreTiles=4,rounds=4,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={12,0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="On Only", ruleStates={1, 25, 7},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			cityRules="(will pick the White and Green City first)",

			scenarioPurpose="Find the Hidden Valley and defeat the high priestess.\n\n<i>Rumors have reached the council of an Elementalist high priestess who is gathering forces. However, all the rumors tell of a long hidden valley only spoken about in legend. Even the Council of the Void have been unable to find it. Clearly there is powerful magic at work. You must locate this hidden valley and defeat the priestess before her threat becomes too great.</i>",

			scenarioEnd="When the high priestess is defeated, all players (except the Dummy player) have one last turn. If the Round ends during this, the game ends immediately."}},
	{"The Lost Relic Blitz",
		{mapShape="Open Limited to 3 Columns",countryTiles=6,cityTiles=2,coreTiles=1,rounds=2,discardTactics=0, dTW=0, cityLevels={0,0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=7,cityTiles=3,coreTiles=2,rounds=2,discardTactics=0, dTW=0, cityLevels={0,0}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=4,coreTiles=3,rounds=2,discardTactics=0, dTW=0, cityLevels={0,0,0,0}},
		{mapShape="Open Limited to 3 Columns",countryTiles=6,cityTiles=2,coreTiles=1,rounds=2,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0,0}},
		{mapShape="Open Limited to 4 Columns",countryTiles=7,cityTiles=3,coreTiles=2,rounds=2,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={0,0,0}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=4,coreTiles=3,rounds=2,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={0,0,0,0}},
		{mapShape="Fully Open",countryTiles=9,cityTiles=5,coreTiles=4,rounds=2,discardTactics=0, dTW=0, dummyTacticSelection="F",cityLevels={0,0,0,0,0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="On Only", ruleStates={1, 27, 7},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			scenarioPurpose="Find all the pieces of an ancient relic in the ruins of old cities. This scenario requires you to build a level 3 character (see Expansion Variants).\n\n<i>In years past, for reasons unknown, an ancient relic was broken into pieces and distributed between the cities.\n\nThe council wants the pieces recovered to learn the secrets they hold. However, your task will not be easy as it seems that draconum may also be drawn to the power.</i>\n\n<b>*This scenario uses the Blitz Rules minus the Starting Reputation boost. The script removes all City Only Elite units</b>",

			scenarioEnd="When all parts of the relic have been collected, all players except the Dummy player have one more turn. If the Round ends during this, the game ends immediately."}},
	{"The Gauntlet",{},{},{},
		{mapShape="Predefined",countryTiles=7,cityTiles=1,coreTiles=3,rounds=6,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={0}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={1, 1, 8},

			playerDetails="1 - Solo Only",

			countryRules="(Tile 11 not included)",
			coreRules="(will pick tiles 2, 4, 9 & 10 first)",
			cityRules="(will pick the Red City first)",

			scenarioPurpose="A solitaire game whose goal is to get to the end! Read about this Custom Scenario at:-\n\nhttps://boardgamegeek.com/thread/1212646/gauntlet-solo\n\n<i>The Council of the Void has taken note of your deeds and selected you to go on a mission to retrieve a rare artifact from the city of the desert. This city can only be reached through a long and treacherous canyon. Hurry, your time is limited!</i>",

			scenarioEnd="The game ends at the end of the turn in which you buy an artifact from the red city, or at the end of the sixth round, whichever comes first."}},
	{"Quest for the Golden Grail",{},{},{},
		{mapShape="Wedge",countryTiles=7,cityTiles=1,coreTiles=2,rounds=6,discardTactics=2, dTW=2, dummyTacticSelection="L",cityLevels={4}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Off Only", ruleStates={1, 1, 8},

			playerDetails="1 - Solo Only",

			countryRules="(four with Mage Tower or Monastery. Rest have none)",

			scenarioPurpose="Find the Golden Grail and return it to the Council of the Void. The script puts the Golden Grail at the bottom of the Artifact Deck. Read about this Custom Scenario at:-\n\nhttps://boardgamegeek.com/thread/1111580/new-scenario-quest-golden-grail\n\n<i>The Lord of the Council of the Void has been stricken by a powerful curse. The Council exerts great magics to hold him at the threshold of death, but they will soon fail. According to legend, the great prophet Solandir forged the Golden Grail in ancient times, and it had the power to heal the wounded, cure the sick, and to cleanse any curse. However, after the prophet's death the Grail was lost, its final resting place a mystery. The Council has dispatched Mage Knights to every corner of the realm to seek the Grail. Will you be the one to find it, and save the Lord of the Council?</i>",

			scenarioEnd="The player must find the Golden Grail, and return to the Portal with it in hand (it cannot be in your deed deck or discard pile). If this is completed before the end of the last round, the player wins the game."}},
	{"Ladyhawke",{},{},{},{},
		{mapShape="Predefined",countryTiles=6,cityTiles=1,coreTiles=2,rounds=5,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={11}},
		scenarioDetails={
			megapolisPossible=false, blitzPossible="Off Only", ruleStates={1, 1, 9},

			playerDetails="2 - Cooperative Only (One Male Mage and One Female)",

			countryRules="(Has two Monastery Tiles)",

			scenarioPurpose="This scenario will require some fiddling around to work properly, as it hasn't been tested thouroughy. Read about this Custom Scenario at:-\n\nhttps://boardgamegeek.com/thread/1399173/new-scenario-ladyhawke",

			scenarioEnd="This scenario ends when the Bishop is defeated, Navarre or Isabeau are knocked out within Aquila, or the eclipse is over"}},
	{"Mega Conquest",--20
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={5,6,7,8,9}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={6,7,8,9,10}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={7,8,9,10,11}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={4,5,6,7,8}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={5,6,7,8,9}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={6,7,8,9,10}},
		{mapShape="Fully Open",countryTiles=8,cityTiles=5,coreTiles=6,rounds=12,discardTactics=0, dTW=0, dummyTacticSelection="L",cityLevels={7,8,9,10,11}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Off Only", ruleStates={1, 1, 1},

			playerDetails="1 - Solo Only",

			scenarioPurpose="Created by ArthurDent\n\nThe objective of this scenario is to provide a fulfilling experience utilising most game components included in the Ultimate Edition.\n\nThe main highlight is the utilisation of all the map tiles as well as the extended duration allowing for epic scale games.\n\nWith a 12 turn duration, each player will choose each tactic only once. Record which tactics you've used\n\nCountry Tile amount is the amount of tiles that won't be mixed with the Core Tiles.\n\nUsing Tezla Monsters will place the Necropolis and Hidden Valey tiles on their terrain tiles. Unlock and remove them if just doing the cities.",

			scenarioEnd="The player(s) wins if all cities (and Leaders) are conquered before time runs out. All players (except the Dummy player) have one last turn. If the Round ends during this, the game ends immediately"}},--20
	{"Fast Forwarded Conquest",
		{mapShape="Wedge",		countryTiles=2,cityTiles=2,coreTiles=1,rounds=3,discardTactics=0, dTW=0, cityLevels={4,4}},
		{mapShape="Wedge",		countryTiles=2,cityTiles=3,coreTiles=2,rounds=3,discardTactics=0, dTW=0, cityLevels={4,4,4}},
		{mapShape="Fully Open",	countryTiles=3,cityTiles=4,coreTiles=3,rounds=3,discardTactics=0, dTW=0, cityLevels={4,4,4,4}},
		{mapShape="Wedge",		countryTiles=2,cityTiles=2,coreTiles=2,rounds=3,discardTactics=2, dTW=2, cityLevels={5,8}, 		  dummyTacticSelection="L"},
		{mapShape="Fully Open",	countryTiles=3,cityTiles=3,coreTiles=2,rounds=3,discardTactics=1, dTW=1, cityLevels={5,5,8}, 	  dummyTacticSelection="F"},
		{mapShape="Fully Open",	countryTiles=3,cityTiles=4,coreTiles=3,rounds=3,discardTactics=1, dTW=1, cityLevels={5,5,5,11},   dummyTacticSelection="F"},
		{mapShape="Fully Open",	countryTiles=3,cityTiles=5,coreTiles=3,rounds=3,discardTactics=0, dTW=0, cityLevels={5,5,5,5,11}, dummyTacticSelection="F"},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes", ruleStates={1, 1, 1},

			playerDetails="1 - Solo Only",

			scenarioPurpose="Created by Gene Selfish\n\nStandard Conquest scenario, but skipping the first couple of rounds.\n\n<i>Your task is to find and conquer all cities in three days and three nights. Each of you will be on your own, and as usual, you want to get as much Fame, knowledge, and loot as possible. Luckily for you, conquering cities is a great way to get Fame.</i>",

			scenarioEnd="When all cities are conquered, all players (including the one who conquered the last city) have one last turn, before Scoring"}},
	{"Custom",
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="L", cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F", cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F", cityLevels={5}},
		{mapShape="Wedge",countryTiles=3,cityTiles=1,coreTiles=1,rounds=6,discardTactics=0, dTW=0, dummyTacticSelection="F", cityLevels={5}},
		scenarioDetails={
			megapolisPossible=true,	blitzPossible="Yes", ruleStates={1, 1, 1},

			playerDetails="1 to 4 - Cooperative, Competitive and Solo",

			scenarioPurpose="This scenario is here as a place holder. My focus is still on getting the existing Scenarios working flawlessly. It's basically a conquest scenario without The terrain tile counts loaded. Better to leave a comment of the custom thing you want to do, and I'll see about working it in to the script",

			scenarioEnd="Up to the players to decide"}}}
	--Major Table {Scenario, 2P Comp, 3P Comp, 4P Comp, Solo, 2P Coop, 3P Coop, 4P coop}

tooltip={	["BlitzSelection"]={title="Blitz", height=290, text="Blitz will make a scenario shorter, but not nescersarily easier.\n\nThe script changes the setup by:-\n  -Adding 1 more Die to the Mana Pool.\n  -Adding 1 more Unit to the Offer.\n  -Starting players with 1 Fame\n  -Starting players at +1 Reutation\n  -Using the blitz fame board\n  -Reducing the Round Count\n  -Changing the Terrain Tile amounts\n\nIf this option has turned red it means there was no values known for the terain tiles and rounds needed. You will need to adjust them maually"},
			["volkareCampAsCity"]={title="Volkare's Camp as a Possible City", height=90, text="This just adds Volkare's Camp Terrain tile to the pool of cities that can be chosen by a scenario."},
			["randomTileOrientation"]={title="Random Terrain Tile Orientation", height=130, text="When creating the Terrain stack the script will give each tile a random rotation.\n\nThis can create some very challenging maps so should be used by experianced players"},
			["randomCities"]={title="Random Cities", height=240, text="Normally Cities have a fixed position. The White city is always by a lake next to a keep, the Red city is in a desert surrounded by dragons, etc.\n\nThats the game story, and it makes the cities different not just by their garrison and bonuses. This option randomizes the city colors. When a City terrain tile is placed, a random city color is chosen to be placed on it.\n\nIf 'Volkare's Camp as a Possible City' is chosen he will be part of the random pool"},
			["removeLostLegionExpansion"]={title="Remove Lost Legion Expansion", height=265, text="This option removes all Lost Legion:-\n  -Monster Tokens.\n  -Advanced Actions cards.\n  -Spell cards.\n  -Artifact cards.\n  -Units.\n  -Terrain Tiles\n\n*Players bonus card and skill are NOT removed*\n\nThe designer has said Lost Legion completes Mage Knight, so it really isn't necessary to select this for most players"},
			["shadesOfTezlaPugs"]={title="Include Shades of Tezla Monsters", height=150, text="This option will include the monsters and Reward Tokens from the Shades of Tezla Expansion.\n\nIf the scenario requires it, the monsters will be left in seperate piles."},
			["RampageSelection"]={title="Rampage!", height=285, text="This is a kind of side quest you may add to any scenario to spice it up.\n\nThe kingdom is under heavy raids. Terrorized people are very suspicious and do not trust anyone.\n\nPlayers start at -1 Reputation. At the end of each round, each defeated rampaging site, has a 50% chance to get a new Rampaging enemy token deployed, and a 1 in 6 chance for a brown enemy token as well.\n\nYou still get +1 Reputation for each of these enemy tokens you defeat."},
			["MoreRampageSelection"]={title="More Rampage!", height=275, text="This is a kind of side quest you may add to any scenario to spice it up.\n\nThe kingdom is under heavy raids. Terrorized people are very suspicious and do not trust anyone.\n\nPlayers start at -2 Reputation. At the end of each round, each defeated rampaging site, gets a new Rampaging enemy token deployed, and has a 50% chance for a brown enemy token as well.\n\nYou still get +1 Reputation for each of these enemy tokens you defeat."},
			["rampageAmbush"]={title="Ambushing Rampagers", height=220, text="Rampaging enemies will be Provoked if you move through two spaces that are within two hexes of them. Mountains, Lakes, and Walls block this range.\n\nThis option just adds a ring to the Rampaging tokens to illustrate the hexes that might provoke him, and allows the attack button to show up at this greater distance. (You still need to work out if you provoked them manually though.)."},
			["rampagePursuit"]={title="Pursuing Rampagers", height=375, text="Rampaging enemies will follow the Mage Knight who revealed them while exploring.\n\nOn Subsequent turns, placing the Mage Knight in a new location will move all of their pursuing monster tokens one place closer to them. (Fortified sites and other Players are avoided plus Interaction sites and Walls prevent attacks.)\n\nIf two direction are equally close a second guide arrow will indicate the alternate location you can optionally move the Rampaging token to.\n\nIf a token would move on to the Mage Knight it goes to their player board to be fought instead.\n\nPlacing the Mage Knight back where they started the turn will reset all the pursuits."},
			["startAtNight"]={title="Start at Night", height=180, text="You may start with a Night Round.\n\nNote this is more difficult: not only is it harder to use mana and travel through forests, but you also do not see who defends keeps and towers, and what dangers lurk in ruins.\n\nThe script will keep rolling mana dice until there are no Black or Gold at the Start"},
			["darknessComing"]={title="Darkness/Daylight is Coming", height=120, text="At the end of each round, virtual dice are rolled to see if the time of day should change. Once the change happens it stays at that time of day for the rest of the game"},
			["mageKnightLevels"]={title="Start at a Higher Level", height=160, text="Shades of Tezla added a variant to start players at a higher level.\n\nThis mod has an interface to assist with creating the pool of cards to select from, and then valuing the selected cards to build a fair starting deck."},
			["includeYmirgh"]={title="Add Ymirgh to the Mage Knight Pool", height=100, text="As Ymirgh is a custom character he is excluded from random selection pools, unless this is selected."},
			["weatherMod"]={title="Atlantean Weather", height=115, text="This is a custom mod from Board Game Geek made by Valgar.\n\nIt adds a weather effect to terrain tiles."},
			["questMod"]={title="Quest Cards", height=140, text="This is a custom mod from Board Game Geek made by Arne Sven, Bernardo Gonzalez and Pabula.\n\nIt adds quest cards you can collect and complete for bonuses."},
			["randomButton"]={title="Random Setup", height=300, text="A random scenario (excluding 'First Reconnaissance' and 'Custom') was chosen, and each Variant had a 3 in 10 chance of being selected. (Scenario's still overeide if they need a Variant on or off)\n\nI have experianced a buffer error when clicking this button too many times. It appears to have no affect on setup, but if you're worried reload the Mod.\n\n(Please contact me if you know this error, and can fix it for me, It's related to this Setup UI having it's dropdowns updated after each selection [setXmlTable({big table that is this interface})])"},
			["RANDOM"]={title="RANDOM", height=165, text="A Random Mage Knight will be selected from the Mage Knights still left in the standard game roster during setup (Arythea, Goldyx, Norowas, Tovak, Wolfhawk, Krang, and Braevalar).\n\nYmirgh will be added if the option above is selected."},
			["Arythea"]={title="Arythea - The Blood Cultist", height=610, text="A versatile sorceress adept at exploiting the mana source and wielding fiery attacks. She can learn to use her own wounds as a source of power and manipulate any mana to her needs.\n-------\n<i>While the origins of The Breaking are shrouded in mystery, it is spoken in hushed whispers and knowing glances that it may have been the Blood Cultists who were responsible for the cataclysm and resulting chaos that ensued.\n\nEvidence exists that the Cultists were finally successful in their ancient quest to awaken the dark god Amara who repaid his followers by unleashing his might upon the land.\n\nBelieved to be the strongest of the known Mage Knights, Arythea has emerged from the chaos more powerful than ever and she has gone forth spreading Amara's bloody gospel as she crushes her foes under her spiked heel. Under her leadership, the Blood Cultists have slipped the bonds of their former masters in the Dark Crusade and have become a power unto themselves; feared by many and respected by all.\n\nNo one knows where Arythea will strike next but one thing is certain, the bloody god Amara has directed her to participate in the Council of the Void's plans and will be pleased with her conquests and the proliferation of his teachings.</i>"},
			["Goldyx"]={title="Goldyx - Mightiest Of The Draconum", height=510, text="A lover of crystals and manipulator of mana, able to generate them en masse and use the crystals for influence and power. He can gain the ability to fly and move around the map with ease.\n-------\n<i>From the day they are hatched until the day they are killed, Draconum seek only two things: combat and evolution.\n\nAs they wander the land, Draconum look for worthy opponents strong enough to challenge their brutally honed martial abilities with only one goal in mind: personal augmentation. Draconum have never been closely tied to any one faction and since The Breaking they are even more likely to distrust others, even their own kind.\n\nAfter undergoing the 'Surge', the most powerful of Draconum evolutions, Goldyx has arisen as the mightiest of his kind. He seeks personal wealth and power and The Council of the Void has promised both beyond anything he had previously dreamed of. That his own brethren may get in his way in his current assignment only makes him more interested in the riches that lie ahead and the foes that are worthy of his attentions.</i>"},
			["Norowas"]={title="Norowas - Greatest Of The Elf-lords", height=470, text="A popular leader who can develop a soaring reputation and inspire units to his cause. He gains great loyalty from his troops and can use them to far greater effect than others.\n-------\n<i>Like all great Elven soldiers, Norowas spent centuries mastering the combat arts of both spell and sword.\n\nPrior to The Breaking, Norowas had bartered his influence with the Elvish Free Armies to consolidate a position on the High Elven Council, an organization dedicated to bringing their own brand of order to the realm by any means necessary.\n\nNorowas embraces these philosophies wholeheartedly and is not above utilizing destructive tactics to achieve his goals.\n\nHis recent contact with the Council of the Void has steeled his determination that now is the time and the Council of the Void has the means for him to venture forth and bring an end to the chaos he sees throughout the land, without mercy or hesitation.</i>"},
			["Tovak"]={title="Tovak - Head Of The Order Of The Ninth Circle", height=615, text="A no-nonsense fighter with an affinity for cold. He has versatile combat skills and strong blocking abilities, and can learn to use cards flexibly each turn to fit his circumstances.\n-------\n<i>The strongest presence left within the Order of the Ninth Circle, Tovak Wyrmstalker is less a leader of this new faction and more a force of nature to be respected and followed.\n\nOriginally the Order of the Ninth Circle sold their swords in service to other factions, but under the strong hand of Tovak Wyrmstalker they have become a force unto themselves. The more established factions in the Land are certainly beginning to take notice of the Order's actions.\n\nThe Mage Spawn that comprise the Order of the Ninth Circle are held together loosely by their common disdain for the self-proclaimed superiority that the other factions profess, and Tovak Wyrmstalker seeks nothing less than the total defeat of the other factions and their lofty aspirations of supremacy.\n\nAfter the sudden demise of the two previous heads of the Order, Tovak Wyrmstalker has embraced his new role as shepherd to the Order's cause and will not rest until all Mage Spawn are free to determine their own paths. That the Council of the Void's current plans are to conquer lands that oppress his people is all the better.</i>"},
			["Wolfhawk"]={title="Wolfhawk", height=645, text="A swift and tireless assassin who can move long distances and interfere with enemy attacks. She can learn skills to manipulate enemy abilities further, and her powers are improved when avoiding use of units.\n-------\n<i>Orphaned as a child, Wolfhawk was raised by the greatest Amazon warriors of the Cainus Mons forests. She proved to have an exceptional talent for swordsmanship joining queen Corella's army at a young age. Her heroic deeds during the Battle of Nepharus Mons did not go unnoticed and she was soon promoted to Corella's personal guard. During the next few years, Wolfhawk became one of the queen's closest and most trusted companions.\n\nWhen Wolfhawk later became oathsworn to the mysterious Solonavi, some said it was on the orders of the queen herself. Whatever the reason, Wolfhawk began to set out alone on secret missions under the cover of night. She would go for months at a time, sometimes years. It was no wonder that no one questioned it when she disappeared during The Breaking. It was assumed she had died on one of her dangerous journeys.\n\nBut now, she has returned as one of the Mage Knights. Deadlier and swifter than ever, her swords scythe through anyone getting in her way. What convinced the most loyal servant to abandon her queen and leave her oath to the Solonavi behind? We can only guess; Wolfhawk remains as silent, focused and solitary as she ever was.</i>"},
			["Krang"]={title="Krang",  height=665, text="A shaman of dark powers, who can abuse cards to gain crystals and sacrifice reputation to exert influence. He can gain cursed powers to use on enemies he faces, even turning them into his own puppets.\n-------\n<i>Krang remembers little about the time before the Breaking. Only flashes of memories, images, words here and there, and feelings of confusion and pain.\n\nThere was the time he was a chaos shaman; the memory of the magestone dust entering his lungs still lingered. There were the words of the Council of the Void imploring him to give up those ways. Individually, the words were forgotten but collectively the argument was convincing, wasn’t it? The painful memories of his purging certainly remain. He was fortunate however, as otherwise the Breaking would have destroyed him. Very fortunate.\n\nIn the years that followed, he was taught other magics by the best the Council had to offer. The most was made of his powerful Orcish frame as his blunt but effective martial skills were perfected.\n\nNow he has been sent forth to bring order to the lands of the Atlantean Empire. He has turned his back on his Orcish brethren. His true nature has been disguised from locals with help from the council, masters of deceit and trickery.\n\nFor the first time in years, he has certainty within him. This he is sure about. This he can do.</i>"},
			["Braevalar"]={title="Braevalar",  height=515, text="A druid who knows the land well, moving through it with ease and using the environment to defend and heal himself. He can learn to call upon storms of mana and travel through mountains and lakes.\n-------\n<i>Braevalar was a storm druid, a part of the Elementalists faction that is motivated by anger for those who ravage the land as much as by the desire to protect it. Disillusioned by the Elementalists’ reluctance to take the fight to their enemies, Braevalar looked for another way.\n\nHis search ended one night when a voice spoke to him from the darkness of the forest. It told him there was indeed another way for those with the will to do whatever it takes to defeat their enemies; the way of the Council of the Void.\n\nAlthough the training was hard, Braevalar never lacked determination. His cunning and knowledge of how to use the terrain around him were great assets, as were his powers over the natural world. Somewhere along the way, however, he lost sight of the importance of protecting nature and now his motivations are... unclear. He serves the Council.</i>"},
			["Ymirgh"]={title="Ymirgh",  height=230, text="A sturdy dwarven smith who suffers wounds to fuel his raging attacks. He can learn to travel through mountains and harvest crystals, and can even craft an artifact.\n-------\n<i>(This is a Custom Mage Knight designed by Dobromir Planszowy from BGG)\n\nFlavour text still required, leave me a post on the mod page if you have any creative ideas I could use.</i>"},
			["VolkareLevelSelection"]={title="Volkare's Combat Level", height=140, text="This adjusts the levels of Volkare and the City(s).\n\nChoose a higher level only if you are okay with very epic battles, and if you are experienced enough to handle them."},
			["VolkareRaceSelection"]={title="Volkare's Race Level", height=215, text="This determines how much pressure Volkare is exerting on you and how quickly you have to act.\n\nChoose a higher level if you want a tight and thrilling race, choose a lower level if you want a more easy going experiance.\n\n(It does this by altering the amount of wound cards added to Volkare's Deed Deck, and having more units marked with Crystals)"},
			["nobody"]={title="Player Positions", height=100, text="These positions align with the four positions at the bottom of the board. Position 2 is closest to the action so is the default for solo players."},
			["All Skills"]={title="Dummy Solo Variant", height=90, text="The dummy is given all the skills of the remaining Mage Knights instead of just one."}}

gameCards={	["a0a6cb"]={influence= 4, level=1, armour=3, cardType="Regular Unit",	name="Peasants", 			recruit={"village", "camp"}},
			["794e16"]={influence= 4, level=1, armour=3, cardType="Regular Unit",	name="Peasants", 			recruit={"village", "camp"}},
			["484fa3"]={influence= 4, level=1, armour=3, cardType="Regular Unit",	name="Peasants",			recruit={"village", "camp"}},
			["b8d41f"]={influence= 7, level=2, armour=4, cardType="Regular Unit",	name="Savage Monks", 		recruit={"monastery", "camp"}},
			["c10664"]={influence= 6, level=2, armour=4, cardType="Regular Unit",	name="Utem Swordsmen",		recruit={"keep", "camp"}},
			["aff9b6"]={influence= 6, level=2, armour=4, cardType="Regular Unit",	name="Utem Swordsmen",		recruit={"keep", "camp"}},
			["b33811"]={influence= 3, level=1, armour=2, cardType="Regular Unit",	name="Herbalist",			recruit={"village", "monastery", "camp"}},
			["db04a7"]={influence= 3, level=1, armour=2, cardType="Regular Unit",	name="Herbalist",			recruit={"village", "monastery", "camp"}},
			["004558"]={influence= 6, level=2, armour=4, cardType="Regular Unit",	name="Utem Crossbowmen",	recruit={"village", "keep", "camp"}},
			["506ea7"]={influence= 6, level=2, armour=4, cardType="Regular Unit",	name="Utem Crossbowmen",	recruit={"village", "keep", "camp"}},
			["84e5d3"]={influence= 7, level=2, armour=3, cardType="Regular Unit",	name="Guardian Golems",		recruit={"mage tower", "keep", "camp"}, 			resistance={"Physical"}},
			["b5500d"]={influence= 7, level=2, armour=3, cardType="Regular Unit",	name="Guardian Golems",		recruit={"mage tower", "keep", "camp"}, 			resistance={"Physical"}},
			["868e12"]={influence= 7, level=2, armour=4, cardType="Regular Unit",	name="Red Cape Monks", 		recruit={"monastery", "camp"}},
			["f17813"]={influence= 7, level=2, armour=4, cardType="Regular Unit",	name="Northern Monks", 		recruit={"monastery", "camp"}},
			["8dc143"]={influence= 7, level=2, armour=2, cardType="Regular Unit",	name="Illusionists", 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Physical"}},
			["c72d43"]={influence= 7, level=2, armour=2, cardType="Regular Unit",	name="Illusionists", 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Physical"}},
			["e8acd7"]={influence= 5, level=1, armour=4, cardType="Regular Unit",	name="Forresters", 			recruit={"village", "camp"}},
			["d55e5c"]={influence= 5, level=1, armour=4, cardType="Regular Unit",	name="Forresters", 			recruit={"village", "camp"}},
			["c1f77c"]={influence= 5, level=2, armour=5, cardType="Regular Unit",	name="Utem Guardsmen", 		recruit={"village", "keep", "camp"}},
			["00ebf3"]={influence= 5, level=2, armour=5, cardType="Regular Unit",	name="Utem Guardsmen", 		recruit={"village", "keep", "camp"}},
			["246b0d"]={influence= 4, level=1, armour=2, cardType="Regular Unit",	name="Scouts", 				recruit={"village", "keep", "mage tower", "monastery", "city", "camp"}},
			["bd1011"]={influence= 4, level=1, armour=2, cardType="Regular Unit",	name="Scouts", 				recruit={"village", "keep", "mage tower", "monastery", "city", "camp"}},
			["4339c4"]={influence= 5, level=1, armour=5, cardType="Regular Unit",	name="Thugs", 				recruit={"village", "keep", "camp"}},
			["ff2a54"]={influence= 5, level=1, armour=5, cardType="Regular Unit",	name="Thugs", 				recruit={"village", "keep", "camp"}},
			["75307e"]={influence= 6, level=2, armour=3, cardType="Regular Unit",	name="Shocktroops", 		recruit={"keep", "camp"}},
			["422b8b"]={influence= 6, level=2, armour=3, cardType="Regular Unit",	name="Shocktroops", 		recruit={"keep", "camp"}},
			["0a2e0b"]={influence= 6, level=2, armour=5, cardType="Regular Unit",	name="Magic Familiars", 	recruit={"village", "mage tower", "glade", "camp"}},
			["d8e49b"]={influence= 6, level=2, armour=5, cardType="Regular Unit",	name="Magic Familiars", 	recruit={"village", "mage tower", "glade", "camp"}},
			["9ea578"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Fire mages",	 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Fire"}},
			["f80455"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Fire mages",	 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Fire"}},
			["1aa68c"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Catapults",	 		recruit={"keep", "city", "camp"}},
			["1aa681"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Catapults",	 		recruit={"keep", "city", "camp"}},
			["d6d932"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Catapults",	 		recruit={"keep", "city", "camp"}},
			["7ba7be"]={influence= 8, level=3, armour=6, cardType="Elite Unit", 	name="Amotep Gunners",	 	recruit={"keep", "city", "camp"}},
			["f60766"]={influence= 8, level=3, armour=6, cardType="Elite Unit", 	name="Amotep Gunners",	 	recruit={"keep", "city", "camp"}},
			["d81a4f"]={influence= 8, level=3, armour=4, cardType="Elite Unit", 	name="Fire Golems",	 		recruit={"keep", "mage tower", "camp"}, 		resistance={"Physical", "Fire"}},
			["97f64a"]={influence= 8, level=3, armour=4, cardType="Elite Unit", 	name="Fire Golems",	 		recruit={"keep", "mage tower", "camp"}, 		resistance={"Physical", "Fire"}},
			["2806cf"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Ice mages",	 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Ice"}},
			["094bd9"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Ice mages",	 		recruit={"mage tower", "monastery", "camp"}, 	resistance={"Ice"}},
			["18446c"]={influence= 8, level=3, armour=4, cardType="Elite Unit", 	name="Ice Golems",	 		recruit={"keep", "mage tower", "camp"}, 		resistance={"Physical", "Ice"}},
			["c6ca7b"]={influence= 8, level=3, armour=4, cardType="Elite Unit", 	name="Ice Golems",	 		recruit={"keep", "mage tower", "camp"}, 		resistance={"Physical", "Ice"}},
			["9e8205"]={influence= 8, level=3, armour=6, cardType="Elite Unit", 	name="Amotep Freezers",		recruit={"keep", "city", "camp"}},
			["f8ebe0"]={influence= 8, level=3, armour=6, cardType="Elite Unit", 	name="Amotep Freezers",		recruit={"keep", "city", "camp"}},
			["c3e3c5"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Sorcerers",			recruit={"mage tower", "monastery", "camp"}, 	resistance={"Fire", "Ice"}},
			["223b47"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Sorcerers",			recruit={"mage tower", "monastery", "camp"}, 	resistance={"Fire", "Ice"}},
			["8ccbdd"]={influence= 9, level=3, armour=6, cardType="Elite Unit", 	name="Heroes",				recruit={"village", "keep", "city", "camp"}},
			["613dca"]={influence= 9, level=3, armour=3, cardType="Elite Unit", 	name="Heroes",				recruit={"village", "keep", "city", "camp"}, 	resistance={"Physical"}},
			["88f3f2"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Heroes",				recruit={"village", "keep", "city", "camp"}, 	resistance={"Ice"}},
			["4ee245"]={influence= 9, level=3, armour=4, cardType="Elite Unit", 	name="Heroes",				recruit={"village", "keep", "city", "camp"}, 	resistance={"Fire"}},
			["bb1660"]={influence=12, level=4, armour=5, cardType="Elite Unit",		name="Altem Mages",			recruit={"keep", "city", "camp"}, 				resistance={"Fire", "Ice"}},
			["0fe22e"]={influence=12, level=4, armour=5, cardType="Elite Unit",		name="Altem Mages",			recruit={"keep", "city", "camp"}, 				resistance={"Fire", "Ice"}},
			["f288ea"]={influence=11, level=4, armour=7, cardType="Elite Unit",		name="Altem Guardians",		recruit={"city", "camp"}},
			["5726ab"]={influence=11, level=4, armour=7, cardType="Elite Unit",		name="Altem Guardians",		recruit={"city", "camp"}},
			["f288e1"]={influence=11, level=4, armour=7, cardType="Elite Unit",		name="Altem Guardians",		recruit={"city", "camp"}},
			["9c5c38"]={influence=13, level=4, armour=3, cardType="Elite Unit",		name="Delphana Masters",	recruit={"city", "camp"},						resistance={"Physical", "Fire", "Ice"}},
			["5c2da0"]={influence=13, level=4, armour=3, cardType="Elite Unit",		name="Delphana Masters",	recruit={"city", "camp"}, 						resistance={"Physical", "Fire", "Ice"}},
			--Arythea Starting Cards
			["046141"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046140"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e881"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450554"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757b3"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757b4"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450551"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450552"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c70"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c71"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["d6ba6f"]={cardType="Starting", name="Mana Pull", color={"White"}, action={"Special"}},
			["450553"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450556"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["450555"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence"}},
			["fb481b"]={cardType="Starting", name="Battle Versatility", color={"Red"}, action={"Combat"}},
			["52efb0"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Goldyx Starting Cards
			["046143"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046142"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e882"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["7ebe5e"]={cardType="Starting", name="Crystal Joy", color={"Blue"}, action={"Special"}},
			["9757b6"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757b5"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450557"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["acd316"]={cardType="Starting", name="Will FOcus", color={"Green"}, action={"Special"}},
			["2f1c73"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c72"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450572"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450558"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450561"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["450560"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence"}},
			["52efb2"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52efb1"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Norowas Starting Cards
			["046145"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046144"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e883"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450564"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757b7"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757b8"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["c9c0f4"]={cardType="Starting", name="Rejuvenate", color={"Green"}, action={"Heal"}},
			["450562"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c74"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c75"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450563"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["eaaaa5"]={cardType="Starting", name="Noble Promise", color={"White"}, action={"Influence"}},
			["450566"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["450565"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence"}},
			["52efb3"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52efb4"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Tovak Starting Cards
			["046146"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046147"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["79bfbd"]={cardType="Starting", name="Cold Toughness", color={"Blue"}, action={"Combat"}},
			["450571"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757c1"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757b9"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450567"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450568"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c76"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c77"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450570"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450569"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["1a8e96"]={cardType="Starting", name="Instinct", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["450550"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence"}},
			["52efb5"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52efb6"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Braevelar Starting Cards
			["046150"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["d54e79"]={cardType="Starting", name="Druidic Paths", color={"Blue"}, action={"Move"}},
			["b9e885"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450584"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757c3"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["c137e0"]={cardType="Starting", name="One with the Land", color={"Green"}, action={"Move", "Heal", "Combat"}},
			["450580"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450581"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c80"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c81"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450583"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450582"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450586"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["450585"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence"}},
			["52ef10"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52efb9"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Krang Starting Cards
			["046148"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046149"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e884"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450578"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757c2"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450573"]={cardType="Starting", name="Savage Harvesting", color={"Green"}, action={"Move", "Special"}},
			["450574"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450575"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c78"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c79"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450577"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450576"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450579"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Move", "Combat", "Influence"}},
			["0b90e5"]={cardType="Starting", name="Ruthless Coercion", color={"Red"}, action={"Influence", "Heal"}},
			["52efb7"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52efb8"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Wolfhawk Starting Cards
			["046153"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["62731d"]={cardType="Starting", name="Tirelessness", color={"Blue"}, action={"Move"}},
			["b9e887"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450598"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757c7"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757c6"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450594"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450595"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c83"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["092938"]={cardType="Starting", name="Swift Reflexes", color={"White"}, action={"Move", "Combat"}},
			["450597"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450596"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450600"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Influence"}},
			["450599"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence", "Heal"}},
			["52ef13"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52ef12"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			--Ymirgh Starting Cards
			["046151"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046152"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e886"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450591"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757c5"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757c4"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450587"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["450588"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c82"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["fb1a18"]={cardType="Starting", name="Axe Throw", color={"White"}, action={"Move", "Combat"}},
			["450590"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450589"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450593"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Influence"}},
			["450592"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence", "Heal"}},
			["52ef11"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["49f6ed"]={cardType="Starting", name="Battle Rage", color={"Red"}, action={"Combat"}},
			--Volkare Starting Cards
			["046154"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["046155"]={cardType="Starting", name="Stamina", color={"Blue"}, action={"Move"}},
			["b9e888"]={cardType="Starting", name="Determination", color={"Blue"}, action={"Combat"}},
			["450604"]={cardType="Starting", name="Crystalize", color={"Blue"}, action={"Special"}},
			["9757b1"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["9757b2"]={cardType="Starting", name="March", color={"Green"}, action={"Move"}},
			["450601"]={cardType="Starting", name="Tranquility", color={"Green"}, action={"Heal"}},
			["26a225"]={cardType="Starting", name="Concentration", color={"Green"}, action={"Special"}},
			["2f1c84"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["2f1c85"]={cardType="Starting", name="Swiftness", color={"White"}, action={"Move", "Combat"}},
			["450603"]={cardType="Starting", name="Mana Draw", color={"White"}, action={"Special"}},
			["450602"]={cardType="Starting", name="Promise", color={"White"}, action={"Influence"}},
			["450610"]={cardType="Starting", name="Improvisation", color={"Red"}, action={"Influence"}},
			["450606"]={cardType="Starting", name="Threaten", color={"Red"}, action={"Influence", "Heal"}},
			["52ef15"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["52ef14"]={cardType="Starting", name="Rage", color={"Red"}, action={"Combat"}},
			["2eb8f1"]={cardType="Spell", name={"Mana Claim", "Mana Curse"}, color={"Blue"}, action={"Special"}},
			["2eb8f0"]={cardType="Spell", name={"Energy Flow", "Energy Steal"}, color={"Green"}, action={"Heal"}},
			["2eb8f2"]={cardType="Spell", name={"Mind Read", "Mind Steal"}, color={"White"}, action={"Special"}},
			["8907d1"]={cardType="Spell", name={"Mana Meltdown", "Mana Radiance"}, color={"Red"}, action={"Special"}},
			["878d85"]={cardType="Advanced Action", name="Ice Shield", 			color={"Blue"}, 		action={"Combat"}},
			["878d87"]={cardType="Advanced Action", name="Frost Bridge", 		color={"Blue"}, 		action={"Move"}},
			["878d89"]={cardType="Advanced Action", name="Pure Magic", 			color={"Blue"}, 		action={"Move", "Combat", "Influence"}},
			["878d81"]={cardType="Advanced Action", name="Ice Bolt", 			color={"Blue"}, 		action={"Combat", "Special"}},
			["87bc59"]={cardType="Advanced Action", name="Spell Forge", 		color={"Blue"}, 		action={"Special"}},
			["878d94"]={cardType="Advanced Action", name="Temporal Portal",		color={"Blue"}, 		action={"Action"}},
			["878d93"]={cardType="Advanced Action", name="Shield Bash", 		color={"Blue"}, 		action={"Combat"}},
			["1f362f"]={cardType="Advanced Action", name="Steady Tempo", 		color={"Blue"}, 		action={"Move"}},
			["885b96"]={cardType="Advanced Action", name="Crystal Mastery",		color={"Blue"}, 		action={"Special"}},
			["3d832c"]={cardType="Advanced Action", name="Magic Talent", 		color={"Blue"}, 		action={"Special"}},
			["878d91"]={cardType="Advanced Action", name="Regeneration", 		color={"Green"}, 		action={"Heal"}},
			["00c614"]={cardType="Advanced Action", name="Path Finding", 		color={"Green"}, 		action={"Move"}},
			["878d83"]={cardType="Advanced Action", name="Crushing Bolt", 		color={"Green"}, 		action={"Combat", "Special"}},
			["33bc9b"]={cardType="Advanced Action", name="Refreshing Walk",		color={"Green"}, 		action={"Move", "Heal"}},
			["474418"]={cardType="Advanced Action", name="Force of Nature",		color={"Green"}, 		action={"Combat"}},
			["54b5c4"]={cardType="Advanced Action", name="Stout Resolve", 		color={"Green"}, 		action={"Move", "Combat", "Influence"}},
			["d3995b"]={cardType="Advanced Action", name="Mountain Lore", 		color={"Green"}, 		action={"Move"}},
			["6fdeb0"]={cardType="Advanced Action", name="Training",			color={"Green"}, 		action={"Special"}},
			["c3153e"]={cardType="Advanced Action", name="In Need", 			color={"Green"}, 		action={"Influence"}},
			["20cb85"]={cardType="Advanced Action", name="Ambush", 				color={"Green"}, 		action={"Move"}},--I want to add combat
			["878d88"]={cardType="Advanced Action", name="Song of Wind", 		color={"White"}, 		action={"Move"}},
			["8c3de6"]={cardType="Advanced Action", name="Diplomacy", 			color={"White"}, 		action={"Combat", "Influence"}},
			["878d82"]={cardType="Advanced Action", name="Swift Bolt", 			color={"White"}, 		action={"Combat", "Special"}},
			["878d90"]={cardType="Advanced Action", name="Heroic Tale", 		color={"White"}, 		action={"Influence"}},
			["8122c2"]={cardType="Advanced Action", name="Peaceful Moment",		color={"White"}, 		action={"Action", "Influence"}},
			["9de475"]={cardType="Advanced Action", name="Dodge and Weave",		color={"White"}, 		action={"Combat"}},
			["42eb53"]={cardType="Advanced Action", name="Chivalry",	 		color={"White"}, 		action={"Combat"}},
			["35aee6"]={cardType="Advanced Action", name="Learning",			color={"White"}, 		action={"Special", "Influence"}},
			["e2b570"]={cardType="Advanced Action", name="Mana Storm",			color={"White"}, 		action={"Special"}},
			["878d92"]={cardType="Advanced Action", name="Agility",	 			color={"White"}, 		action={"Move", "Combat"}},
			["8eccb3"]={cardType="Advanced Action", name="Blood Ritual", 		color={"Red"}, 			action={"Special"}},
			["878d86"]={cardType="Advanced Action", name="Intimidate", 			color={"Red"}, 			action={"Combat", "Influence"}},
			["878d80"]={cardType="Advanced Action", name="Fire Bolt",	 		color={"Red"}, 			action={"Combat", "Special"}},
			["878d84"]={cardType="Advanced Action", name="Blood Rage", 			color={"Red"}, 			action={"Combat"}},
			["05ef61"]={cardType="Advanced Action", name="Ritual Attack", 		color={"Red"}, 			action={"Combat"}},
			["93b7d4"]={cardType="Advanced Action", name="Blood of Ancients",	color={"Red"}, 			action={"Special"}},
			["65a1d5"]={cardType="Advanced Action", name="Counterattack", 		color={"Red"}, 			action={"Combat"}},
			["8fac50"]={cardType="Advanced Action", name="Maximal Effect", 		color={"Red"}, 			action={"Special"}},
			["bb05a9"]={cardType="Advanced Action", name="Into the Heat",		color={"Red"}, 			action={"Combat"}},
			["d74999"]={cardType="Advanced Action", name="Decompose", 			color={"Red"}, 			action={"Special"}},
			["1a1c02"]={cardType="Advanced Action", name="Explosive Bolt", 		color={"White","Red"}, 	action={"Combat"}},
			["409fe8"]={cardType="Advanced Action", name="Chilling Stare", 		color={"Blue","White"},	action={"Combat", "Influence"}},
			["d75285"]={cardType="Advanced Action", name="Rush of Adrenaline",	color={"Red","Green"}, 	action={"Special"}},
			["141527"]={cardType="Advanced Action", name="Power of Crystals", 	color={"Green","Blue"},	action={"Special", "Move", "Heal"}},
			["8907d7"]={cardType="Spell", name={"Mana Meltdown", "Mana Radiance"}, color={"Red"}, action={"Special"}},
			["2eb8d9"]={cardType="Spell", name={"Offering", "Sacrafice"}, color={"Red"}, action={"Special", "Combat"}},
			["2eb8d4"]={cardType="Spell", name={"Demolish", "Desintegrate"}, color={"Red"}, action={"Combat"}},
			["2eb8d6"]={cardType="Spell", name={"Fireball", "Firestorm"}, color={"Red"}, action={"Combat"}},
			["2eb8d7"]={cardType="Spell", name={"Burning Shield", "Exploding Shield"}, color={"Red"}, action={"Combat"}},
			["2eb8d8"]={cardType="Spell", name={"Flame Wall", "Flame Wave"}, color={"Red"}, action={"Combat"}},
			["2eb8f4"]={cardType="Spell", name={"Mana Claim", "Mana Curse"}, color={"Blue"}, action={"Special"}},
			["2eb8e1"]={cardType="Spell", name={"Mist Form", "Veil of Mist"}, color={"Blue"}, action={"Move", "Combat"}},
			["2eb8e3"]={cardType="Spell", name={"Mana Bolt", "Mana Thunderbolt"}, color={"Blue"}, action={"Combat"}},
			["2eb8e4"]={cardType="Spell", name={"Snowstorm", "Blizzard"}, color={"Blue"}, action={"Combat"}},
			["2eb8e0"]={cardType="Spell", name={"Chill", "Lethal Chill"}, color={"Blue"}, action={"Combat"}},
			["2eb8e2"]={cardType="Spell", name={"Space Bending", "Time Bending"}, color={"Blue"}, action={"Move", "Special"}},
			["2eb8f5"]={cardType="Spell", name={"Mind Read", "Mind Steal"}, color={"White"}, action={"Special"}},
			["2eb8e6"]={cardType="Spell", name={"Charm", "Possess"}, color={"White"}, action={"Influence", "Combat"}},
			["2eb8e9"]={cardType="Spell", name={"Wings of Wind", "Wings of Night"}, color={"White"}, action={"Move", "Combat"}},
			["2eb8e5"]={cardType="Spell", name={"Expose", "Mass Expose"}, color={"White"}, action={"Combat"}},
			["2eb8e8"]={cardType="Spell", name={"Call to Arms", "Call to Glory"}, color={"White"}, action={"Special"}},
			["2eb8e7"]={cardType="Spell", name={"Whirlwind", "Tornado"}, color={"White"}, action={"Combat"}},
			["2eb8f3"]={cardType="Spell", name={"Energy Flow", "Energy Steal"}, color={"Green"}, action={"Heal"}},
			["47e71c"]={cardType="Spell", name={"Cure", "Disease"}, color={"Green"}, action={"Heal", "Combat"}},
			["2eb8d3"]={cardType="Spell", name={"Restoration", "Rebirth"}, color={"Green"}, action={"Heal"}},
			["2eb8d2"]={cardType="Spell", name={"Underground Travel", "Underground Attack"}, color={"Green"}, action={"Move"}},
			["2eb8d1"]={cardType="Spell", name={"Tremor", "Earthquake"}, color={"Green"}, action={"Combat"}},
			["2eb8d0"]={cardType="Spell", name={"Meditation", "Trance"}, color={"Green"}, action={"Special"}},
			["085e51"]={cardType="Artifact", name="Ruby Ring", color={}, action={"Special"}},
			["085e54"]={cardType="Artifact", name="Emerald Ring", color={}, action={"Special"}},
			["085e53"]={cardType="Artifact", name="Diamond Ring", color={}, action={"Special"}},
			["085e52"]={cardType="Artifact", name="Saphire Ring", color={}, action={"Special"}},
			["085e58"]={cardType="Artifact", name="Endless Gem Pouch", color={}, action={"Special"}},
			["085e55"]={cardType="Artifact", name="Swords of Justice", color={}, action={"Combat"}},
			["085e67"]={cardType="Artifact", name="Circlet of Proficiency", color={}, action={"Special"}},
			["085e69"]={cardType="Artifact", name="Mysterious Box", color={}, action={"Special"}},
			["085e56"]={cardType="Artifact", name="Horn of Wrath", color={}, action={"Combat"}},
			["085e57"]={cardType="Artifact", name="Endless Bag of GOld", color={}, action={"Influence"}},
			["085e68"]={cardType="Artifact", name="Tome of All Spells", color={}, action={"Special"}},
			["085e66"]={cardType="Artifact", name="Druidic Staff", color={}, action={"Special", "Move", "Heal"}},
			["085e64"]={cardType="Artifact", name="Soul Harvester", color={}, action={"Combat"}},
			["7b9ec1"]={cardType="Artifact", name="Banner of Fear", color={}, action={"Combat", "Banner"}},
			["6b4654"]={cardType="Artifact", name="Banner of Courage", color={}, action={"Influence", "Banner"}},
			["085e50"]={cardType="Artifact", name="Banner of GLory", color={}, action={"Combat", "Banner"}},
			["df2eae"]={cardType="Artifact", name="Banner of Protection", color={}, action={"Combat", "Banner"}},
			["7d608f"]={cardType="Artifact", name="Banner of Fortidude", color={}, action={"Heal", "Banner"}},
			["98681f"]={cardType="Artifact", name="Banner of Command", color={}, action={"Influence", "Banner"}},
			["085e62"]={cardType="Artifact", name="Amulet of Darkness", color={}, action={"Special"}},
			["085e61"]={cardType="Artifact", name="Amulet of The Sun", color={}, action={"Special"}},
			["085e59"]={cardType="Artifact", name="Golden Grail", color={}, action={"Heal"}},
			["085e63"]={cardType="Artifact", name="Bow of Syarsdawn", color={}, action={"Combat"}},
			["085e60"]={cardType="Artifact", name="Book of Wisdom", color={}, action={"Special"}},
			["085e65"]={cardType="Artifact", name="Shield of the Fallen Kings", color={}, action={"Combat"}}
		}

terrainTiles={	["722590"]={tileType="starting", tileNumber=0,
					hexType=	{center="plains", ["0"]="ocean", ["60"]="ocean", ["120"]="ocean", ["180"]="plains", ["240"]="forest", ["300"]="plains"},
					hexFeature=	{center="portal", ["0"]="", ["60"]="", ["120"]="", ["180"]="", ["240"]="", ["300"]=""}},
				["5d0bac"]={tileType="starting", tileNumber=0,
					hexType=	{center="plains", ["0"]="ocean", ["60"]="ocean", ["120"]="plains", ["180"]="plains", ["240"]="forest", ["300"]="plains"},
					hexFeature=	{center="portal", ["0"]="", ["60"]="", ["120"]="", ["180"]="", ["240"]="", ["300"]=""}},
				["e2ecf8"]={tileType="country", tileNumber=1,
					hexType=	{center="forest", ["0"]="forest", ["60"]="plains", ["120"]="plains", ["180"]="plains", ["240"]="lake", ["300"]="forest"},
					hexFeature=	{center="glade", ["0"]="", ["60"]="", ["120"]="", ["180"]="village", ["240"]="", ["300"]="rampaging"}},
				["ca8ad3"]={tileType="country", tileNumber=2,
					hexType=	{center="hills", ["0"]="plains", ["60"]="hills", ["120"]="plains", ["180"]="plains", ["240"]="forest", ["300"]="hills"},
					hexFeature=	{center="", ["0"]="", ["60"]="mine green", ["120"]="", ["180"]="village", ["240"]="glade", ["300"]="rampaging"}},
				["a501d6"]={tileType="country", tileNumber=3,
					hexType=	{center="forest", ["0"]="plains", ["60"]="plains", ["120"]="hills", ["180"]="hills", ["240"]="hills", ["300"]="plains"},
					hexFeature=	{center="", ["0"]="", ["60"]="village", ["120"]="mine white", ["180"]="", ["240"]="keep", ["300"]=""}},
				["a26c4f"]={tileType="country", tileNumber=4,
					hexType=	{center="desert", ["0"]="hills", ["60"]="plains", ["120"]="plains", ["180"]="mountain", ["240"]="desert", ["300"]="desert"},
					hexFeature=	{center="mage tower", ["0"]="rampaging", ["60"]="", ["120"]="village", ["180"]="", ["240"]="", ["300"]=""}},
				["184fb7"]={tileType="country", tileNumber=5,
					hexType=	{center="lake", ["0"]="forest", ["60"]="forest", ["120"]="hills", ["180"]="plains", ["240"]="plains", ["300"]="forest"},
					hexFeature=	{center="", ["0"]="glade", ["60"]="", ["120"]="mine blue", ["180"]="rampaging", ["240"]="monastery", ["300"]=""}},
				["208d84"]={tileType="country", tileNumber=6,
					hexType=	{center="hills", ["0"]="hills", ["60"]="hills", ["120"]="forest", ["180"]="plains", ["240"]="forest", ["300"]="mountain"},
					hexFeature=	{center="mine red", ["0"]="monster den", ["60"]="", ["120"]="rampaging", ["180"]="", ["240"]="", ["300"]=""}},
				["20607e"]={tileType="country", tileNumber=7,
					hexType=	{center="swamp", ["0"]="plains", ["60"]="plains", ["120"]="plains", ["180"]="forest", ["240"]="forest", ["300"]="lake"},
					hexFeature=	{center="", ["0"]="monastery", ["60"]="", ["120"]="dungeon", ["180"]="glade", ["240"]="rampaging", ["300"]=""}},
				["78fc79"]={tileType="country", tileNumber=8,
					hexType=	{center="swamp", ["0"]="forest", ["60"]="swamp", ["120"]="swamp", ["180"]="plains", ["240"]="forest", ["300"]="forest"},
					hexFeature=	{center="rampaging", ["0"]="", ["60"]="", ["120"]="village", ["180"]="", ["240"]="ruin", ["300"]="glade"}},
				["05b612"]={tileType="country", tileNumber=9,
					hexType=	{center="mountain", ["0"]="plains", ["60"]="wasteland", ["120"]="plains", ["180"]="wasteland", ["240"]="mountain", ["300"]="wasteland"},
					hexFeature=	{center="", ["0"]="", ["60"]="mage tower", ["120"]="", ["180"]="keep", ["240"]="", ["300"]="dungeon"}},
				["6510ac"]={tileType="country", tileNumber=10,
					hexType=	{center="mountain", ["0"]="hills", ["60"]="hills", ["120"]="hills", ["180"]="plains", ["240"]="forest", ["300"]="hills"},
					hexFeature=	{center="", ["0"]="", ["60"]="keep", ["120"]="ruin", ["180"]="", ["240"]="", ["300"]="monster den"}},
				["d21095"]={tileType="country", tileNumber=11,
					hexType=	{center="plains", ["0"]="plains", ["60"]="lake", ["120"]="hills", ["180"]="lake", ["240"]="lake", ["300"]="hills"},
					hexFeature=	{center="mage tower", ["0"]="ruin", ["60"]="", ["120"]="rampaging", ["180"]="", ["240"]="", ["300"]=""}},
				["29a93c"]={tileType="country", tileNumber=12,
					hexType=	{center="plains", ["0"]="hills", ["60"]="plains", ["120"]="mountain", ["180"]="hills", ["240"]="swamp", ["300"]="mountain"},
					hexFeature=	{center="rampaging", ["0"]="camp", ["60"]="maze", ["120"]="", ["180"]="monastery", ["240"]="", ["300"]=""},
					wallList=	{center={["0"]=1, ["60"]=1, ["180"]=1}, ["0"]={["center"]=1}, ["60"]={["center"]=1}, ["180"]={["center"]=1}}},
				["0bf020"]={tileType="country", tileNumber=13,
					hexType=	{center="forest", ["0"]="swamp", ["60"]="plains", ["120"]="forest", ["180"]="lake", ["240"]="hills", ["300"]="forest"},
					hexFeature=	{center="mage tower", ["0"]="glade", ["60"]="", ["120"]="mine", ["180"]="", ["240"]="rampaging", ["300"]=""},
					wallList=	{center={["240"]=1}, ["240"]={["center"]=1, ["300"]=1}, ["300"]={["240"]=1}}},
				["7ce33f"]={tileType="country", tileNumber=14,
					hexType=	{center="plains", ["0"]="desert", ["60"]="plains", ["120"]="hills", ["180"]="wasteland", ["240"]="plains", ["300"]="desert"},
					hexFeature=	{center="", ["0"]="mine", ["60"]="", ["120"]="village", ["180"]="maze", ["240"]="keep", ["300"]=""},
					wallList=	{center={["240"]=1}, ["240"]={["center"]=1}}},
				["584237"]={tileType="core", tileNumber=1,
					hexType=	{center="desert", ["0"]="hills", ["60"]="hills", ["120"]="desert", ["180"]="desert", ["240"]="desert", ["300"]="mountain"},
					hexFeature=	{center="monastery", ["0"]="spawning grounds", ["60"]="", ["120"]="", ["180"]="", ["240"]="tomb", ["300"]=""}},
				["155a31"]={tileType="core", tileNumber=2,
					hexType=	{center="lake", ["0"]="forest", ["60"]="swamp", ["120"]="swamp", ["180"]="hills", ["240"]="swamp", ["300"]="lake"},
					hexFeature=	{center="", ["0"]="", ["60"]="mage tower", ["120"]="draconum", ["180"]="mine green", ["240"]="ruin", ["300"]=""}},
				["be86ec"]={tileType="core", tileNumber=3,
					hexType=	{center="wasteland", ["0"]="wasteland", ["60"]="hills", ["120"]="wasteland", ["180"]="hills", ["240"]="wasteland", ["300"]="mountain"},
					hexFeature=	{center="", ["0"]="tomb", ["60"]="mine white", ["120"]="", ["180"]="mage tower", ["240"]="ruin", ["300"]=""}},
				["264fa0"]={tileType="core", tileNumber=4,
					hexType=	{center="mountain", ["0"]="wasteland", ["60"]="wasteland", ["120"]="wasteland", ["180"]="wasteland", ["240"]="hills", ["300"]="hills"},
					hexFeature=	{center="draconum", ["0"]="", ["60"]="ruin", ["120"]="", ["180"]="keep", ["240"]="", ["300"]="mine blue"}},
				["314081"]={tileType="core", tileNumber=5,
					hexType=	{center="swamp", ["0"]="lake", ["60"]="forest", ["120"]="swamp", ["180"]="swamp", ["240"]="swamp", ["300"]="forest"},
					hexFeature=	{center="city green", ["0"]="", ["60"]="rampaging", ["120"]="", ["180"]="rampaging", ["240"]="village", ["300"]="glade"}},
				["63f201"]={tileType="core", tileNumber=6,
					hexType=	{center="plains", ["0"]="mountain", ["60"]="hills", ["120"]="lake", ["180"]="lake", ["240"]="plains", ["300"]="forest"},
					hexFeature=	{center="city blue", ["0"]="draconum", ["60"]="", ["120"]="", ["180"]="", ["240"]="monastery", ["300"]=""}},
				["a3ce11"]={tileType="core", tileNumber=7,
					hexType=	{center="plains", ["0"]="wasteland", ["60"]="lake", ["120"]="lake", ["180"]="forest", ["240"]="plains", ["300"]="wasteland"},
					hexFeature=	{center="city white", ["0"]="keep", ["60"]="", ["120"]="draconum", ["180"]="", ["240"]="", ["300"]="spawning grounds"}},
				["53d847"]={tileType="core", tileNumber=8,
					hexType=	{center="desert", ["0"]="wasteland", ["60"]="wasteland", ["120"]="desert", ["180"]="desert", ["240"]="hills", ["300"]="desert"},
					hexFeature=	{center="city red", ["0"]="draconum", ["60"]="", ["120"]="draconum", ["180"]="", ["240"]="mine red", ["300"]="ruin"}},
				["cff250"]={tileType="core", tileNumber=9,
					hexType=	{center="plains", ["0"]="wasteland", ["60"]="desert", ["120"]="desert", ["180"]="mountain", ["240"]="hills", ["300"]="hills"},
					hexFeature=	{center="draconum", ["0"]="", ["60"]="", ["120"]="camp", ["180"]="", ["240"]="mage tower", ["300"]="labyrinth"},
					wallList=	{center={["0"]=1, ["60"]=1, ["120"]=1}, ["0"]={["center"]=1, ["300"]=1}, ["60"]={["center"]=1}, ["120"]={["center"]=1, ["180"]=1}, ["180"]={["120"]=1}, ["300"]={["0"]=1}}},
				["de7fad"]={tileType="core", tileNumber=10,
					hexType=	{center="swamp", ["0"]="forest", ["60"]="hills", ["120"]="hills", ["180"]="forest", ["240"]="lake", ["300"]="swamp"},
					hexFeature=	{center="", ["0"]="keep", ["60"]="rampaging", ["120"]="rampaging", ["180"]="labyrinth", ["240"]="", ["300"]="mine"}},
				["835c91"]={tileType="core", tileNumber=11,
					hexType=	{center="plains", ["0"]="lake", ["60"]="hills", ["120"]="desert", ["180"]="wasteland", ["240"]="mountain", ["300"]="forest"},
					hexFeature=	{center="Volkare's Camp", ["0"]="", ["60"]="", ["120"]="village", ["180"]="draconum", ["240"]="", ["300"]="rampaging"},
					wallList=	{center={["60"]=1, ["120"]=1}, ["60"]={["center"]=1}, ["120"]={["center"]=1, ["180"]=1}, ["180"]={["120"]=1}}},
				["966e0e"]={tileType="tilePile", tileNumber=0,
					hexType=	{center="", ["0"]="", ["60"]="", ["120"]="", ["180"]="", ["240"]="", ["300"]=""},
					hexFeature=	{center="", ["0"]="", ["60"]="", ["120"]="", ["180"]="", ["240"]="", ["300"]=""}}}
				--the numbers indicate the hex position
				--0   = left most hex
				--60  = lower left hex
				--120 = lower right hex
				--180 = right most hex
				--270 = upper right hex
				--300 = upper right hex

monsterPugs={	["0d8843"]={name="Diggers", 				pugType="green", fame=2},
				["121735"]={name="Diggers", 				pugType="green", fame=2},
				["660062"]={name="Cursed Hags", 			pugType="green", fame=3},
				["b6325d"]={name="Cursed Hags", 			pugType="green", fame=3},
				["51cc92"]={name="Ironclads",				pugType="green", fame=4},
				["fdb0f8"]={name="Ironclads",				pugType="green", fame=4},
				["dac25d"]={name="Prowlers",				pugType="green", fame=2},
				["b81b57"]={name="Prowlers",				pugType="green", fame=2},
				["d54270"]={name="Wolf Riders",				pugType="green", fame=3},
				["2cfae9"]={name="Wolf Riders",				pugType="green", fame=3},
				["0a3564"]={name="Orc Summoners",			pugType="green", fame=4, monsters={"tan"}},
				["b4166c"]={name="Orc Summoners",			pugType="green", fame=4, monsters={"tan"}},
				["8efc20"]={name="Elemental Priestesses",	pugType="green", fame=3, reward=1, faction="Elem"},
				["a04726"]={name="Cloud Griffons",			pugType="green", fame=3, reward=1, faction="Elem"},
				["64b218"]={name="Elven Protectors",		pugType="green", fame=2, reward=1, faction="Elem"},
				["adec2a"]={name="Elven Protectors",		pugType="green", fame=2, reward=1, faction="Elem"},
				["f87e31"]={name="Centaur Outriders",		pugType="green", fame=2, reward=1, faction="Elem"},
				["e9911f"]={name="Centaur Outriders",		pugType="green", fame=2, reward=1, faction="Elem"},
				["60e427"]={name="Crystal Sprites",			pugType="green", fame=1, reward=1, faction="Elem"},
				["698828"]={name="Crystal Sprites",			pugType="green", fame=1, reward=1, faction="Elem"},
				["0c5f4d"]={name="Corrupt Priests",			pugType="green", fame=3, reward=1, faction="Dark"},
				["565ecd"]={name="Shrouded Necromancers",	pugType="green", fame=3, reward=1, faction="Dark", monsters={"green"}},
				["f85b1e"]={name="Gibbering Ghouls",		pugType="green", fame=2, reward=1, faction="Dark"},
				["f87e33"]={name="Gibbering Ghouls",		pugType="green", fame=2, reward=1, faction="Dark"},
				["698829"]={name="Zombiw Horde",			pugType="green", fame=2, reward=1, faction="Dark"},
				["d549a5"]={name="Zombiw Horde",			pugType="green", fame=2, reward=1, faction="Dark"},
				["39d58e"]={name="Skeletal Warriors",		pugType="green", fame=1, reward=1, faction="Dark"},
				["8efc22"]={name="Skeletal Warriors",		pugType="green", fame=1, reward=1, faction="Dark"},
				["0cc1e5"]={name="Ork Tracker",				pugType="green", fame=3},
				["28bc08"]={name="Ork Tracker",				pugType="green", fame=3},
				["8ffd9e"]={name="Ork Skirmishers",			pugType="green", fame=2},
				["e17886"]={name="Ork Skirmishers",			pugType="green", fame=2},
				["994ee9"]={name="Ork Stonethrower",		pugType="green", fame=4},
				["f0d27a"]={name="Ork Stonethrower",		pugType="green", fame=4},
				["30df98"]={name="Ork War Beasts",			pugType="green", fame=3},
				["643901"]={name="Ork War Beasts",			pugType="green", fame=3},
				["0ccadf"]={name="Swamp Dragon",			pugType="red", fame=7},
				["5c6b9d"]={name="Swamp Dragon",			pugType="red", fame=7},
				["ba9237"]={name="High Dragon",				pugType="red", fame=9},
				["87588b"]={name="High Dragon",				pugType="red", fame=9},
				["ae960a"]={name="Ice Dragon",				pugType="red", fame=8},
				["fa9303"]={name="Ice Dragon",				pugType="red", fame=8},
				["bad465"]={name="Fire Dragon",				pugType="red", fame=8},
				["58bab2"]={name="Fire Dragon",				pugType="red", fame=8},
				["c77902"]={name="Vampire Dragon",			pugType="red", fame=7, reward=1, faction="Dark"},
				["342ed4"]={name="Vampire Dragon",			pugType="red", fame=7, reward=1, faction="Dark"},
				["f87e32"]={name="Death Dragon",			pugType="red", fame=6, reward=1, faction="Dark"},
				["0d0645"]={name="Death Dragon",			pugType="red", fame=6, reward=1, faction="Dark"},
				["c77901"]={name="Savage Dragon",			pugType="red", fame=6, reward=1, faction="Elem"},
				["6cad42"]={name="Savage Dragon",			pugType="red", fame=6, reward=1, faction="Elem"},
				["5d4e06"]={name="Lightning Dragon",		pugType="red", fame=7, reward=1, faction="Elem"},
				["f87e39"]={name="Lightning Dragon",		pugType="red", fame=7, reward=1, faction="Elem"},
				["80d998"]={name="Dragon Summoner",			pugType="red", fame=9, monsters={"tan", "tan"}},
				["17bcd9"]={name="Dragon Summoner",			pugType="red", fame=9, monsters={"tan", "tan"}},
				["09ec72"]={name="Storm Dragon",			pugType="red", fame=7},
				["b7dca2"]={name="Storm Dragon",			pugType="red", fame=7},
				["9156c4"]={name="Lava Dragon",				pugType="red", fame=8},
				["be5c5e"]={name="Lava Dragon",				pugType="red", fame=8},
				["e44ea9"]={name="Gargoyle",				pugType="tan", fame=4},
				["4bdd51"]={name="Gargoyle",				pugType="tan", fame=4},
				["8efc21"]={name="Crypt Worm",				pugType="tan", fame=5},
				["c3e76d"]={name="Crypt Worm",				pugType="tan", fame=5},
				["ff0e71"]={name="Werewolf",				pugType="tan", fame=5},
				["8c1f38"]={name="Werewolf",				pugType="tan", fame=5},
				["0e09fd"]={name="Minotaur",				pugType="tan", fame=4},
				["548e0d"]={name="Minotaur",				pugType="tan", fame=4},
				["e9a28d"]={name="Medusa",					pugType="tan", fame=5},
				["f69dfa"]={name="Medusa",					pugType="tan", fame=5},
				["863ba2"]={name="Blood Demon",				pugType="tan", fame=5, reward=1, faction="Dark"},
				["558de0"]={name="Pain Wraith",				pugType="tan", fame=3, reward=1, faction="Dark"},
				["013cb2"]={name="Vampire",					pugType="tan", fame=4, reward=1, faction="Dark"},
				["61eb06"]={name="Mummy",					pugType="tan", fame=4, reward=1, faction="Dark"},
				["00c4da"]={name="Air Elemental",			pugType="tan", fame=4, reward=1, faction="Elem"},
				["863bab"]={name="Fire Elemental",			pugType="tan", fame=4, reward=1, faction="Elem"},
				["013cb3"]={name="Water Elemental",			pugType="tan", fame=4, reward=1, faction="Elem"},
				["61eb07"]={name="Earth Elemental",			pugType="tan", fame=4, reward=1, faction="Elem"},
				["277cd2"]={name="Shadow",					pugType="tan", fame=4},
				["558de1"]={name="Shadow",					pugType="tan", fame=4},
				["863ba1"]={name="Hydra",					pugType="tan", fame=5},
				["ce794a"]={name="Hydra",					pugType="tan", fame=5},
				["16d47c"]={name="Manticore",				pugType="tan", fame=5},
				["013cb1"]={name="Manticore",				pugType="tan", fame=5},
				["09a519"]={name="Ruin",					pugType="yellow", fame=7},
				["3ac2d6"]={name="Ruin",					pugType="yellow", fame=7},
				["f172a4"]={name="Ruin",					pugType="yellow", fame=7},
				["21dc40"]={name="Ruin",					pugType="yellow", fame=7},
				["58c5ab"]={name="Ruin",					pugType="yellow", fame=10},
				["8ca894"]={name="Ruin",					pugType="yellow", fame=0, monsters={"gray", "tan"}},
				["1e5666"]={name="Ruin",					pugType="yellow", fame=0, monsters={"green", "tan"}},
				["40fd40"]={name="Ruin",					pugType="yellow", fame=0, monsters={"tan", "purple"}},
				["2721c8"]={name="Ruin",					pugType="yellow", fame=0, monsters={"gray", "white"}},
				["0e09cf"]={name="Ruin",					pugType="yellow", fame=0, monsters={"gray", "purple"}},
				["a59f0b"]={name="Ruin",					pugType="yellow", fame=0, monsters={"tan", "red"}},
				["f3c6e3"]={name="Ruin",					pugType="yellow", fame=0, monsters={"green", "green"}},
				["28cc9c"]={name="Ruin",					pugType="yellow", fame=0, monsters={"purple", "purple"}},
				["3ae05e"]={name="Ruin",					pugType="yellow", fame=0, monsters={"green", "red"}},
				["2f9a1f"]={name="Ruin",					pugType="yellow", fame=0, monsters={"green", "green", "green"}},
				["90755e"]={name="Heroes",					pugType="gray", fame=5, reputation=-1},
				["7e72a2"]={name="Heroes",					pugType="gray", fame=5, reputation=-1},
				["f11b70"]={name="Heroes",					pugType="gray", fame=5, reputation=-1},
				["8ea708"]={name="Heroes",					pugType="gray", fame=5, reputation=-1},
				["3f4b5e"]={name="Thugs",					pugType="gray", fame=2, reputation=1},
				["88ecaa"]={name="Thugs",					pugType="gray", fame=2, reputation=1},
				["bc5065"]={name="Shocktroops",				pugType="gray", fame=3},
				["808631"]={name="Shocktroops",				pugType="gray", fame=3},
				["595429"]={name="Swordsmen",				pugType="gray", fame=4},
				["6767eb"]={name="Swordsmen",				pugType="gray", fame=4},
				["c68979"]={name="Golems",					pugType="gray", fame=4},
				["8b8eda"]={name="Golems",					pugType="gray", fame=4},
				["74a565"]={name="Crossbowmen",				pugType="gray", fame=3},
				["2fefc5"]={name="Crossbowmen",				pugType="gray", fame=3},
				["5d96c4"]={name="Crossbowmen",				pugType="gray", fame=3},
				["ba480e"]={name="Guardsmen",				pugType="gray", fame=3},
				["8fba3a"]={name="Guardsmen",				pugType="gray", fame=3},
				["6133cd"]={name="Guardsmen",				pugType="gray", fame=3},
				["034938"]={name="Ice Golems",				pugType="purple", fame=5},
				["f078f3"]={name="Fire Golems",				pugType="purple", fame=5},
				["96dcb6"]={name="Monks",					pugType="purple", fame=4},
				["944d16"]={name="Monks",					pugType="purple", fame=4},
				["6664bc"]={name="Ice Mages",				pugType="purple", fame=5},
				["1677d4"]={name="Ice Mages",				pugType="purple", fame=5},
				["8b8ed1"]={name="Illusionists",			pugType="purple", fame=4, monsters={"tan"}},
				["b8fce1"]={name="Illusionists",			pugType="purple", fame=4, monsters={"tan"}},
				["8a3f72"]={name="Magic Familiars",			pugType="purple", fame=5},
				["23fe94"]={name="Magic Familiars",			pugType="purple", fame=5},
				["3e7c19"]={name="Fire Mages",				pugType="purple", fame=5},
				["d6e9d0"]={name="Fire Mages",				pugType="purple", fame=5},
				["b8f920"]={name="Sorcerers",				pugType="purple", fame=5},
				["490a69"]={name="Sorcerers",				pugType="purple", fame=5},
				["eae753"]={name="Ice Catapult",			pugType="white", fame=7},
				["c0c315"]={name="Fire Catapult",			pugType="white", fame=7},
				["e6859f"]={name="Delphana Masters",		pugType="white", fame=9},
				["e9a281"]={name="Delphana Masters",		pugType="white", fame=9},
				["729056"]={name="Grim Legionnaires",		pugType="white", fame=8},
				["864fe1"]={name="Grim Legionnaires",		pugType="white", fame=8},
				["371007"]={name="Altem Guardsmen",			pugType="white", fame=8},
				["66c8b1"]={name="Altem Guardsmen",			pugType="white", fame=8},
				["051bc2"]={name="Altem Mages",				pugType="white", fame=8},
				["934839"]={name="Altem Mages",				pugType="white", fame=8},
				["a9f2bc"]={name="Freezers",				pugType="white", fame=7},
				["0cb639"]={name="Freezers",				pugType="white", fame=7},
				["f09496"]={name="Freezers",				pugType="white", fame=7},
				["4fa08c"]={name="Gunners",					pugType="white", fame=7},
				["25e35d"]={name="Gunners",					pugType="white", fame=7},
				["fc035c"]={name="Gunners",					pugType="white", fame=7},
				[darkCrusader.token]={name="Dark Crusader Leader", pugType="leader", fame=3, faction="Dark", monsters={[4]={"green", "green"}, [7]={"tan", "tan"}, [10]={"red", "red"}}},
				[elementalist.token]={name="Elementalist Leader", pugType="leader", fame=3, faction="Elem"}}

mageKnights={{mage="Arythea",  bag="960fa0", 	model="6d9676", token="cec32a", standee="416552", shieldContainer="8e02d7", marrkerContainer="6e95b2", crystals={"Red", "White"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929326097/5CCE1BAD2CA52C846D233A207EC5E1207BBF02FC/"},
			{mage="Braevalar", bag="eefacc", 	model="4deb82", token="e19cbd", standee="dc46c5", shieldContainer="a7adcf", marrkerContainer="3124e9", crystals={"Blue", "Green"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929326822/51CEC6AB36E912FF509CEA91C0F9C5522EA03BB9/"},
			{mage="Goldyx",	   bag="e573b9", 	model="0b41d9", token="05c32f", standee="529491", shieldContainer="3481b5", marrkerContainer="b501a0", crystals={"Green", "Blue"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929327577/C637088E8131F23A2A49870FA12237A05C82D506/"},
			{mage="Krang",	   bag="6fc671", 	model="fba7b8", token="8082fb", standee="8018ed", shieldContainer="2e1e73", marrkerContainer="43999e", crystals={"Red", "Green"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929328785/877D06E4394E2085FE76D68E570C4EE88A4B0494/"},
			{mage="Norowas",   bag="13d7b8", 	model="099aed", token="a48bf3", standee="8f6c33", shieldContainer="bc10a2", marrkerContainer="212e87", crystals={"White", "Green"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929330055/E2A363DAE9A26AA37EB53FBED1AE21BC943703C6/"},
			{mage="Tovak",	   bag="b0d65f", 	model="9613b9", token="ebe6fe", standee="f9d4d4", shieldContainer="ab8100", marrkerContainer="508c1f", crystals={"Blue", "Red"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929330647/7E3210D531952E8011C39AF685DBFA04F9920BA4/"},
			{mage="Wolfhawk",  bag="8f94bc", 	model="734454", token="e20c8e", standee="c24a0f", shieldContainer="79e58f", marrkerContainer="6caaf2", crystals={"White", "Blue"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929331239/15FF47AED58466D0738A117927BEAD1B306C445F/"},
			{mage="Ymirgh",	   bag="b8031f", 	model="a689c8", token="978471", standee="dfae67", shieldContainer="7236a9", marrkerContainer="2d7cc0", crystals={"White", "Red"}, shieldImage="http://cloud-3.steamusercontent.com/ugc/1478823218929331940/2337A82743D4BA6AD9FE3F948A30AA33591675BC/"},
			{mage="Volkare",   bag="63f203", 	model=volkare.model, token="938cd3", standee="a0d7b3"},
			{mage="Random",	   bag="",			model="", 						standee=""},
			{mage="nobody",	   bag="", 			model="", 						standee=""}}

skillTokens={	["1906f4"]={skillType="Turn", mage="Arythea"},				  	["33d341"]={skillType="Turn", mage="Arythea"},
				["68568b"]={skillType="Turn", mage="Arythea"},				  	["2f2ad9"]={skillType="Turn", mage="Arythea"},
				["24855b"]={skillType="Turn", mage="Arythea"},				  	["fe29ca"]={skillType="Turn", mage="Arythea"},
				["4b997c"]={skillType="Turn", mage="Arythea"},				  	["3fba07"]={skillType="Coop", mage="Arythea", name="Ritual of Pain"},
				["3d8336"]={skillType="Round", mage="Arythea"},				  	["d90de4"]={skillType="Round", mage="Arythea", name="Healing Ritual"},
				["0951b9"]={skillType="Round", mage="Arythea"},
				["c73c8c"]={skillType="Turn", mage="Braevalar"},				["ae8673"]={skillType="Round", mage="Braevalar"},
				["8892c4"]={skillType="Turn", mage="Braevalar"},				["407c99"]={skillType="Turn", mage="Braevalar"},
				["7d21e6"]={skillType="Turn", mage="Braevalar"},				["d01b70"]={skillType="Turn", mage="Braevalar"},
				["48fd35"]={skillType="Turn", mage="Braevalar"},				["19daf9"]={skillType="Comp", mage="Braevalar", name="Nature's Vengence"},
				["c93979"]={skillType="Round", mage="Braevalar"},				["4ac9f6"]={skillType="Coop", mage="Braevalar", name="Nature's Vengence"},
				["122015"]={skillType="Turn", mage="Braevalar"},
				["8cea19"]={skillType="Turn", mage="Goldyx"},					["91bf3d"]={skillType="Turn", mage="Goldyx"},
				["3a3f49"]={skillType="Turn", mage="Goldyx"},					["9eb4c5"]={skillType="Round", mage="Goldyx"},
				["4d5351"]={skillType="Round", mage="Goldyx"},				  	["866002"]={skillType="Round", mage="Goldyx"},
				["171244"]={skillType="Round", mage="Goldyx"},				  	["3bd08e"]={skillType="Comp", mage="Goldyx", name="Source Freeze"},
				["04319a"]={skillType="Round", mage="Goldyx"},				  	["3b3273"]={skillType="Coop", mage="Goldyx", name="Source Opening"},
				["0db37a"]={skillType="Round", mage="Goldyx"},
				["91c8a0"]={skillType="Round", mage="Krang", name="Arcane Disguise"}, ["0fbcfe"]={skillType="Round", mage="Krang"},
				["0688d8"]={skillType="Turn", mage="Krang"},					["6a33c1"]={skillType="Turn", mage="Krang"},
				["893537"]={skillType="Turn", mage="Krang"},					["adf8ab"]={skillType="Turn", mage="Krang"},
				["dbfdd1"]={skillType="Turn", mage="Krang"},					["045e9d"]={skillType="Turn", mage="Krang"},
				["5ebb23"]={skillType="Turn", mage="Krang"},					["0936c2"]={skillType="Turn", mage="Krang"},
				["1813fb"]={skillType="Turn", mage="Krang"},					["a49aea"]={skillType="Turn", mage="Krang"},
				["f36762"]={skillType="Turn", mage="Krang"},					["958209"]={skillType="Comp", mage="Krang", name="Mana Suppression"},
				["1ff34f"]={skillType="Turn", mage="Krang"},					["725de9"]={skillType="Coop", mage="Krang", name="Mana Enhancement"},
				["d8824d"]={skillType="Round", mage="Krang"},
				["93c62e"]={skillType="Turn", mage="Norowas"},				  	["257c0c"]={skillType="Turn", mage="Norowas"},
				["046187"]={skillType="Turn", mage="Norowas"},				  	["3f0f3b"]={skillType="Turn", mage="Norowas"},
				["f30dd4"]={skillType="Round", mage="Norowas"},				  	["b2dfce"]={skillType="Round", mage="Norowas"},
				["e45fdf"]={skillType="Round", mage="Norowas"},				  	["676855"]={skillType="Comp", mage="Norowas", name="Prayer of the Weather"},
				["3dc067"]={skillType="Round", mage="Norowas"},				  	["55e5e5"]={skillType="Coop", mage="Norowas", name="Calming the Weather"},
				["14399f"]={skillType="Round", mage="Norowas"},
				["5049e5"]={skillType="Turn", mage="Tovak"},					["dfaee3"]={skillType="Turn", mage="Tovak"},
				["1a78b3"]={skillType="Turn", mage="Tovak"},					["4c9273"]={skillType="Turn", mage="Tovak"},
				["6413a1"]={skillType="Turn", mage="Tovak"},					["9efc9b"]={skillType="Turn", mage="Tovak"},
				["036af1"]={skillType="Turn", mage="Tovak"},					["c4546c"]={skillType="Comp", mage="Tovak", name="Mana Exploit"},
				["0db913"]={skillType="Turn", mage="Tovak"},					["818aea"]={skillType="Coop", mage="Tovak", name="Mana Overload"},
				["ba4df5"]={skillType="Round", mage="Tovak"},
				["590a46"]={skillType="Turn", mage="Wolfhawk"},				 	["b73b21"]={skillType="Turn", mage="Wolfhawk"},
				["eeb395"]={skillType="Turn", mage="Wolfhawk"},				  	["7d1c32"]={skillType="Turn", mage="Wolfhawk"},
				["152a98"]={skillType="Turn", mage="Wolfhawk"},				  	["210835"]={skillType="Round", mage="Wolfhawk"},
				["84ea07"]={skillType="Round", mage="Wolfhawk"},				["a92d73"]={skillType="Comp", mage="Wolfhawk", name="Wolf's Howl"},
				["2c74ca"]={skillType="Round", mage="Wolfhawk"},				["564392"]={skillType="Coop", mage="Wolfhawk", name="Howl of the Pack"},
				["527b47"]={skillType="Round", mage="Wolfhawk"},
				["31b225"]={skillType="Turn", mage="Ymirgh"},					["2cbfd9"]={skillType="Round", mage="Ymirgh"},
				["80b843"]={skillType="Turn", mage="Ymirgh"},					["79503e"]={skillType="Turn", mage="Ymirgh"},
				["babfbf"]={skillType="Round", mage="Ymirgh"},				  	["f50f77"]={skillType="Round", mage="Ymirgh"},
				["5b42dc"]={skillType="Round", mage="Ymirgh"},				  	["335290"]={skillType="Comp", mage="Ymirgh", name="Master Rune of Quebrith the Mad"},
				["929377"]={skillType="Round", mage="Ymirgh"},				  	["ebbbfc"]={skillType="Round", mage="Ymirgh", name="Cheers, for our Failures!"},
				["038787"]={skillType="Round", mage="Ymirgh"}}

--first 6 are the full cards, while the last 6 are the matching half cards.
bannerCards={"7d608f", "6b4654", "085e50", "df2eae", "98681f", "7b9ec1",		"596cfa", "986216", "0b5b32", "e48e44", "8dbce4", "8e4b92"}

tacticClaimingZones={["9e319e"]="tactic1", ["32172f"]="tactic2", ["bc2046"]="tactic3", ["8363fc"]="tactic4", ["01ac7e"]="tactic5", ["582d2b"]="tactic6"}--Tactic Zones

cardClaimingZones={	["45cc44"]="offer", --Advanced Actions and Spell Zones
					["d51391"]="monastery", ["5c4c6d"]="monastery", ["caf03e"]="monastery", ["d925e4"]="monastery", ["b7cb3b"]="monastery",--Monastery Zones
					["926d63"]="unit", 		["05867c"]="unit", 		["ff65ef"]="unit", 		["5c85c9"]="unit",--Unit Zones
					["1821db"]="unit", 		["e393d7"]="unit", 		["f25213"]="unit", 		["c75fb0"]="unit"}--Unit Zones

reputationTable={	[-7]={repZone="8cab8a", reputationPos={30.03, 1.15, 24.26}, repDisplay="No Interaction"},
					[-6]={repZone="3c3dd6", reputationPos={31.30, 1.15, 23.04}, repDisplay="-5"},
					[-5]={repZone="0a5779", reputationPos={32.76, 1.15, 22.27}, repDisplay="-3"},
					[-4]={repZone="8d3262", reputationPos={34.16, 1.15, 21.68}, repDisplay="-2"},
					[-3]={repZone="ba6168", reputationPos={35.67, 1.15, 21.30}, repDisplay="-1"},
					[-2]={repZone="3e31b8", reputationPos={37.05, 1.15, 20.85}, repDisplay="-1"},
					[-1]={repZone="f930d4", reputationPos={38.28, 1.15, 20.18}, repDisplay="+0"},
					[0]={repZone="aed41b", reputationPos={39.72, 1.15, 19.23}, repDisplay="+0"},
					[1]={repZone="5440e9", reputationPos={40.29, 1.15, 17.54}, repDisplay="+0"},
					[2]={repZone="2d6086", reputationPos={40.55, 1.15, 16.15}, repDisplay="+1"},
					[3]={repZone="686e67", reputationPos={40.38, 1.15, 14.62}, repDisplay="+1"},
					[4]={repZone="bc0c12", reputationPos={40.29, 1.15, 13.13}, repDisplay="+2"},
					[5]={repZone="a63c14", reputationPos={40.25, 1.15, 11.67}, repDisplay="+2"},
					[6]={repZone="0cee8e", reputationPos={40.45, 1.15, 10.07}, repDisplay="+3"},
					[7]={repZone="ae71a7", reputationPos={40.64, 1.15, 8.50}, repDisplay="+5"}}

cityScriptZones={	["8a7266"]={				cityGUID="6079bc", 					cityName="Blue City", 		cityReminder="ad7b3f", 	cityCard="79a723"},--Blue City Card
					["648da8"]={				cityGUID="d0acb2", 					cityName="Red City", 		cityReminder="a0ec73", 	cityCard="bd6ab1"},--Red City Card
					["213d78"]={				cityGUID="34e3e4", 					cityName="Green City", 		cityReminder="39d3f3", 	cityCard="8de450"},--Green City Card
					["d2d65e"]={				cityGUID="156b6a", 					cityName="White City", 		cityReminder="b9bc1c", 	cityCard="a37b57"},--White City Card
					[volkare.discZone]={		cityGUID=volkare.terrainHex, 		cityName="Volkare's Camp", 	cityReminder="758fb3", 	cityCard="5a616b"},--Volkare Large Token
					[darkCrusader.discZone]={	cityGUID=darkCrusader.terrainHex, 	cityName="Dark Crusader", 	cityReminder="", 		cityCard=darkCrusader.disc},--Dark Cultists Large Token (Update with 13th "Killed" state GUID]
					[elementalist.discZone]={	cityGUID=elementalist.terrainHex, 	cityName="Elementalist", 	cityReminder="", 		cityCard=elementalist.disc}} --Elementalist Large Token (Update with 13th "Killed" state GUID]

leaderData={[elementalist.terrainHex]={[1]={discImg="http://cloud-3.steamusercontent.com/ugc/771741498205487192/6E0004CAF0CFCB3319FFE1673370A4522E4936FB/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359419518/B454AD9854221F41FF8A75338C9A2B9DAFCE0A76/"},
						[2]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205487560/69219577AFA2859765A6D9D4CB23D4BF10FD5895/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359420212/56ECD2D3E268BB626FB237432CB2364236F2BD1B/"},
						[3]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205488228/F43E31226C38214CD868C9B82C5195CCBF2C60C8/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359420819/F7AA58D13491ABE24A9424D613D322E3607E6EA0/"},
						[4]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205488657/F13A896CD9FDF9D12907083B0E34EBC4568C7343/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359421717/C9A0875A5F2C959D8A09C5208C440688D98BFB06/"},
						[5]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205488989/ED79428D945C61C55666414CFC78EDB9DD1657A0/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359422510/024C5645471C6F25F31B367C093388C9DD54A127/"},
						[6]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205489409/84B1E3B036381F8783FACE1F03AC18D2DA515FE0/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359423336/8E76FD946CE4772A6C6B5751A426B3EA2487889A/"},
						[7]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205489813/F067553F29CB5CE83D219551A2B79BFA44B64AED/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359423925/A60B959A079B234FBCE84C52FF1218503919F821/"},
						[8]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205490275/4E211774686E47BD45A595A526622263FE79D3D1/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359424683/D66C960898E84345F63BD3B05927174C5FED6CE6/"},
						[9]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205490680/CA508822265C5D85E13171B16A9E5E85A4301CE7/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359425290/69408EABF2101FFB9AD858F0822038262937BDE4/"},
						[10]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205491163/13963D9796C88FC3AD89954E19713997E4C63860/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359426141/95A13944F57123A33667933BB51654E68CC9EA45/"},
						[11]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205491595/5E1FCAA6F870662C6C47B88E95C8C2253AD803A5/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359426872/C1D2912B40A77775243DBB47C8139E1BF9F1EB5B/"},
						[12]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498205491936/6E27018BD394ED4FD4042929AAAB4CBCDB3BB497/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359427530/CD0C93BBDC6F4C48360A843782650CDDD51053D3/"},
						["dead"]={discImg="http://cloud-3.steamusercontent.com/ugc/771741498205492402/AF5B950C4B5561BABDC5B1A725CB943A5538A71D/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/771741498205486853/15240F9135E4D8799E273D4B9A791821D442914B/"}},
			[darkCrusader.terrainHex]={[1]={discImg="http://cloud-3.steamusercontent.com/ugc/771741498203800499/287073997C940BA1BFE236B70AF26D8CC4894601/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588036874656869683/2D9176CBD7040D13D16393F80E7940647BD43779/"},
						[2]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203801174/6C8C0300F232A52376311A4ADC0999BCC3E33401/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588036874656914347/E248016C65F83240DDD8F16BC479BAB58F00E4D8/"},
						[3]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203878827/61B8D33E86EABF3D190DDBF71E76B73364FB2C5D/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588036874657024912/C7C0A0BC6B15FEA100C328439E5D615BC584073B/"},
						[4]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203879338/627DE1A5D8F2E88478B4BE74AB00C203AFD1717A/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588036874657133468/06A41E741DC8ED35DE5CCF8553FB7102AECD6287/"},-- green green
						[5]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203880759/96891F544F72068892570C044798F93CFBCF29C5/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588036874657211562/C3ECA39A3C50DB0449720BBE0E6B370B08D643A3/"},
						[6]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203884278/C7735B28EE7C9ECBCFD2A38786DCCC824DD48F4B/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359403871/E90E48BA892C42E5365DFDFBE1F6D237B16D7CCC/"},
						[7]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203885065/5414DA78FFA39E69429373609CF8DF17C305A7A0/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359404776/328CCD2D7AC442F655D57BB2753816436B402F35/"},-- tan tan
						[8]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203885894/F09E8F66A8E61C59F4401118164F38B32ED39826/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359405761/4525CEAD53DC4F41649C5467B3307115B5D7D4F1/"},
						[9]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203886522/0EA1DD400B24E41EBE2399E655F22A69B2F6E15C/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359406388/9E2BD0C7CA7FB24026A7860CC65CE7886FCAED1D/"},
						[10]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203887229/D3E7241B92E487813AD2B6F02C247D4C76A4B1F3/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359406987/B390BFD5E9B8EF6375AFD24CB2EA3EB572C671E0/"},-- Red Red
						[11]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203887877/6E2C1D040FF03AB951D0C2C5A1C4DDC8B0E711B3/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359408064/9049335FD24E94307E5644E5E523A53B520C10A7/"},
						[12]={	discImg="http://cloud-3.steamusercontent.com/ugc/771741498203888527/25CBAB9707A9591F0D8CF9AE00276E9E254DCAAF/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/1588037098359408873/723C769D294DA1A167F81CBE78535C070EEB2F61/"},
						["dead"]={discImg="http://cloud-3.steamusercontent.com/ugc/771741498205494490/A38E7BFDE44E8353E29D86815A57107CAB3D3063/",
								tokenImg="http://cloud-3.steamusercontent.com/ugc/771741498203799156/1A512512B7824EE46AF406960D5809F75CE636F5/"}}}

cityLevelImage={["6079bc"]={"http://cloud-3.steamusercontent.com/ugc/766100111188244779/C069BB7DC65150C4E32D50FC316CA8203DDB31DE/",--Blue City
							"http://cloud-3.steamusercontent.com/ugc/766100111188245609/64B9510A099D31C6268C38A7F9E5FB29FA7E2F5D/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188246436/9A239A8087133E1FBAC8EBFE0401ABA63CC8D8FA/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188235321/087B3A0F32B3F48A38A2C8292FB7168B47E70AB3/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188234741/0796B3D77D4C147580C672A073B9BD605472C3DA/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188234100/E1A6BB57C2B06E6DB0F7061A7923F89D968C39A0/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188910647/0C488156DD45BFE3DC449F8AD3D783AB776C0573/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188217116/B93F6DF8005877A86F8753A4EC9567F10D9E75A6/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188217981/AEA95E36EC5C15E866F9D5E9EC9D089F9E077F37/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188221756/C3418062C4CFCB6622680EBE3AC9891D9D11B373/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188220908/7CF8AFF664EF172F290309BC40A1C1928F9EA34B/",
							["Blank"]="http://cloud-3.steamusercontent.com/ugc/766100111188220148/E813AD9999A3E7F5F2EA0C5E0AFF606E6AB2F5C1/"},
				["d0acb2"]={"http://cloud-3.steamusercontent.com/ugc/766100111188760998/F027C0A2B82FC5A50D4DDD0A8809B910BA7C195B/",--Red City
							"http://cloud-3.steamusercontent.com/ugc/766100111188761782/9D35CD69BD2214F108A053661601780EAAF26BE0/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188762812/3A9C4BD457570447597C76A61D8F4FBBBF06E182/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188763687/E279CE087C4D4DE14BE1D51372794369F00886A4/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188764638/29AD12454BA9AB5511B4C065AEAD0A7F98B5BF34/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188765205/71FC935CA88293C7D34C3B825BFD043B0E640CE3/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188766118/6F4FCE66343155CB96653750761152E28693CE91/",
							'http://cloud-3.steamusercontent.com/ugc/766100111188767253/AD74F0AE29B0038636831D226D103816EB1E40B2/',
							"http://cloud-3.steamusercontent.com/ugc/766100111188768783/1001A3CA33D2E6010C3F49BF762D7644891D2EF9/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188769549/D30F2C63833BD02E997C8BACFCFFACA9C855512B/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188770314/D3F8D1ED68E6CD1D5D4F554B2169DF324ACF019F/",
							["Blank"]="http://cloud-3.steamusercontent.com/ugc/766100111188758588/C8D378D84A7A07E5E0E93D04CD6DC65DCCF6B547/"},
				["34e3e4"]={"http://cloud-3.steamusercontent.com/ugc/766100111188341031/9D909F535D7140B9DDB3B5E563B0A2DA5C394EFB/",--Green City
							"http://cloud-3.steamusercontent.com/ugc/766100111188382215/C7CCDC219BF74F4B2EE7B4083409C40A19CDAAB9/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188382841/C81EF21E3533C8AF90B211BFF8420EABCD9D77CF/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188383564/ED0AADDDCE35B8F1186E6133C79391B69EEE585F/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188385248/E594096DCAD061D4A27A04E3EA43B7A4E4D23CE3/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188386268/BDDA76E5211D40E6582CAE8017A3D92B60708FC5/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188387316/749CA496A7A2D75E87638BE0AFB4BFA68A8EFB2A/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188388398/AF75F76BC090C929DE575F1155D3A7611423C1C7/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188389441/1FD8338F9076350A57BD4890C7EE2A820F7B5FED/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188390444/D594F7EB67FE08AB38FA12101194F100F0C1B8E8/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188391101/2C731B283C0DA5BF354B6BBEA245F5ABAB607D9A/",
							["Blank"]="http://cloud-3.steamusercontent.com/ugc/766100111188343273/B0A9966F4A8A2B257D348D8424E82056D7335915/"},
				["156b6a"]={"http://cloud-3.steamusercontent.com/ugc/766100111188783541/515E6827D4D7B10602BD2C245102838EE3EEF97E/",--White City
							"http://cloud-3.steamusercontent.com/ugc/766100111188784190/15B3D7532A3155F64217DFF42CEC80A9321EC188/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188784887/DF4730E2B261FCB86438070573C8B6B081BD2259/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188785703/1DB3B9C9F714CCA0C73776A52E27B2D912A85615/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188786296/3E59696060A26B572798037EE540EAE7DA0A5177/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188787190/6323959AA9FBA80FA0230183A4C5E4868EC451E7/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188787794/96CA2F338765749622B0F0BA588ED5C9B255235C/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188788561/29F46F399E38523E5F7ABDAFBA752542916E6737/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188789598/2957AA50CBB9BB19A36F0C67FC75B8DE97E4D867/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188790578/A86BC2AD53524240A97696C13F18321DCD90F73C/",
							"http://cloud-3.steamusercontent.com/ugc/766100111188791260/EE1CD52BB6D9B3643276651386D3C86B88FECDA0/",
							["Blank"]="http://cloud-3.steamusercontent.com/ugc/766100111188780742/58E071A0F6E49C9BAC74E4B00BEEC7DDB7FF536F/"}}

--This will store all the information about the Mage Knights playing.
--It will be sorted by diferent criterea to work out turn orders
--It is populated during Player Setup, but needs to be initiated here
turnOrder={	seatPos=0, mage="", fame=0, fameGain=0, reputation=0, RepGain=0, scoreLoop=0, hand=5, baseHand=5, tactic=1, nearCity=false, nearKeep=false, keepsBeat=0, discardCount=0, level=3, influence=6,
			deadDeckInventory={}, dummyCrystals={Red=0,Blue=0,Green=0,White=0}, score={}, levelingStats={}, avatarLocation="", handBonus=0,
			playerBoardGUID={}, fameGUID={}, reputationGUID={}, skillGUID={}, commandGUID={}, turnOrderTokenGUID="", pillagedVillage=false}

--This will store all the information about the game being played
--All these variable are reminders of the saved defaults only.
--They are overwritten during "onLoad" by the previously saved variables.
--if a change is needed, a copy must be put after the onload, to overwrite the overwrite, then a save performed, then the copy deleted.
gStates={firstStarted=0, playerCount=0, blitz=0, coop=0, gameScenario="Conquest", autoFlip=false, offerSize=3,						--Game State Variales.
	positionMageKnight={"nobody", "nobody", "nobody", "nobody", "nobody"},															--Which mage knight is at which position
	playersRef=2, scenarioRef=1, rampageAmbush=false, rampagePursuit=false,	pursuing={}, arrowDelete={}, pursuitTwoOption=true, skippedMove=false,--Used to find data in the scenarioList Table
	rampage=0, removeLostLegionExpansion=false, shadesOfTezlaPugs=false, monsterPlayLocation={}, mineMonsterQty={},	rampagingMonsters={}, summonStates={}, monsterOffsetZ=0,--Monster Variables
	tacticShown=false, tacticRemove=false, tacticTwoState="", tacticFourState="", tacticSixState="", powerStored=0, tactic4HandBonus=0,--Tactic Variables
	turnNumber=1, currentRound=1, endRoundCalled=false, preEndTurn=false, rounds=6,	realTurn=1,	skipTurn={}, endGameAchieved=false,	--Turn and Round Variables
	megapolis=0, randomCities=false, cityVolkareTile="835c91", volkareCampAsCity=false, citiesPlayed={}, cityMonsterQty={},	smoke={},--City Variables
	volkareCombatLevel=1, volkareRaceLevel=1, volkareStart=false, volkareUnitCrystals={}, volkareRecruit=0,							--Volkare Variables
	cityRevealed={}, volkareModel="", volkareWon=false, volkareRaisedCity=false, volkareArmyDefeated=0,								--Volkare Variables
	elementalistLevel=0, darkCrusaderLevel=0, leaderReduction=0, leaderOverkill=1, 													--Tezla Leaders
	eliteUnitsUsed=false, totalUnitCount=0,	ambushing={},																	--Unit Variables
	rowLengthGainPerLevel=1.82, normalRowLength=15.7, rowsOnBoard=10, scoreIfLooped=120,											--Fame board stats
	soloCoop={}, doingTheRounds={},	mageSkills={}, locationPlace={},																--skill variables
	dayRound=false, darknessComing=false, timeChanged=false, startAtNight=false,													--Day Night Variables
	questMod=false, weatherMod=false, includeYmirgh=false, mageKnightLevels=false, dummyAllSkills=false,							--Options Variables
	noticeShown=false, help=false, skillButtons=0, gainList={},	levelingUp=false, 													--UI Variables
	dieRollPause=true, mainUIPause=true, diceNeeded=0,																				--Mana Pool Variables
	allPlayersFoughtAFactionLeaderCheck=false, allPlayersFoughtBothFactionLeaderCheck=false,										--Scoring variables
	allLeaderCheck=false, defeatedFaction=0, defeatedCities=0, defeatedFactionTest={}, volkareCityDefeat=false,						--Scoring variables
	randomTileOrientation=false, playedCoreTiles=0, playedGladeTiles=0, monasteryCount=0, monasteryBurned={}, playedAllready={}, hexOverideSave={},--Terrain Variables
	motivationSkill={	["3d8336"]={state="notClaimed", pos=0, bonus=" & Gain a Red Mana Token."}, --Arythea
						["171244"]={state="notClaimed", pos=0, bonus=" & Gain a Green Mana Token."}, --Goldyx
						["14399f"]={state="notClaimed", pos=0, bonus=" & Gain a White Mana Token."}, --Norowas
						["ba4df5"]={state="notClaimed", pos=0, bonus=" & Gain a Blue Mana Token."}, --Tovak
						["527b47"]={state="notClaimed", pos=0, bonus=" & Gain a Fame."}}} --Wolfhawk

--Used to work out fame board equations
cellGainPerLevel=2
normalCellAmount=3
topOfFameBoard=26.2
heightOfFameBoard=26.2
leftOfFameBoard=11.48

GameRecord={gameScenario=gStates.gameScenario,
			blitz=gStates.blitz,
			rounds=scenarioList[gStates.scenarioRef][gStates.playersRef].rounds,
			mapShape=scenarioList[gStates.scenarioRef][gStates.playersRef].mapShape,
			countryTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].countryTiles,
			coreTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].coreTiles,
			cityTiles=scenarioList[gStates.scenarioRef][gStates.playersRef].cityTiles,
			cityLevels=scenarioList[gStates.scenarioRef][gStates.playersRef].cityLevels,
			randomTileOrientation=gStates.randomTileOrientation,
			volkareCampAsCity=gStates.volkareCampAsCity,
			megapolis=gStates.megapolis,
			randomCities=gStates.randomCities,
			positionMageKnight=gStates.positionMageKnight,
			includeYmirgh=gStates.includeYmirgh,
			dummyAllSkills=gStates.dummyAllSkills,
			mageKnightLevels=gStates.mageKnightLevels,
			rampagePursuit=gStates.rampagePursuit,
			rampageAmbush=gStates.rampageAmbush,
			rampage=gStates.rampage,
			removeLostLegionExpansion=gStates.removeLostLegionExpansion,
			shadesOfTezlaPugs=gStates.shadesOfTezlaPugs,
			volkareCombatLevel=gStates.volkareCombatLevel,
			volkareRaceLevel=gStates.volkareRaceLevel,
			darknessComing=gStates.darknessComing,
			startAtNight=gStates.startAtNight,
			questMod=gStates.questMod,
			weatherMod=gStates.weatherMod,
			autoFlip=gStates.autoFlip,
			offerSize=gStates.offerSize}--add some way to see if table toggled




DEBUG = false
function loadStats(save_state, initial_wait, interval, debug)
    local STAT_URL = "https://script.google.com/macros/s/AKfycbzC-a1nQ6YwdN9nFBehuSRTR5Ts-7EzKlQbLdgiVQ/exec"
    local initial_wait = initial_wait or 600
    local interval = interval or 120
    if debug then DEBUG=debug end

    local state = JSON.decode(save_state)
	if DEBUG then log("Session already started (rewinded?) only setting interval") end
	Wait.time(function()
		if DEBUG then log("Pinging stats.") end
		WebRequest.post(STAT_URL, {moment="ping", id=ID, num_players=#getSeatedPlayers()}, l)
	end, interval, -1)
end

function l(w)
    if DEBUG then log(w.text) end
end


function save_id(w)
    if DEBUG then log("Received ID.") end
    if DEBUG then log(w.text) end
    current_save = GameRecord
    if not current_save then current_save={} end
    ret = JSON.decode(w.text)
    ID = ret.id
    current_save["ID"] = ID
    if DEBUG then log(current_save) end
    --self.script_state = JSON.encode(current_save)
end

--function onSave()
--    return self.script_state
--end

--WebRequest.post(STAT_URL, {moment="start", num_players=#getSeatedPlayers(), delay=initial_wait}, save_id)
